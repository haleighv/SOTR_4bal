
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  0000209a  0000212e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000209a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000189d  00800210  00800210  0000213e  2**0
                  ALLOC
  3 .stab         000008a0  00000000  00000000  00002140  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ac  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002b90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a1  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b49  00000000  00000000  000055d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e7  00000000  00000000  0000611a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000960  00000000  00000000  00007204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000107c  00000000  00000000  00007b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002665  00000000  00000000  00008be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_13>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__vector_32>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e9       	ldi	r30, 0x9A	; 154
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e1       	ldi	r17, 0x1A	; 26
     112:	a0 e1       	ldi	r26, 0x10	; 16
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ad 3a       	cpi	r26, 0xAD	; 173
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 40 03 	call	0x680	; 0x680 <main>
     124:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <vIO_init>:
* return: void
*--------------------------------------------------------*/
void vIO_init(void)
{
	// Set PortA (LEDs) as all outputs
	DDRA = 0xFF;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	81 b9       	out	0x01, r24	; 1
	// Turn LEDs off
	PORTA = 0xFF;
     130:	82 b9       	out	0x02, r24	; 2
}
     132:	08 95       	ret

00000134 <initialize_timer2>:
*
* return: void
*--------------------------------------------------------*/
void initialize_timer2()
{
	TIMSK2 = (1 << OCIE2A);//Set interrupt mask for OC2A
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = ((1 << COM2A1) | (1 << COM2A0)|(1<<WGM21));//Set OC2A on Compare Match
     13a:	82 ec       	ldi	r24, 0xC2	; 194
     13c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((1 << CS22) |(1 << CS21) | (1 << CS20));//Set timer2 to CTC, prescaler of 1024
     140:	87 e0       	ldi	r24, 0x07	; 7
     142:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A  = TIMER2_10Hz; //initialize ocra2 to value corresponding to 10Hz interrupt generation
     146:	8d e0       	ldi	r24, 0x0D	; 13
     148:	80 93 b3 00 	sts	0x00B3, r24
}
     14c:	08 95       	ret

0000014e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     14e:	af 92       	push	r10
     150:	bf 92       	push	r11
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	6c 01       	movw	r12, r24
     164:	e6 2e       	mov	r14, r22
     166:	f4 2e       	mov	r15, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     168:	8a e1       	ldi	r24, 0x1A	; 26
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     170:	8c 01       	movw	r16, r24
	if( pxCoRoutine )
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	09 f4       	brne	.+2      	; 0x178 <xCoRoutineCreate+0x2a>
     176:	62 c0       	rjmp	.+196    	; 0x23c <xCoRoutineCreate+0xee>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     178:	80 91 10 02 	lds	r24, 0x0210
     17c:	90 91 11 02 	lds	r25, 0x0211
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	39 f5       	brne	.+78     	; 0x1d2 <xCoRoutineCreate+0x84>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     184:	10 93 11 02 	sts	0x0211, r17
     188:	00 93 10 02 	sts	0x0210, r16
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     18c:	c3 e1       	ldi	r28, 0x13	; 19
     18e:	d2 e0       	ldi	r29, 0x02	; 2
     190:	ce 01       	movw	r24, r28
     192:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
     196:	ce 01       	movw	r24, r28
     198:	09 96       	adiw	r24, 0x09	; 9
     19a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     19e:	c5 e2       	ldi	r28, 0x25	; 37
     1a0:	d2 e0       	ldi	r29, 0x02	; 2
     1a2:	ce 01       	movw	r24, r28
     1a4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     1a8:	0f 2e       	mov	r0, r31
     1aa:	fe e2       	ldi	r31, 0x2E	; 46
     1ac:	af 2e       	mov	r10, r31
     1ae:	f2 e0       	ldi	r31, 0x02	; 2
     1b0:	bf 2e       	mov	r11, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	c5 01       	movw	r24, r10
     1b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     1ba:	87 e3       	ldi	r24, 0x37	; 55
     1bc:	92 e0       	ldi	r25, 0x02	; 2
     1be:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     1c2:	d0 93 41 02 	sts	0x0241, r29
     1c6:	c0 93 40 02 	sts	0x0240, r28
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     1ca:	b0 92 43 02 	sts	0x0243, r11
     1ce:	a0 92 42 02 	sts	0x0242, r10
     1d2:	ce 2d       	mov	r28, r14
     1d4:	e1 10       	cpse	r14, r1
     1d6:	c1 e0       	ldi	r28, 0x01	; 1
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     1d8:	f8 01       	movw	r30, r16
     1da:	11 8e       	std	Z+25, r1	; 0x19
     1dc:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     1de:	c6 8b       	std	Z+22, r28	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     1e0:	f7 8a       	std	Z+23, r15	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     1e2:	c1 92       	st	Z+, r12
     1e4:	d1 92       	st	Z+, r13
     1e6:	7f 01       	movw	r14, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     1e8:	cf 01       	movw	r24, r30
     1ea:	0e 94 de 03 	call	0x7bc	; 0x7bc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     1ee:	c8 01       	movw	r24, r16
     1f0:	0c 96       	adiw	r24, 0x0c	; 12
     1f2:	0e 94 de 03 	call	0x7bc	; 0x7bc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     1f6:	f8 01       	movw	r30, r16
     1f8:	11 87       	std	Z+9, r17	; 0x09
     1fa:	00 87       	std	Z+8, r16	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     1fc:	13 8b       	std	Z+19, r17	; 0x13
     1fe:	02 8b       	std	Z+18, r16	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     200:	84 e0       	ldi	r24, 0x04	; 4
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8c 1b       	sub	r24, r28
     206:	91 09       	sbc	r25, r1
     208:	95 87       	std	Z+13, r25	; 0x0d
     20a:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     20c:	86 89       	ldd	r24, Z+22	; 0x16
     20e:	90 91 12 02 	lds	r25, 0x0212
     212:	98 17       	cp	r25, r24
     214:	10 f4       	brcc	.+4      	; 0x21a <xCoRoutineCreate+0xcc>
     216:	80 93 12 02 	sts	0x0212, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	9c 01       	movw	r18, r24
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	8d 5e       	subi	r24, 0xED	; 237
     230:	9d 4f       	sbci	r25, 0xFD	; 253
     232:	b7 01       	movw	r22, r14
     234:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

		xReturn = pdPASS;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <xCoRoutineCreate+0xf0>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     23c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return xReturn;	
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	bf 90       	pop	r11
     250:	af 90       	pop	r10
     252:	08 95       	ret

00000254 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8b 01       	movw	r16, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     25e:	c0 91 44 02 	lds	r28, 0x0244
     262:	d0 91 45 02 	lds	r29, 0x0245
     266:	c8 0f       	add	r28, r24
     268:	d9 1f       	adc	r29, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     26a:	80 91 10 02 	lds	r24, 0x0210
     26e:	90 91 11 02 	lds	r25, 0x0211
     272:	02 96       	adiw	r24, 0x02	; 2
     274:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     278:	e0 91 10 02 	lds	r30, 0x0210
     27c:	f0 91 11 02 	lds	r31, 0x0211
     280:	d3 83       	std	Z+3, r29	; 0x03
     282:	c2 83       	std	Z+2, r28	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     284:	80 91 44 02 	lds	r24, 0x0244
     288:	90 91 45 02 	lds	r25, 0x0245
     28c:	c8 17       	cp	r28, r24
     28e:	d9 07       	cpc	r29, r25
     290:	50 f4       	brcc	.+20     	; 0x2a6 <vCoRoutineAddToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     292:	bf 01       	movw	r22, r30
     294:	6e 5f       	subi	r22, 0xFE	; 254
     296:	7f 4f       	sbci	r23, 0xFF	; 255
     298:	80 91 42 02 	lds	r24, 0x0242
     29c:	90 91 43 02 	lds	r25, 0x0243
     2a0:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>
     2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <vCoRoutineAddToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     2a6:	bf 01       	movw	r22, r30
     2a8:	6e 5f       	subi	r22, 0xFE	; 254
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	80 91 40 02 	lds	r24, 0x0240
     2b0:	90 91 41 02 	lds	r25, 0x0241
     2b4:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>
	}

	if( pxEventList )
     2b8:	01 15       	cp	r16, r1
     2ba:	11 05       	cpc	r17, r1
     2bc:	49 f0       	breq	.+18     	; 0x2d0 <vCoRoutineAddToDelayedList+0x7c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     2be:	60 91 10 02 	lds	r22, 0x0210
     2c2:	70 91 11 02 	lds	r23, 0x0211
     2c6:	64 5f       	subi	r22, 0xF4	; 244
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	c8 01       	movw	r24, r16
     2cc:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>
	}
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     2ea:	80 91 37 02 	lds	r24, 0x0237
     2ee:	88 23       	and	r24, r24
     2f0:	b9 f1       	breq	.+110    	; 0x360 <vCoRoutineSchedule+0x86>
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     2f2:	0f 2e       	mov	r0, r31
     2f4:	fc e3       	ldi	r31, 0x3C	; 60
     2f6:	ef 2e       	mov	r14, r31
     2f8:	f2 e0       	ldi	r31, 0x02	; 2
     2fa:	ff 2e       	mov	r15, r31
     2fc:	f0 2d       	mov	r31, r0
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     2fe:	0f 2e       	mov	r0, r31
     300:	f7 e3       	ldi	r31, 0x37	; 55
     302:	cf 2e       	mov	r12, r31
     304:	f2 e0       	ldi	r31, 0x02	; 2
     306:	df 2e       	mov	r13, r31
     308:	f0 2d       	mov	r31, r0
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     30a:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     30c:	d7 01       	movw	r26, r14
     30e:	ed 91       	ld	r30, X+
     310:	fc 91       	ld	r31, X
     312:	c6 81       	ldd	r28, Z+6	; 0x06
     314:	d7 81       	ldd	r29, Z+7	; 0x07
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     316:	ce 01       	movw	r24, r28
     318:	0c 96       	adiw	r24, 0x0c	; 12
     31a:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
     31e:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     320:	8e 01       	movw	r16, r28
     322:	0e 5f       	subi	r16, 0xFE	; 254
     324:	1f 4f       	sbci	r17, 0xFF	; 255
     326:	c8 01       	movw	r24, r16
     328:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	90 91 12 02 	lds	r25, 0x0212
     332:	98 17       	cp	r25, r24
     334:	10 f4       	brcc	.+4      	; 0x33a <vCoRoutineSchedule+0x60>
     336:	80 93 12 02 	sts	0x0212, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9c 01       	movw	r18, r24
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	8d 5e       	subi	r24, 0xED	; 237
     350:	9d 4f       	sbci	r25, 0xFD	; 253
     352:	b8 01       	movw	r22, r16
     354:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     358:	f6 01       	movw	r30, r12
     35a:	80 81       	ld	r24, Z
     35c:	88 23       	and	r24, r24
     35e:	a9 f6       	brne	.-86     	; 0x30a <vCoRoutineSchedule+0x30>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     360:	0e 94 2b 0c 	call	0x1856	; 0x1856 <xTaskGetTickCount>
     364:	20 91 46 02 	lds	r18, 0x0246
     368:	30 91 47 02 	lds	r19, 0x0247
     36c:	82 1b       	sub	r24, r18
     36e:	93 0b       	sbc	r25, r19
     370:	90 93 49 02 	sts	0x0249, r25
     374:	80 93 48 02 	sts	0x0248, r24
     378:	74 c0       	rjmp	.+232    	; 0x462 <vCoRoutineSchedule+0x188>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     37a:	20 91 44 02 	lds	r18, 0x0244
     37e:	30 91 45 02 	lds	r19, 0x0245
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 45 02 	sts	0x0245, r19
     38a:	20 93 44 02 	sts	0x0244, r18
		xPassedTicks--;
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	90 93 49 02 	sts	0x0249, r25
     394:	80 93 48 02 	sts	0x0248, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	81 f4       	brne	.+32     	; 0x3be <vCoRoutineSchedule+0xe4>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     39e:	80 91 40 02 	lds	r24, 0x0240
     3a2:	90 91 41 02 	lds	r25, 0x0241
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     3a6:	20 91 42 02 	lds	r18, 0x0242
     3aa:	30 91 43 02 	lds	r19, 0x0243
     3ae:	30 93 41 02 	sts	0x0241, r19
     3b2:	20 93 40 02 	sts	0x0240, r18
			pxOverflowDelayedCoRoutineList = pxTemp;
     3b6:	90 93 43 02 	sts	0x0243, r25
     3ba:	80 93 42 02 	sts	0x0242, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     3be:	e0 91 40 02 	lds	r30, 0x0240
     3c2:	f0 91 41 02 	lds	r31, 0x0241
     3c6:	80 81       	ld	r24, Z
     3c8:	88 23       	and	r24, r24
     3ca:	09 f4       	brne	.+2      	; 0x3ce <vCoRoutineSchedule+0xf4>
     3cc:	4a c0       	rjmp	.+148    	; 0x462 <vCoRoutineSchedule+0x188>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     3ce:	05 80       	ldd	r0, Z+5	; 0x05
     3d0:	f6 81       	ldd	r31, Z+6	; 0x06
     3d2:	e0 2d       	mov	r30, r0
     3d4:	c6 81       	ldd	r28, Z+6	; 0x06
     3d6:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     3d8:	2a 81       	ldd	r18, Y+2	; 0x02
     3da:	3b 81       	ldd	r19, Y+3	; 0x03
     3dc:	80 91 44 02 	lds	r24, 0x0244
     3e0:	90 91 45 02 	lds	r25, 0x0245
     3e4:	82 17       	cp	r24, r18
     3e6:	93 07       	cpc	r25, r19
     3e8:	78 f4       	brcc	.+30     	; 0x408 <vCoRoutineSchedule+0x12e>
     3ea:	3b c0       	rjmp	.+118    	; 0x462 <vCoRoutineSchedule+0x188>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     3ec:	05 80       	ldd	r0, Z+5	; 0x05
     3ee:	f6 81       	ldd	r31, Z+6	; 0x06
     3f0:	e0 2d       	mov	r30, r0
     3f2:	c6 81       	ldd	r28, Z+6	; 0x06
     3f4:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     3f6:	2a 81       	ldd	r18, Y+2	; 0x02
     3f8:	3b 81       	ldd	r19, Y+3	; 0x03
     3fa:	80 91 44 02 	lds	r24, 0x0244
     3fe:	90 91 45 02 	lds	r25, 0x0245
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	68 f1       	brcs	.+90     	; 0x462 <vCoRoutineSchedule+0x188>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     408:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
     40a:	8e 01       	movw	r16, r28
     40c:	0e 5f       	subi	r16, 0xFE	; 254
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	c8 01       	movw	r24, r16
     412:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     416:	8c 89       	ldd	r24, Y+20	; 0x14
     418:	9d 89       	ldd	r25, Y+21	; 0x15
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	21 f0       	breq	.+8      	; 0x426 <vCoRoutineSchedule+0x14c>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
     41e:	ce 01       	movw	r24, r28
     420:	0c 96       	adiw	r24, 0x0c	; 12
     422:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     426:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     428:	8e 89       	ldd	r24, Y+22	; 0x16
     42a:	90 91 12 02 	lds	r25, 0x0212
     42e:	98 17       	cp	r25, r24
     430:	10 f4       	brcc	.+4      	; 0x436 <vCoRoutineSchedule+0x15c>
     432:	80 93 12 02 	sts	0x0212, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9c 01       	movw	r18, r24
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	22 0f       	add	r18, r18
     440:	33 1f       	adc	r19, r19
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	8d 5e       	subi	r24, 0xED	; 237
     44c:	9d 4f       	sbci	r25, 0xFD	; 253
     44e:	b8 01       	movw	r22, r16
     450:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     454:	e0 91 40 02 	lds	r30, 0x0240
     458:	f0 91 41 02 	lds	r31, 0x0241
     45c:	80 81       	ld	r24, Z
     45e:	88 23       	and	r24, r24
     460:	29 f6       	brne	.-118    	; 0x3ec <vCoRoutineSchedule+0x112>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     462:	80 91 48 02 	lds	r24, 0x0248
     466:	90 91 49 02 	lds	r25, 0x0249
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	09 f0       	breq	.+2      	; 0x470 <vCoRoutineSchedule+0x196>
     46e:	85 cf       	rjmp	.-246    	; 0x37a <vCoRoutineSchedule+0xa0>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     470:	80 91 44 02 	lds	r24, 0x0244
     474:	90 91 45 02 	lds	r25, 0x0245
     478:	90 93 47 02 	sts	0x0247, r25
     47c:	80 93 46 02 	sts	0x0246, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     480:	20 91 12 02 	lds	r18, 0x0212
     484:	82 2f       	mov	r24, r18
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	e8 0f       	add	r30, r24
     498:	f9 1f       	adc	r31, r25
     49a:	ed 5e       	subi	r30, 0xED	; 237
     49c:	fd 4f       	sbci	r31, 0xFD	; 253
     49e:	30 81       	ld	r19, Z
     4a0:	33 23       	and	r19, r19
     4a2:	d9 f4       	brne	.+54     	; 0x4da <vCoRoutineSchedule+0x200>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     4a4:	22 23       	and	r18, r18
     4a6:	31 f4       	brne	.+12     	; 0x4b4 <vCoRoutineSchedule+0x1da>
     4a8:	47 c0       	rjmp	.+142    	; 0x538 <vCoRoutineSchedule+0x25e>
     4aa:	22 23       	and	r18, r18
     4ac:	19 f4       	brne	.+6      	; 0x4b4 <vCoRoutineSchedule+0x1da>
     4ae:	20 93 12 02 	sts	0x0212, r18
     4b2:	42 c0       	rjmp	.+132    	; 0x538 <vCoRoutineSchedule+0x25e>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     4b4:	21 50       	subi	r18, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     4b6:	82 2f       	mov	r24, r18
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	ee 0f       	add	r30, r30
     4be:	ff 1f       	adc	r31, r31
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	ed 5e       	subi	r30, 0xED	; 237
     4ce:	fd 4f       	sbci	r31, 0xFD	; 253
     4d0:	30 81       	ld	r19, Z
     4d2:	33 23       	and	r19, r19
     4d4:	51 f3       	breq	.-44     	; 0x4aa <vCoRoutineSchedule+0x1d0>
     4d6:	20 93 12 02 	sts	0x0212, r18
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     4da:	fc 01       	movw	r30, r24
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	8e 0f       	add	r24, r30
     4ea:	9f 1f       	adc	r25, r31
     4ec:	fc 01       	movw	r30, r24
     4ee:	ed 5e       	subi	r30, 0xED	; 237
     4f0:	fd 4f       	sbci	r31, 0xFD	; 253
     4f2:	a1 81       	ldd	r26, Z+1	; 0x01
     4f4:	b2 81       	ldd	r27, Z+2	; 0x02
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	0d 90       	ld	r0, X+
     4fa:	bc 91       	ld	r27, X
     4fc:	a0 2d       	mov	r26, r0
     4fe:	b2 83       	std	Z+2, r27	; 0x02
     500:	a1 83       	std	Z+1, r26	; 0x01
     502:	cf 01       	movw	r24, r30
     504:	03 96       	adiw	r24, 0x03	; 3
     506:	a8 17       	cp	r26, r24
     508:	b9 07       	cpc	r27, r25
     50a:	31 f4       	brne	.+12     	; 0x518 <vCoRoutineSchedule+0x23e>
     50c:	12 96       	adiw	r26, 0x02	; 2
     50e:	8d 91       	ld	r24, X+
     510:	9c 91       	ld	r25, X
     512:	13 97       	sbiw	r26, 0x03	; 3
     514:	92 83       	std	Z+2, r25	; 0x02
     516:	81 83       	std	Z+1, r24	; 0x01
     518:	01 80       	ldd	r0, Z+1	; 0x01
     51a:	f2 81       	ldd	r31, Z+2	; 0x02
     51c:	e0 2d       	mov	r30, r0
     51e:	a6 81       	ldd	r26, Z+6	; 0x06
     520:	b7 81       	ldd	r27, Z+7	; 0x07
     522:	b0 93 11 02 	sts	0x0211, r27
     526:	a0 93 10 02 	sts	0x0210, r26

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	11 97       	sbiw	r26, 0x01	; 1
     530:	cd 01       	movw	r24, r26
     532:	57 96       	adiw	r26, 0x17	; 23
     534:	6c 91       	ld	r22, X
     536:	19 95       	eicall

	return;
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     552:	dc 01       	movw	r26, r24
     554:	15 96       	adiw	r26, 0x05	; 5
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	16 97       	sbiw	r26, 0x06	; 6
     55c:	06 81       	ldd	r16, Z+6	; 0x06
     55e:	17 81       	ldd	r17, Z+7	; 0x07
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     560:	e8 01       	movw	r28, r16
     562:	2c 96       	adiw	r28, 0x0c	; 12
     564:	ce 01       	movw	r24, r28
     566:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     56a:	87 e3       	ldi	r24, 0x37	; 55
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	be 01       	movw	r22, r28
     570:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     574:	e0 91 10 02 	lds	r30, 0x0210
     578:	f0 91 11 02 	lds	r31, 0x0211
	{
		xReturn = pdTRUE;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	d8 01       	movw	r26, r16
     580:	56 96       	adiw	r26, 0x16	; 22
     582:	2c 91       	ld	r18, X
     584:	56 97       	sbiw	r26, 0x16	; 22
     586:	96 89       	ldd	r25, Z+22	; 0x16
     588:	29 17       	cp	r18, r25
     58a:	08 f4       	brcc	.+2      	; 0x58e <xCoRoutineRemoveFromEventList+0x44>
     58c:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     5a2:	0e 94 25 0c 	call	0x184a	; 0x184a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     5a6:	00 91 4a 02 	lds	r16, 0x024A
     5aa:	10 91 4b 02 	lds	r17, 0x024B
     5ae:	c0 0f       	add	r28, r16
     5b0:	d1 1f       	adc	r29, r17
     5b2:	88 e1       	ldi	r24, 0x18	; 24
     5b4:	c0 30       	cpi	r28, 0x00	; 0
     5b6:	d8 07       	cpc	r29, r24
     5b8:	50 f4       	brcc	.+20     	; 0x5ce <pvPortMalloc+0x36>
     5ba:	0c 17       	cp	r16, r28
     5bc:	1d 07       	cpc	r17, r29
     5be:	50 f4       	brcc	.+20     	; 0x5d4 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     5c0:	04 5b       	subi	r16, 0xB4	; 180
     5c2:	1d 4f       	sbci	r17, 0xFD	; 253
			xNextFreeByte += xWantedSize;
     5c4:	d0 93 4b 02 	sts	0x024B, r29
     5c8:	c0 93 4a 02 	sts	0x024A, r28
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     5ce:	00 e0       	ldi	r16, 0x00	; 0
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <pvPortMalloc+0x40>
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	10 e0       	ldi	r17, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
     5d8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     5dc:	80 2f       	mov	r24, r16
     5de:	91 2f       	mov	r25, r17
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     5ea:	08 95       	ret

000005ec <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     5ec:	10 92 4b 02 	sts	0x024B, r1
     5f0:	10 92 4a 02 	sts	0x024A, r1
}
     5f4:	08 95       	ret

000005f6 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     5f6:	20 91 4a 02 	lds	r18, 0x024A
     5fa:	30 91 4b 02 	lds	r19, 0x024B
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	98 e1       	ldi	r25, 0x18	; 24
     602:	82 1b       	sub	r24, r18
     604:	93 0b       	sbc	r25, r19
}
     606:	08 95       	ret

00000608 <vTaskFunction_timerHandler>:
*--------------------------------------------------------*/



void vTaskFunction_timerHandler(void *pvNada)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	0f 92       	push	r0
     60e:	0f 92       	push	r0
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	static uint8_t task_cnt = 0, sseg_cnt_L = 0, sseg_cnt_R = 0;

	portTickType xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
     614:	0e 94 2b 0c 	call	0x1856	; 0x1856 <xTaskGetTickCount>
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
		//xSemaphoreTake( xBinarySemaphore_timer, portMAX_DELAY );
		
		SSEG_Write_left_digits(sseg_cnt_L);
		SSEG_Write_right_digits(sseg_cnt_R);
		
		task_cnt ^= 1;
     61c:	11 e0       	ldi	r17, 0x01	; 1
				sseg_cnt_L = 0;
			else
				sseg_cnt_L++;
		}		
		
		PORTA ^= (1 << LED2);//Toggle LED2
     61e:	04 e0       	ldi	r16, 0x04	; 4
	xLastExecutionTime = xTaskGetTickCount();
	for(;;)
	{	
		//xSemaphoreTake( xBinarySemaphore_timer, portMAX_DELAY );
		
		SSEG_Write_left_digits(sseg_cnt_L);
     620:	80 91 4c 1a 	lds	r24, 0x1A4C
     624:	0e 94 c7 09 	call	0x138e	; 0x138e <SSEG_Write_left_digits>
		SSEG_Write_right_digits(sseg_cnt_R);
     628:	80 91 4d 1a 	lds	r24, 0x1A4D
     62c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <SSEG_Write_right_digits>
		
		task_cnt ^= 1;
     630:	80 91 4e 1a 	lds	r24, 0x1A4E
     634:	81 27       	eor	r24, r17
     636:	80 93 4e 1a 	sts	0x1A4E, r24
		if(task_cnt)
     63a:	88 23       	and	r24, r24
     63c:	69 f0       	breq	.+26     	; 0x658 <vTaskFunction_timerHandler+0x50>
		{
			PORTA ^= (1 << LED0);//Toggle LED0
     63e:	82 b1       	in	r24, 0x02	; 2
     640:	81 27       	eor	r24, r17
     642:	82 b9       	out	0x02, r24	; 2
			if (sseg_cnt_L == MAX_COUNT)
     644:	80 91 4c 1a 	lds	r24, 0x1A4C
     648:	83 36       	cpi	r24, 0x63	; 99
     64a:	19 f4       	brne	.+6      	; 0x652 <vTaskFunction_timerHandler+0x4a>
				sseg_cnt_L = 0;
     64c:	10 92 4c 1a 	sts	0x1A4C, r1
     650:	03 c0       	rjmp	.+6      	; 0x658 <vTaskFunction_timerHandler+0x50>
			else
				sseg_cnt_L++;
     652:	8f 5f       	subi	r24, 0xFF	; 255
     654:	80 93 4c 1a 	sts	0x1A4C, r24
		}		
		
		PORTA ^= (1 << LED2);//Toggle LED2
     658:	82 b1       	in	r24, 0x02	; 2
     65a:	80 27       	eor	r24, r16
     65c:	82 b9       	out	0x02, r24	; 2
		if (sseg_cnt_R == MAX_COUNT)
     65e:	80 91 4d 1a 	lds	r24, 0x1A4D
     662:	83 36       	cpi	r24, 0x63	; 99
     664:	19 f4       	brne	.+6      	; 0x66c <vTaskFunction_timerHandler+0x64>
			sseg_cnt_R = 0;
     666:	10 92 4d 1a 	sts	0x1A4D, r1
     66a:	03 c0       	rjmp	.+6      	; 0x672 <vTaskFunction_timerHandler+0x6a>
		else
			sseg_cnt_R++;
     66c:	8f 5f       	subi	r24, 0xFF	; 255
     66e:	80 93 4d 1a 	sts	0x1A4D, r24
		
		//TCNT2 = 0;
		vTaskDelayUntil(&xLastExecutionTime, DELAY_MS_10HZ/portTICK_RATE_MS);
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	62 e3       	ldi	r22, 0x32	; 50
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <vTaskDelayUntil>
	}
     67e:	d0 cf       	rjmp	.-96     	; 0x620 <vTaskFunction_timerHandler+0x18>

00000680 <main>:
extern xSemaphoreHandle xMutex;
xSemaphoreHandle xBinarySemaphore_timer;

//-------------------Main Function-----------------------//
int main( void )
{  	
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
    // Function initializing PORTA as an output and setting LEDs low
	vIO_init(); 
     68e:	0e 94 96 00 	call	0x12c	; 0x12c <vIO_init>
	//initialize_timer2();
	SPI_MasterInit(); 
     692:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SPI_MasterInit>
	//}
	//
	//
	//while(1);

	vSemaphoreCreateBinary( xBinarySemaphore_timer );
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	43 e0       	ldi	r20, 0x03	; 3
     69c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <xQueueGenericCreate>
     6a0:	90 93 ac 1a 	sts	0x1AAC, r25
     6a4:	80 93 ab 1a 	sts	0x1AAB, r24
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	39 f0       	breq	.+14     	; 0x6ba <main+0x3a>
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xQueueGenericSend>
	
	// Creates a handler task for the interrupt generated by Timer2 CTC
	xTaskCreate(vTaskFunction_timerHandler, "TMR Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	45 e5       	ldi	r20, 0x55	; 85
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	01 e0       	ldi	r16, 0x01	; 1
     6cc:	ee 24       	eor	r14, r14
     6ce:	ff 24       	eor	r15, r15
     6d0:	cc 24       	eor	r12, r12
     6d2:	dd 24       	eor	r13, r13
     6d4:	aa 24       	eor	r10, r10
     6d6:	bb 24       	eor	r11, r11
     6d8:	0e 94 39 0a 	call	0x1472	; 0x1472 <xTaskGenericCreate>
	
    // Start the task scheduler
	vTaskStartScheduler();
     6dc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <vTaskStartScheduler>

	return 0;
}
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	08 95       	ret

000006f4 <__vector_13>:
*
* param a: TIMER2_COMPA_vect: vector generated when
*		   timer2 reaches the value held be OCR2A
*--------------------------------------------------------*/
ISR(TIMER2_COMPA_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	0b b6       	in	r0, 0x3b	; 59
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
     71a:	10 92 4f 1a 	sts	0x1A4F, r1
	/* 'Give' the semaphore to unblock the task. */
	xSemaphoreGiveFromISR( xBinarySemaphore_timer, &xHigherPriorityTaskWoken );
     71e:	80 91 ab 1a 	lds	r24, 0x1AAB
     722:	90 91 ac 1a 	lds	r25, 0x1AAC
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	4f e4       	ldi	r20, 0x4F	; 79
     72c:	5a e1       	ldi	r21, 0x1A	; 26
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	0e 94 19 08 	call	0x1032	; 0x1032 <xQueueGenericSendFromISR>
	if( xHigherPriorityTaskWoken == pdTRUE )
     734:	80 91 4f 1a 	lds	r24, 0x1A4F
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	11 f4       	brne	.+4      	; 0x740 <__vector_13+0x4c>
	{
		vPortYield();
     73c:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
	}
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <vApplicationTickHook>:


void vApplicationTickHook( void )
{
	static uint16_t count = 0;
	count++;
     766:	80 91 50 1a 	lds	r24, 0x1A50
     76a:	90 91 51 1a 	lds	r25, 0x1A51
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	90 93 51 1a 	sts	0x1A51, r25
     774:	80 93 50 1a 	sts	0x1A50, r24
	if(count == 500)
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	84 3f       	cpi	r24, 0xF4	; 244
     77c:	92 07       	cpc	r25, r18
     77e:	21 f4       	brne	.+8      	; 0x788 <vApplicationTickHook+0x22>
	{
		SSEG_Write_Decimal_Point(0x00);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <SSEG_Write_Decimal_Point>
     786:	08 95       	ret
	}
	else if(count == 1000)
     788:	23 e0       	ldi	r18, 0x03	; 3
     78a:	88 3e       	cpi	r24, 0xE8	; 232
     78c:	92 07       	cpc	r25, r18
     78e:	39 f4       	brne	.+14     	; 0x79e <vApplicationTickHook+0x38>
	{
		count = 0;
     790:	10 92 51 1a 	sts	0x1A51, r1
     794:	10 92 50 1a 	sts	0x1A50, r1
		SSEG_Write_Decimal_Point(SSEG_DP_4);
     798:	80 e1       	ldi	r24, 0x10	; 16
     79a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <SSEG_Write_Decimal_Point>
     79e:	08 95       	ret

000007a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     7a0:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     7a2:	03 96       	adiw	r24, 0x03	; 3
     7a4:	92 83       	std	Z+2, r25	; 0x02
     7a6:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     7a8:	2f ef       	ldi	r18, 0xFF	; 255
     7aa:	3f ef       	ldi	r19, 0xFF	; 255
     7ac:	34 83       	std	Z+4, r19	; 0x04
     7ae:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     7b0:	96 83       	std	Z+6, r25	; 0x06
     7b2:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     7b4:	90 87       	std	Z+8, r25	; 0x08
     7b6:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     7b8:	10 82       	st	Z, r1
}
     7ba:	08 95       	ret

000007bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     7bc:	fc 01       	movw	r30, r24
     7be:	11 86       	std	Z+9, r1	; 0x09
     7c0:	10 86       	std	Z+8, r1	; 0x08
}
     7c2:	08 95       	ret

000007c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	fb 01       	movw	r30, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     7cc:	89 81       	ldd	r24, Y+1	; 0x01
     7ce:	9a 81       	ldd	r25, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     7d0:	dc 01       	movw	r26, r24
     7d2:	12 96       	adiw	r26, 0x02	; 2
     7d4:	2d 91       	ld	r18, X+
     7d6:	3c 91       	ld	r19, X
     7d8:	13 97       	sbiw	r26, 0x03	; 3
     7da:	33 83       	std	Z+3, r19	; 0x03
     7dc:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     7de:	29 81       	ldd	r18, Y+1	; 0x01
     7e0:	3a 81       	ldd	r19, Y+2	; 0x02
     7e2:	35 83       	std	Z+5, r19	; 0x05
     7e4:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	2d 91       	ld	r18, X+
     7ea:	3c 91       	ld	r19, X
     7ec:	13 97       	sbiw	r26, 0x03	; 3
     7ee:	d9 01       	movw	r26, r18
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	7c 93       	st	X, r23
     7f4:	6e 93       	st	-X, r22
     7f6:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     7f8:	dc 01       	movw	r26, r24
     7fa:	13 96       	adiw	r26, 0x03	; 3
     7fc:	7c 93       	st	X, r23
     7fe:	6e 93       	st	-X, r22
     800:	12 97       	sbiw	r26, 0x02	; 2
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     802:	7a 83       	std	Y+2, r23	; 0x02
     804:	69 83       	std	Y+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     806:	d1 87       	std	Z+9, r29	; 0x09
     808:	c0 87       	std	Z+8, r28	; 0x08

	( pxList->uxNumberOfItems )++;
     80a:	88 81       	ld	r24, Y
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	88 83       	st	Y, r24
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ac 01       	movw	r20, r24
     81c:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     81e:	28 81       	ld	r18, Y
     820:	39 81       	ldd	r19, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	2f 3f       	cpi	r18, 0xFF	; 255
     826:	38 07       	cpc	r19, r24
     828:	21 f4       	brne	.+8      	; 0x832 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     82a:	fa 01       	movw	r30, r20
     82c:	a7 81       	ldd	r26, Z+7	; 0x07
     82e:	b0 85       	ldd	r27, Z+8	; 0x08
     830:	18 c0       	rjmp	.+48     	; 0x862 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     832:	da 01       	movw	r26, r20
     834:	13 96       	adiw	r26, 0x03	; 3
     836:	fa 01       	movw	r30, r20
     838:	85 81       	ldd	r24, Z+5	; 0x05
     83a:	96 81       	ldd	r25, Z+6	; 0x06
     83c:	fc 01       	movw	r30, r24
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	28 17       	cp	r18, r24
     844:	39 07       	cpc	r19, r25
     846:	68 f0       	brcs	.+26     	; 0x862 <vListInsert+0x4c>
     848:	12 96       	adiw	r26, 0x02	; 2
     84a:	0d 90       	ld	r0, X+
     84c:	bc 91       	ld	r27, X
     84e:	a0 2d       	mov	r26, r0
     850:	12 96       	adiw	r26, 0x02	; 2
     852:	ed 91       	ld	r30, X+
     854:	fc 91       	ld	r31, X
     856:	13 97       	sbiw	r26, 0x03	; 3
     858:	80 81       	ld	r24, Z
     85a:	91 81       	ldd	r25, Z+1	; 0x01
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	98 f7       	brcc	.-26     	; 0x848 <vListInsert+0x32>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     862:	12 96       	adiw	r26, 0x02	; 2
     864:	ed 91       	ld	r30, X+
     866:	fc 91       	ld	r31, X
     868:	13 97       	sbiw	r26, 0x03	; 3
     86a:	fb 83       	std	Y+3, r31	; 0x03
     86c:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     86e:	d5 83       	std	Z+5, r29	; 0x05
     870:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     872:	bd 83       	std	Y+5, r27	; 0x05
     874:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     876:	13 96       	adiw	r26, 0x03	; 3
     878:	dc 93       	st	X, r29
     87a:	ce 93       	st	-X, r28
     87c:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     87e:	59 87       	std	Y+9, r21	; 0x09
     880:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     882:	fa 01       	movw	r30, r20
     884:	80 81       	ld	r24, Z
     886:	8f 5f       	subi	r24, 0xFF	; 255
     888:	80 83       	st	Z, r24
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
     890:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     892:	a2 81       	ldd	r26, Z+2	; 0x02
     894:	b3 81       	ldd	r27, Z+3	; 0x03
     896:	84 81       	ldd	r24, Z+4	; 0x04
     898:	95 81       	ldd	r25, Z+5	; 0x05
     89a:	15 96       	adiw	r26, 0x05	; 5
     89c:	9c 93       	st	X, r25
     89e:	8e 93       	st	-X, r24
     8a0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8a2:	a4 81       	ldd	r26, Z+4	; 0x04
     8a4:	b5 81       	ldd	r27, Z+5	; 0x05
     8a6:	82 81       	ldd	r24, Z+2	; 0x02
     8a8:	93 81       	ldd	r25, Z+3	; 0x03
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	9c 93       	st	X, r25
     8ae:	8e 93       	st	-X, r24
     8b0:	12 97       	sbiw	r26, 0x02	; 2

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     8b2:	a0 85       	ldd	r26, Z+8	; 0x08
     8b4:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	8d 91       	ld	r24, X+
     8ba:	9c 91       	ld	r25, X
     8bc:	12 97       	sbiw	r26, 0x02	; 2
     8be:	8e 17       	cp	r24, r30
     8c0:	9f 07       	cpc	r25, r31
     8c2:	31 f4       	brne	.+12     	; 0x8d0 <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     8c4:	84 81       	ldd	r24, Z+4	; 0x04
     8c6:	95 81       	ldd	r25, Z+5	; 0x05
     8c8:	12 96       	adiw	r26, 0x02	; 2
     8ca:	9c 93       	st	X, r25
     8cc:	8e 93       	st	-X, r24
     8ce:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     8d0:	11 86       	std	Z+9, r1	; 0x09
     8d2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     8d4:	8c 91       	ld	r24, X
     8d6:	81 50       	subi	r24, 0x01	; 1
     8d8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     8da:	8c 91       	ld	r24, X
}
     8dc:	08 95       	ret

000008de <pxPortInitialiseStack>:
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     8de:	21 e1       	ldi	r18, 0x11	; 17
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	32 e2       	ldi	r19, 0x22	; 34
     8e8:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     8ea:	fc 01       	movw	r30, r24
     8ec:	32 97       	sbiw	r30, 0x02	; 2
     8ee:	a3 e3       	ldi	r26, 0x33	; 51
     8f0:	a0 83       	st	Z, r26
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
     8f2:	fc 01       	movw	r30, r24
     8f4:	33 97       	sbiw	r30, 0x03	; 3
     8f6:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
     8f8:	fc 01       	movw	r30, r24
     8fa:	34 97       	sbiw	r30, 0x04	; 4
     8fc:	70 83       	st	Z, r23
	pxTopOfStack--;

	*pxTopOfStack = 0;
     8fe:	fc 01       	movw	r30, r24
     900:	35 97       	sbiw	r30, 0x05	; 5
     902:	10 82       	st	Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     904:	fc 01       	movw	r30, r24
     906:	36 97       	sbiw	r30, 0x06	; 6
     908:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     90a:	fc 01       	movw	r30, r24
     90c:	37 97       	sbiw	r30, 0x07	; 7
     90e:	60 e8       	ldi	r22, 0x80	; 128
     910:	60 83       	st	Z, r22
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
     912:	fc 01       	movw	r30, r24
     914:	38 97       	sbiw	r30, 0x08	; 8
     916:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
     918:	fc 01       	movw	r30, r24
     91a:	39 97       	sbiw	r30, 0x09	; 9
     91c:	10 82       	st	Z, r1
	pxTopOfStack--;

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     91e:	fc 01       	movw	r30, r24
     920:	3a 97       	sbiw	r30, 0x0a	; 10
     922:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     924:	fc 01       	movw	r30, r24
     926:	3b 97       	sbiw	r30, 0x0b	; 11
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     92c:	fc 01       	movw	r30, r24
     92e:	3c 97       	sbiw	r30, 0x0c	; 12
     930:	63 e0       	ldi	r22, 0x03	; 3
     932:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     934:	fc 01       	movw	r30, r24
     936:	3d 97       	sbiw	r30, 0x0d	; 13
     938:	64 e0       	ldi	r22, 0x04	; 4
     93a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     93c:	fc 01       	movw	r30, r24
     93e:	3e 97       	sbiw	r30, 0x0e	; 14
     940:	65 e0       	ldi	r22, 0x05	; 5
     942:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     944:	fc 01       	movw	r30, r24
     946:	3f 97       	sbiw	r30, 0x0f	; 15
     948:	66 e0       	ldi	r22, 0x06	; 6
     94a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     94c:	fc 01       	movw	r30, r24
     94e:	70 97       	sbiw	r30, 0x10	; 16
     950:	67 e0       	ldi	r22, 0x07	; 7
     952:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     954:	fc 01       	movw	r30, r24
     956:	71 97       	sbiw	r30, 0x11	; 17
     958:	68 e0       	ldi	r22, 0x08	; 8
     95a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     95c:	fc 01       	movw	r30, r24
     95e:	72 97       	sbiw	r30, 0x12	; 18
     960:	69 e0       	ldi	r22, 0x09	; 9
     962:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     964:	fc 01       	movw	r30, r24
     966:	73 97       	sbiw	r30, 0x13	; 19
     968:	60 e1       	ldi	r22, 0x10	; 16
     96a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     96c:	fc 01       	movw	r30, r24
     96e:	74 97       	sbiw	r30, 0x14	; 20
     970:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     972:	fc 01       	movw	r30, r24
     974:	75 97       	sbiw	r30, 0x15	; 21
     976:	22 e1       	ldi	r18, 0x12	; 18
     978:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     97a:	fc 01       	movw	r30, r24
     97c:	76 97       	sbiw	r30, 0x16	; 22
     97e:	23 e1       	ldi	r18, 0x13	; 19
     980:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     982:	fc 01       	movw	r30, r24
     984:	77 97       	sbiw	r30, 0x17	; 23
     986:	24 e1       	ldi	r18, 0x14	; 20
     988:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     98a:	fc 01       	movw	r30, r24
     98c:	78 97       	sbiw	r30, 0x18	; 24
     98e:	25 e1       	ldi	r18, 0x15	; 21
     990:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     992:	fc 01       	movw	r30, r24
     994:	79 97       	sbiw	r30, 0x19	; 25
     996:	26 e1       	ldi	r18, 0x16	; 22
     998:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     99a:	fc 01       	movw	r30, r24
     99c:	7a 97       	sbiw	r30, 0x1a	; 26
     99e:	27 e1       	ldi	r18, 0x17	; 23
     9a0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     9a2:	fc 01       	movw	r30, r24
     9a4:	7b 97       	sbiw	r30, 0x1b	; 27
     9a6:	28 e1       	ldi	r18, 0x18	; 24
     9a8:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     9aa:	fc 01       	movw	r30, r24
     9ac:	7c 97       	sbiw	r30, 0x1c	; 28
     9ae:	29 e1       	ldi	r18, 0x19	; 25
     9b0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     9b2:	fc 01       	movw	r30, r24
     9b4:	7d 97       	sbiw	r30, 0x1d	; 29
     9b6:	20 e2       	ldi	r18, 0x20	; 32
     9b8:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     9ba:	fc 01       	movw	r30, r24
     9bc:	7e 97       	sbiw	r30, 0x1e	; 30
     9be:	21 e2       	ldi	r18, 0x21	; 33
     9c0:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     9c2:	fc 01       	movw	r30, r24
     9c4:	7f 97       	sbiw	r30, 0x1f	; 31
     9c6:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     9c8:	fc 01       	movw	r30, r24
     9ca:	b0 97       	sbiw	r30, 0x20	; 32
     9cc:	23 e2       	ldi	r18, 0x23	; 35
     9ce:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     9d0:	fc 01       	movw	r30, r24
     9d2:	b1 97       	sbiw	r30, 0x21	; 33
     9d4:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     9d6:	fc 01       	movw	r30, r24
     9d8:	b2 97       	sbiw	r30, 0x22	; 34
     9da:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     9dc:	fc 01       	movw	r30, r24
     9de:	b3 97       	sbiw	r30, 0x23	; 35
     9e0:	26 e2       	ldi	r18, 0x26	; 38
     9e2:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     9e4:	fc 01       	movw	r30, r24
     9e6:	b4 97       	sbiw	r30, 0x24	; 36
     9e8:	27 e2       	ldi	r18, 0x27	; 39
     9ea:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     9ec:	fc 01       	movw	r30, r24
     9ee:	b5 97       	sbiw	r30, 0x25	; 37
     9f0:	28 e2       	ldi	r18, 0x28	; 40
     9f2:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     9f4:	fc 01       	movw	r30, r24
     9f6:	b6 97       	sbiw	r30, 0x26	; 38
     9f8:	29 e2       	ldi	r18, 0x29	; 41
     9fa:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     9fc:	fc 01       	movw	r30, r24
     9fe:	b7 97       	sbiw	r30, 0x27	; 39
     a00:	20 e3       	ldi	r18, 0x30	; 48
     a02:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     a04:	fc 01       	movw	r30, r24
     a06:	b8 97       	sbiw	r30, 0x28	; 40
     a08:	21 e3       	ldi	r18, 0x31	; 49
     a0a:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     a0c:	89 97       	sbiw	r24, 0x29	; 41
}
     a0e:	08 95       	ret

00000a10 <xPortStartScheduler>:
    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    portOCRH = ucHighByte;
     a10:	10 92 99 00 	sts	0x0099, r1

#endif

    portOCRL = ucLowByte;
     a14:	89 ef       	ldi	r24, 0xF9	; 249
     a16:	80 93 98 00 	sts	0x0098, r24
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;
     a1a:	8b e0       	ldi	r24, 0x0B	; 11
     a1c:	80 93 91 00 	sts	0x0091, r24
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
     a20:	e1 e7       	ldi	r30, 0x71	; 113
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     a26:	82 60       	ori	r24, 0x02	; 2
    portTIMSK = ucLowByte;
     a28:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     a2a:	a0 91 52 1a 	lds	r26, 0x1A52
     a2e:	b0 91 53 1a 	lds	r27, 0x1A53
     a32:	cd 91       	ld	r28, X+
     a34:	cd bf       	out	0x3d, r28	; 61
     a36:	dd 91       	ld	r29, X+
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	bf 90       	pop	r11
     a64:	af 90       	pop	r10
     a66:	9f 90       	pop	r9
     a68:	8f 90       	pop	r8
     a6a:	7f 90       	pop	r7
     a6c:	6f 90       	pop	r6
     a6e:	5f 90       	pop	r5
     a70:	4f 90       	pop	r4
     a72:	3f 90       	pop	r3
     a74:	2f 90       	pop	r2
     a76:	1f 90       	pop	r1
     a78:	0f 90       	pop	r0
     a7a:	0c be       	out	0x3c, r0	; 60
     a7c:	0f 90       	pop	r0
     a7e:	0b be       	out	0x3b, r0	; 59
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     a86:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret

00000a8c <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     a8c:	08 95       	ret

00000a8e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	0f 92       	push	r0
     a96:	0b b6       	in	r0, 0x3b	; 59
     a98:	0f 92       	push	r0
     a9a:	0c b6       	in	r0, 0x3c	; 60
     a9c:	0f 92       	push	r0
     a9e:	1f 92       	push	r1
     aa0:	11 24       	eor	r1, r1
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	2f 93       	push	r18
     ac4:	3f 93       	push	r19
     ac6:	4f 93       	push	r20
     ac8:	5f 93       	push	r21
     aca:	6f 93       	push	r22
     acc:	7f 93       	push	r23
     ace:	8f 93       	push	r24
     ad0:	9f 93       	push	r25
     ad2:	af 93       	push	r26
     ad4:	bf 93       	push	r27
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31
     ade:	a0 91 52 1a 	lds	r26, 0x1A52
     ae2:	b0 91 53 1a 	lds	r27, 0x1A53
     ae6:	0d b6       	in	r0, 0x3d	; 61
     ae8:	0d 92       	st	X+, r0
     aea:	0e b6       	in	r0, 0x3e	; 62
     aec:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     aee:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     af2:	a0 91 52 1a 	lds	r26, 0x1A52
     af6:	b0 91 53 1a 	lds	r27, 0x1A53
     afa:	cd 91       	ld	r28, X+
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	dd 91       	ld	r29, X+
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	ff 90       	pop	r15
     b24:	ef 90       	pop	r14
     b26:	df 90       	pop	r13
     b28:	cf 90       	pop	r12
     b2a:	bf 90       	pop	r11
     b2c:	af 90       	pop	r10
     b2e:	9f 90       	pop	r9
     b30:	8f 90       	pop	r8
     b32:	7f 90       	pop	r7
     b34:	6f 90       	pop	r6
     b36:	5f 90       	pop	r5
     b38:	4f 90       	pop	r4
     b3a:	3f 90       	pop	r3
     b3c:	2f 90       	pop	r2
     b3e:	1f 90       	pop	r1
     b40:	0f 90       	pop	r0
     b42:	0c be       	out	0x3c, r0	; 60
     b44:	0f 90       	pop	r0
     b46:	0b be       	out	0x3b, r0	; 59
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b4e:	08 95       	ret

00000b50 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	0f 92       	push	r0
     b58:	0b b6       	in	r0, 0x3b	; 59
     b5a:	0f 92       	push	r0
     b5c:	0c b6       	in	r0, 0x3c	; 60
     b5e:	0f 92       	push	r0
     b60:	1f 92       	push	r1
     b62:	11 24       	eor	r1, r1
     b64:	2f 92       	push	r2
     b66:	3f 92       	push	r3
     b68:	4f 92       	push	r4
     b6a:	5f 92       	push	r5
     b6c:	6f 92       	push	r6
     b6e:	7f 92       	push	r7
     b70:	8f 92       	push	r8
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
     ba0:	a0 91 52 1a 	lds	r26, 0x1A52
     ba4:	b0 91 53 1a 	lds	r27, 0x1A53
     ba8:	0d b6       	in	r0, 0x3d	; 61
     baa:	0d 92       	st	X+, r0
     bac:	0e b6       	in	r0, 0x3e	; 62
     bae:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     bb0:	0e 94 3d 0c 	call	0x187a	; 0x187a <vTaskIncrementTick>
	vTaskSwitchContext();
     bb4:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bb8:	a0 91 52 1a 	lds	r26, 0x1A52
     bbc:	b0 91 53 1a 	lds	r27, 0x1A53
     bc0:	cd 91       	ld	r28, X+
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	dd 91       	ld	r29, X+
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	2f 90       	pop	r2
     c04:	1f 90       	pop	r1
     c06:	0f 90       	pop	r0
     c08:	0c be       	out	0x3c, r0	; 60
     c0a:	0f 90       	pop	r0
     c0c:	0b be       	out	0x3b, r0	; 59
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c14:	08 95       	ret

00000c16 <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
     c16:	0e 94 a8 05 	call	0xb50	; 0xb50 <vPortYieldFromTick>
			asm volatile ( "reti" );
     c1a:	18 95       	reti

00000c1c <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	dc 01       	movw	r26, r24
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     c22:	cd 91       	ld	r28, X+
     c24:	dc 91       	ld	r29, X
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	20 97       	sbiw	r28, 0x00	; 0
     c2a:	21 f1       	breq	.+72     	; 0xc74 <prvCopyDataFromQueue+0x58>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     c2c:	5c 96       	adiw	r26, 0x1c	; 28
     c2e:	4c 91       	ld	r20, X
     c30:	5c 97       	sbiw	r26, 0x1c	; 28
     c32:	16 96       	adiw	r26, 0x06	; 6
     c34:	2d 91       	ld	r18, X+
     c36:	3c 91       	ld	r19, X
     c38:	17 97       	sbiw	r26, 0x07	; 7
     c3a:	24 0f       	add	r18, r20
     c3c:	31 1d       	adc	r19, r1
     c3e:	17 96       	adiw	r26, 0x07	; 7
     c40:	3c 93       	st	X, r19
     c42:	2e 93       	st	-X, r18
     c44:	16 97       	sbiw	r26, 0x06	; 6
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     c46:	12 96       	adiw	r26, 0x02	; 2
     c48:	ed 91       	ld	r30, X+
     c4a:	fc 91       	ld	r31, X
     c4c:	13 97       	sbiw	r26, 0x03	; 3
     c4e:	2e 17       	cp	r18, r30
     c50:	3f 07       	cpc	r19, r31
     c52:	20 f0       	brcs	.+8      	; 0xc5c <prvCopyDataFromQueue+0x40>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     c54:	17 96       	adiw	r26, 0x07	; 7
     c56:	dc 93       	st	X, r29
     c58:	ce 93       	st	-X, r28
     c5a:	16 97       	sbiw	r26, 0x06	; 6
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
     c5c:	16 96       	adiw	r26, 0x06	; 6
     c5e:	3c 91       	ld	r19, X
     c60:	16 97       	sbiw	r26, 0x06	; 6
     c62:	17 96       	adiw	r26, 0x07	; 7
     c64:	2c 91       	ld	r18, X
     c66:	86 2f       	mov	r24, r22
     c68:	97 2f       	mov	r25, r23
     c6a:	63 2f       	mov	r22, r19
     c6c:	72 2f       	mov	r23, r18
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	0e 94 2c 10 	call	0x2058	; 0x2058 <memcpy>
	}
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	08 95       	ret

00000c7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     c8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c8c:	18 16       	cp	r1, r24
     c8e:	c4 f4       	brge	.+48     	; 0xcc0 <prvUnlockQueue+0x46>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     c90:	89 89       	ldd	r24, Y+17	; 0x11
     c92:	88 23       	and	r24, r24
     c94:	29 f4       	brne	.+10     	; 0xca0 <prvUnlockQueue+0x26>
     c96:	14 c0       	rjmp	.+40     	; 0xcc0 <prvUnlockQueue+0x46>
     c98:	89 89       	ldd	r24, Y+17	; 0x11
     c9a:	88 23       	and	r24, r24
     c9c:	21 f4       	brne	.+8      	; 0xca6 <prvUnlockQueue+0x2c>
     c9e:	10 c0       	rjmp	.+32     	; 0xcc0 <prvUnlockQueue+0x46>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     ca0:	8e 01       	movw	r16, r28
     ca2:	0f 5e       	subi	r16, 0xEF	; 239
     ca4:	1f 4f       	sbci	r17, 0xFF	; 255
     ca6:	c8 01       	movw	r24, r16
     ca8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
     cac:	88 23       	and	r24, r24
     cae:	11 f0       	breq	.+4      	; 0xcb4 <prvUnlockQueue+0x3a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
     cb0:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
     cb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     cba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cbc:	18 16       	cp	r1, r24
     cbe:	64 f3       	brlt	.-40     	; 0xc98 <prvUnlockQueue+0x1e>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd0:	18 16       	cp	r1, r24
     cd2:	c4 f4       	brge	.+48     	; 0xd04 <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     cd4:	88 85       	ldd	r24, Y+8	; 0x08
     cd6:	88 23       	and	r24, r24
     cd8:	29 f4       	brne	.+10     	; 0xce4 <prvUnlockQueue+0x6a>
     cda:	14 c0       	rjmp	.+40     	; 0xd04 <prvUnlockQueue+0x8a>
     cdc:	88 85       	ldd	r24, Y+8	; 0x08
     cde:	88 23       	and	r24, r24
     ce0:	21 f4       	brne	.+8      	; 0xcea <prvUnlockQueue+0x70>
     ce2:	10 c0       	rjmp	.+32     	; 0xd04 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     ce4:	8e 01       	movw	r16, r28
     ce6:	08 5f       	subi	r16, 0xF8	; 248
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
     cea:	c8 01       	movw	r24, r16
     cec:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
     cf0:	88 23       	and	r24, r24
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <prvUnlockQueue+0x7e>
				{
					vTaskMissedYield();
     cf4:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
     cf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cfa:	81 50       	subi	r24, 0x01	; 1
     cfc:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     cfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d00:	18 16       	cp	r1, r24
     d02:	64 f3       	brlt	.-40     	; 0xcdc <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	08 95       	ret

00000d16 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ec 01       	movw	r28, r24
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     d1c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d1e:	22 23       	and	r18, r18
     d20:	59 f4       	brne	.+22     	; 0xd38 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     d22:	88 81       	ld	r24, Y
     d24:	99 81       	ldd	r25, Y+1	; 0x01
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	e1 f5       	brne	.+120    	; 0xda2 <prvCopyDataToQueue+0x8c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     d32:	1b 82       	std	Y+3, r1	; 0x03
     d34:	1a 82       	std	Y+2, r1	; 0x02
     d36:	35 c0       	rjmp	.+106    	; 0xda2 <prvCopyDataToQueue+0x8c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     d38:	44 23       	and	r20, r20
     d3a:	b9 f4       	brne	.+46     	; 0xd6a <prvCopyDataToQueue+0x54>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	42 2f       	mov	r20, r18
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 2c 10 	call	0x2058	; 0x2058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     d48:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	82 0f       	add	r24, r18
     d50:	91 1d       	adc	r25, r1
     d52:	9d 83       	std	Y+5, r25	; 0x05
     d54:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     d56:	2a 81       	ldd	r18, Y+2	; 0x02
     d58:	3b 81       	ldd	r19, Y+3	; 0x03
     d5a:	82 17       	cp	r24, r18
     d5c:	93 07       	cpc	r25, r19
     d5e:	08 f1       	brcs	.+66     	; 0xda2 <prvCopyDataToQueue+0x8c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     d60:	88 81       	ld	r24, Y
     d62:	99 81       	ldd	r25, Y+1	; 0x01
     d64:	9d 83       	std	Y+5, r25	; 0x05
     d66:	8c 83       	std	Y+4, r24	; 0x04
     d68:	1c c0       	rjmp	.+56     	; 0xda2 <prvCopyDataToQueue+0x8c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d6a:	8e 81       	ldd	r24, Y+6	; 0x06
     d6c:	9f 81       	ldd	r25, Y+7	; 0x07
     d6e:	42 2f       	mov	r20, r18
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 2c 10 	call	0x2058	; 0x2058 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     d76:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	50 95       	com	r21
     d7c:	41 95       	neg	r20
     d7e:	5f 4f       	sbci	r21, 0xFF	; 255
     d80:	8e 81       	ldd	r24, Y+6	; 0x06
     d82:	9f 81       	ldd	r25, Y+7	; 0x07
     d84:	84 0f       	add	r24, r20
     d86:	95 1f       	adc	r25, r21
     d88:	9f 83       	std	Y+7, r25	; 0x07
     d8a:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     d8c:	28 81       	ld	r18, Y
     d8e:	39 81       	ldd	r19, Y+1	; 0x01
     d90:	82 17       	cp	r24, r18
     d92:	93 07       	cpc	r25, r19
     d94:	30 f4       	brcc	.+12     	; 0xda2 <prvCopyDataToQueue+0x8c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	48 0f       	add	r20, r24
     d9c:	59 1f       	adc	r21, r25
     d9e:	5f 83       	std	Y+7, r21	; 0x07
     da0:	4e 83       	std	Y+6, r20	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
     da2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	8a 8f       	std	Y+26, r24	; 0x1a
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     dba:	48 81       	ld	r20, Y
     dbc:	59 81       	ldd	r21, Y+1	; 0x01
     dbe:	2b 8d       	ldd	r18, Y+27	; 0x1b
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	ec 8d       	ldd	r30, Y+28	; 0x1c
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	2e 9f       	mul	r18, r30
     dc8:	c0 01       	movw	r24, r0
     dca:	2f 9f       	mul	r18, r31
     dcc:	90 0d       	add	r25, r0
     dce:	3e 9f       	mul	r19, r30
     dd0:	90 0d       	add	r25, r0
     dd2:	11 24       	eor	r1, r1
     dd4:	84 0f       	add	r24, r20
     dd6:	95 1f       	adc	r25, r21
     dd8:	9b 83       	std	Y+3, r25	; 0x03
     dda:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     ddc:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     dde:	5d 83       	std	Y+5, r21	; 0x05
     de0:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     de2:	c9 01       	movw	r24, r18
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	e8 9f       	mul	r30, r24
     de8:	90 01       	movw	r18, r0
     dea:	e9 9f       	mul	r30, r25
     dec:	30 0d       	add	r19, r0
     dee:	f8 9f       	mul	r31, r24
     df0:	30 0d       	add	r19, r0
     df2:	11 24       	eor	r1, r1
     df4:	24 0f       	add	r18, r20
     df6:	35 1f       	adc	r19, r21
     df8:	3f 83       	std	Y+7, r19	; 0x07
     dfa:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
     e00:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     e02:	66 23       	and	r22, r22
     e04:	61 f4       	brne	.+24     	; 0xe1e <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e06:	88 85       	ldd	r24, Y+8	; 0x08
     e08:	88 23       	and	r24, r24
     e0a:	89 f0       	breq	.+34     	; 0xe2e <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     e0c:	ce 01       	movw	r24, r28
     e0e:	08 96       	adiw	r24, 0x08	; 8
     e10:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	59 f4       	brne	.+22     	; 0xe2e <xQueueGenericReset+0x80>
				{
					portYIELD_WITHIN_API();
     e18:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     e1e:	ce 01       	movw	r24, r28
     e20:	08 96       	adiw	r24, 0x08	; 8
     e22:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     e26:	ce 01       	movw	r24, r28
     e28:	41 96       	adiw	r24, 0x11	; 17
     e2a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	18 2f       	mov	r17, r24
     e44:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     e46:	88 23       	and	r24, r24
     e48:	f9 f0       	breq	.+62     	; 0xe88 <xQueueGenericCreate+0x4e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     e4a:	8f e1       	ldi	r24, 0x1F	; 31
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     e52:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	d9 f0       	breq	.+54     	; 0xe8e <xQueueGenericCreate+0x54>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     e58:	01 9f       	mul	r16, r17
     e5a:	c0 01       	movw	r24, r0
     e5c:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
     e68:	00 97       	sbiw	r24, 0x00	; 0
     e6a:	41 f0       	breq	.+16     	; 0xe7c <xQueueGenericCreate+0x42>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     e6c:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
     e6e:	0c 8f       	std	Y+28, r16	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
     e70:	ce 01       	movw	r24, r28
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	0e 94 d7 06 	call	0xdae	; 0xdae <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
     e78:	ce 01       	movw	r24, r28
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <xQueueGenericCreate+0x58>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <xQueueGenericCreate+0x58>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <xQueueGenericCreate+0x58>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <xQueueGenericSend+0x18>
     eb4:	0f 92       	push	r0
     eb6:	0f 92       	push	r0
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	8c 01       	movw	r16, r24
     ebe:	4b 01       	movw	r8, r22
     ec0:	5d 83       	std	Y+5, r21	; 0x05
     ec2:	4c 83       	std	Y+4, r20	; 0x04
     ec4:	b2 2e       	mov	r11, r18
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
     ec6:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
     ec8:	ee 24       	eor	r14, r14
     eca:	e3 94       	inc	r14
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     ecc:	cc 24       	eor	r12, r12
     ece:	dd 24       	eor	r13, r13
     ed0:	68 94       	set
     ed2:	c3 f8       	bld	r12, 3
     ed4:	c8 0e       	add	r12, r24
     ed6:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     ede:	f8 01       	movw	r30, r16
     ee0:	92 8d       	ldd	r25, Z+26	; 0x1a
     ee2:	83 8d       	ldd	r24, Z+27	; 0x1b
     ee4:	98 17       	cp	r25, r24
     ee6:	a8 f4       	brcc	.+42     	; 0xf12 <xQueueGenericSend+0x76>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     ee8:	c8 01       	movw	r24, r16
     eea:	b4 01       	movw	r22, r8
     eec:	4b 2d       	mov	r20, r11
     eee:	0e 94 8b 06 	call	0xd16	; 0xd16 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     ef2:	f8 01       	movw	r30, r16
     ef4:	81 89       	ldd	r24, Z+17	; 0x11
     ef6:	88 23       	and	r24, r24
     ef8:	41 f0       	breq	.+16     	; 0xf0a <xQueueGenericSend+0x6e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     efa:	c8 01       	movw	r24, r16
     efc:	41 96       	adiw	r24, 0x11	; 17
     efe:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	11 f4       	brne	.+4      	; 0xf0a <xQueueGenericSend+0x6e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
     f06:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	52 c0       	rjmp	.+164    	; 0xfb6 <xQueueGenericSend+0x11a>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	21 f4       	brne	.+8      	; 0xf22 <xQueueGenericSend+0x86>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	4a c0       	rjmp	.+148    	; 0xfb6 <xQueueGenericSend+0x11a>
				}
				else if( xEntryTimeSet == pdFALSE )
     f22:	ff 20       	and	r15, r15
     f24:	29 f4       	brne	.+10     	; 0xf30 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     f2e:	fe 2c       	mov	r15, r14
				}
			}
		}
		taskEXIT_CRITICAL();
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     f34:	0e 94 25 0c 	call	0x184a	; 0x184a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	f8 01       	movw	r30, r16
     f40:	85 8d       	ldd	r24, Z+29	; 0x1d
     f42:	8f 3f       	cpi	r24, 0xFF	; 255
     f44:	09 f4       	brne	.+2      	; 0xf48 <xQueueGenericSend+0xac>
     f46:	15 8e       	std	Z+29, r1	; 0x1d
     f48:	f8 01       	movw	r30, r16
     f4a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	09 f4       	brne	.+2      	; 0xf52 <xQueueGenericSend+0xb6>
     f50:	16 8e       	std	Z+30, r1	; 0x1e
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	be 01       	movw	r22, r28
     f5c:	6c 5f       	subi	r22, 0xFC	; 252
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskCheckForTimeOut>
     f64:	88 23       	and	r24, r24
     f66:	09 f5       	brne	.+66     	; 0xfaa <xQueueGenericSend+0x10e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
     f6e:	f8 01       	movw	r30, r16
     f70:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     f76:	f8 01       	movw	r30, r16
     f78:	83 8d       	ldd	r24, Z+27	; 0x1b
     f7a:	98 17       	cp	r25, r24
     f7c:	81 f4       	brne	.+32     	; 0xf9e <xQueueGenericSend+0x102>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     f7e:	6c 81       	ldd	r22, Y+4	; 0x04
     f80:	7d 81       	ldd	r23, Y+5	; 0x05
     f82:	c6 01       	movw	r24, r12
     f84:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     f88:	c8 01       	movw	r24, r16
     f8a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     f8e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <xQueueGenericSend+0xfc>
     f96:	a0 cf       	rjmp	.-192    	; 0xed8 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
     f98:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
     f9c:	9d cf       	rjmp	.-198    	; 0xed8 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f9e:	c8 01       	movw	r24, r16
     fa0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
     fa4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
     fa8:	97 cf       	rjmp	.-210    	; 0xed8 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     faa:	c8 01       	movw	r24, r16
     fac:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
     fb0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     fb4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret

00000fd8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     fdc:	8f e1       	ldi	r24, 0x1F	; 31
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     fe4:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	f9 f0       	breq	.+62     	; 0x1028 <xQueueCreateMutex+0x50>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     fea:	1b 82       	std	Y+3, r1	; 0x03
     fec:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     ff2:	1d 82       	std	Y+5, r1	; 0x05
     ff4:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
     ff6:	1f 82       	std	Y+7, r1	; 0x07
     ff8:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     ffa:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    1000:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    1006:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1008:	ce 01       	movw	r24, r28
    100a:	08 96       	adiw	r24, 0x08	; 8
    100c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1010:	ce 01       	movw	r24, r28
    1012:	41 96       	adiw	r24, 0x11	; 17
    1014:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    1018:	ce 01       	movw	r24, r28
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	0e 94 4e 07 	call	0xe9c	; 0xe9c <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
    1028:	8c 2f       	mov	r24, r28
    102a:	9d 2f       	mov	r25, r29
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	ec 01       	movw	r28, r24
    103c:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    103e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1042:	98 17       	cp	r25, r24
    1044:	e0 f4       	brcc	.+56     	; 0x107e <xQueueGenericSendFromISR+0x4c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1046:	ce 01       	movw	r24, r28
    1048:	42 2f       	mov	r20, r18
    104a:	0e 94 8b 06 	call	0xd16	; 0xd16 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    104e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	81 f4       	brne	.+32     	; 0x1074 <xQueueGenericSendFromISR+0x42>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1054:	89 89       	ldd	r24, Y+17	; 0x11
    1056:	88 23       	and	r24, r24
    1058:	a1 f0       	breq	.+40     	; 0x1082 <xQueueGenericSendFromISR+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    105a:	ce 01       	movw	r24, r28
    105c:	41 96       	adiw	r24, 0x11	; 17
    105e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
    1062:	88 23       	and	r24, r24
    1064:	81 f0       	breq	.+32     	; 0x1086 <xQueueGenericSendFromISR+0x54>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    1066:	01 15       	cp	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	79 f0       	breq	.+30     	; 0x108a <xQueueGenericSendFromISR+0x58>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	f8 01       	movw	r30, r16
    1070:	80 83       	st	Z, r24
    1072:	0c c0       	rjmp	.+24     	; 0x108c <xQueueGenericSendFromISR+0x5a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1074:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	07 c0       	rjmp	.+14     	; 0x108c <xQueueGenericSendFromISR+0x5a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	05 c0       	rjmp	.+10     	; 0x108c <xQueueGenericSendFromISR+0x5a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	03 c0       	rjmp	.+6      	; 0x108c <xQueueGenericSendFromISR+0x5a>
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	01 c0       	rjmp	.+2      	; 0x108c <xQueueGenericSendFromISR+0x5a>
    108a:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	1f 91       	pop	r17
    1092:	0f 91       	pop	r16
    1094:	08 95       	ret

00001096 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <xQueueGenericReceive+0x18>
    10ae:	0f 92       	push	r0
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8c 01       	movw	r16, r24
    10b8:	4b 01       	movw	r8, r22
    10ba:	5d 83       	std	Y+5, r21	; 0x05
    10bc:	4c 83       	std	Y+4, r20	; 0x04
    10be:	b2 2e       	mov	r11, r18
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    10c0:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    10c2:	ee 24       	eor	r14, r14
    10c4:	e3 94       	inc	r14
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    10c6:	0f 2e       	mov	r0, r31
    10c8:	f1 e1       	ldi	r31, 0x11	; 17
    10ca:	cf 2e       	mov	r12, r31
    10cc:	dd 24       	eor	r13, r13
    10ce:	f0 2d       	mov	r31, r0
    10d0:	c8 0e       	add	r12, r24
    10d2:	d9 1e       	adc	r13, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    10da:	f8 01       	movw	r30, r16
    10dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10de:	88 23       	and	r24, r24
    10e0:	a1 f1       	breq	.+104    	; 0x114a <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    10e2:	e6 80       	ldd	r14, Z+6	; 0x06
    10e4:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    10e6:	c8 01       	movw	r24, r16
    10e8:	b4 01       	movw	r22, r8
    10ea:	0e 94 0e 06 	call	0xc1c	; 0xc1c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    10ee:	bb 20       	and	r11, r11
    10f0:	d1 f4       	brne	.+52     	; 0x1126 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    10f2:	f8 01       	movw	r30, r16
    10f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	29 f4       	brne	.+10     	; 0x110c <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    1102:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <xTaskGetCurrentTaskHandle>
    1106:	f8 01       	movw	r30, r16
    1108:	93 83       	std	Z+3, r25	; 0x03
    110a:	82 83       	std	Z+2, r24	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    110c:	f8 01       	movw	r30, r16
    110e:	80 85       	ldd	r24, Z+8	; 0x08
    1110:	88 23       	and	r24, r24
    1112:	b9 f0       	breq	.+46     	; 0x1142 <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1114:	c8 01       	movw	r24, r16
    1116:	08 96       	adiw	r24, 0x08	; 8
    1118:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	89 f4       	brne	.+34     	; 0x1142 <xQueueGenericReceive+0xac>
						{
							portYIELD_WITHIN_API();
    1120:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
    1124:	0e c0       	rjmp	.+28     	; 0x1142 <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1126:	f8 01       	movw	r30, r16
    1128:	f7 82       	std	Z+7, r15	; 0x07
    112a:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    112c:	81 89       	ldd	r24, Z+17	; 0x11
    112e:	88 23       	and	r24, r24
    1130:	41 f0       	breq	.+16     	; 0x1142 <xQueueGenericReceive+0xac>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1132:	c8 01       	movw	r24, r16
    1134:	41 96       	adiw	r24, 0x11	; 17
    1136:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
    113a:	88 23       	and	r24, r24
    113c:	11 f0       	breq	.+4      	; 0x1142 <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    113e:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    1142:	0f 90       	pop	r0
    1144:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	5f c0       	rjmp	.+190    	; 0x1208 <xQueueGenericReceive+0x172>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	21 f4       	brne	.+8      	; 0x115a <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	57 c0       	rjmp	.+174    	; 0x1208 <xQueueGenericReceive+0x172>
				}
				else if( xEntryTimeSet == pdFALSE )
    115a:	ff 20       	and	r15, r15
    115c:	29 f4       	brne	.+10     	; 0x1168 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1166:	fe 2c       	mov	r15, r14
				}
			}
		}
		taskEXIT_CRITICAL();
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    116c:	0e 94 25 0c 	call	0x184a	; 0x184a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	0f 92       	push	r0
    1176:	f8 01       	movw	r30, r16
    1178:	85 8d       	ldd	r24, Z+29	; 0x1d
    117a:	8f 3f       	cpi	r24, 0xFF	; 255
    117c:	09 f4       	brne	.+2      	; 0x1180 <xQueueGenericReceive+0xea>
    117e:	15 8e       	std	Z+29, r1	; 0x1d
    1180:	f8 01       	movw	r30, r16
    1182:	86 8d       	ldd	r24, Z+30	; 0x1e
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	09 f4       	brne	.+2      	; 0x118a <xQueueGenericReceive+0xf4>
    1188:	16 8e       	std	Z+30, r1	; 0x1e
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	be 01       	movw	r22, r28
    1194:	6c 5f       	subi	r22, 0xFC	; 252
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <xTaskCheckForTimeOut>
    119c:	88 23       	and	r24, r24
    119e:	71 f5       	brne	.+92     	; 0x11fc <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    11a6:	f8 01       	movw	r30, r16
    11a8:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11ae:	88 23       	and	r24, r24
    11b0:	f9 f4       	brne	.+62     	; 0x11f0 <xQueueGenericReceive+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    11b2:	f8 01       	movw	r30, r16
    11b4:	80 81       	ld	r24, Z
    11b6:	91 81       	ldd	r25, Z+1	; 0x01
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	51 f4       	brne	.+20     	; 0x11d0 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    11c2:	f8 01       	movw	r30, r16
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    11cc:	0f 90       	pop	r0
    11ce:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    11d0:	6c 81       	ldd	r22, Y+4	; 0x04
    11d2:	7d 81       	ldd	r23, Y+5	; 0x05
    11d4:	c6 01       	movw	r24, r12
    11d6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    11da:	c8 01       	movw	r24, r16
    11dc:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    11e0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
    11e4:	88 23       	and	r24, r24
    11e6:	09 f0       	breq	.+2      	; 0x11ea <xQueueGenericReceive+0x154>
    11e8:	75 cf       	rjmp	.-278    	; 0x10d4 <xQueueGenericReceive+0x3e>
				{
					portYIELD_WITHIN_API();
    11ea:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
    11ee:	72 cf       	rjmp	.-284    	; 0x10d4 <xQueueGenericReceive+0x3e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11f0:	c8 01       	movw	r24, r16
    11f2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11f6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
    11fa:	6c cf       	rjmp	.-296    	; 0x10d4 <xQueueGenericReceive+0x3e>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11fc:	c8 01       	movw	r24, r16
    11fe:	0e 94 3d 06 	call	0xc7a	; 0xc7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1202:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    1206:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	9f 90       	pop	r9
    1226:	8f 90       	pop	r8
    1228:	08 95       	ret

0000122a <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	ec 01       	movw	r28, r24
    1234:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1236:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1238:	88 23       	and	r24, r24
    123a:	f1 f0       	breq	.+60     	; 0x1278 <xQueueReceiveFromISR+0x4e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    1242:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1244:	81 50       	subi	r24, 0x01	; 1
    1246:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124a:	8f 3f       	cpi	r24, 0xFF	; 255
    124c:	81 f4       	brne	.+32     	; 0x126e <xQueueReceiveFromISR+0x44>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    124e:	88 85       	ldd	r24, Y+8	; 0x08
    1250:	88 23       	and	r24, r24
    1252:	a1 f0       	breq	.+40     	; 0x127c <xQueueReceiveFromISR+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1254:	ce 01       	movw	r24, r28
    1256:	08 96       	adiw	r24, 0x08	; 8
    1258:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xTaskRemoveFromEventList>
    125c:	88 23       	and	r24, r24
    125e:	81 f0       	breq	.+32     	; 0x1280 <xQueueReceiveFromISR+0x56>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1260:	01 15       	cp	r16, r1
    1262:	11 05       	cpc	r17, r1
    1264:	79 f0       	breq	.+30     	; 0x1284 <xQueueReceiveFromISR+0x5a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	f8 01       	movw	r30, r16
    126a:	80 83       	st	Z, r24
    126c:	0c c0       	rjmp	.+24     	; 0x1286 <xQueueReceiveFromISR+0x5c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    126e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	8d 8f       	std	Y+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <xQueueReceiveFromISR+0x5c>
		}
		else
		{
			xReturn = pdFAIL;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <xQueueReceiveFromISR+0x5c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <xQueueReceiveFromISR+0x5c>
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <xQueueReceiveFromISR+0x5c>
    1284:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    1296:	fc 01       	movw	r30, r24
    1298:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    129e:	08 95       	ret

000012a0 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    12a0:	fc 01       	movw	r30, r24
    12a2:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    12a4:	08 95       	ret

000012a6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    12ac:	88 81       	ld	r24, Y
    12ae:	99 81       	ldd	r25, Y+1	; 0x01
    12b0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
	vPortFree( pxQueue );
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
}
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <xQueueIsQueueEmptyFromISR>:
signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    12c0:	fc 01       	movw	r30, r24
    12c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	91 11       	cpse	r25, r1
    12c8:	80 e0       	ldi	r24, 0x00	; 0

	return xReturn;
}
    12ca:	08 95       	ret

000012cc <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    12cc:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    12ce:	22 8d       	ldd	r18, Z+26	; 0x1a
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	93 8d       	ldd	r25, Z+27	; 0x1b
    12d4:	29 13       	cpse	r18, r25
    12d6:	80 e0       	ldi	r24, 0x00	; 0

	return xReturn;
}
    12d8:	08 95       	ret

000012da <SPI_MasterTransmit>:
void SPI_MasterTransmit(uint8_t data)
{
	//xSemaphoreTake( xMutex, portMAX_DELAY);
	
	//set SS low
	PORTB &= ~(1 << SPI_SS);
    12da:	28 98       	cbi	0x05, 0	; 5
	//Load data to be transferred
	SPDR = data;
    12dc:	8e bd       	out	0x2e, r24	; 46
	//wait for spi interrupt flag to signal complete transfer
	while (!(SPSR & (1 << SPIF))); 
    12de:	0d b4       	in	r0, 0x2d	; 45
    12e0:	07 fe       	sbrs	r0, 7
    12e2:	fd cf       	rjmp	.-6      	; 0x12de <SPI_MasterTransmit+0x4>
	//Set SS high 
	PORTB |= (1 << SPI_SS);	
    12e4:	28 9a       	sbi	0x05, 0	; 5
	
	//xSemaphoreGive( xMutex );
}
    12e6:	08 95       	ret

000012e8 <SSEG_Set_Brightness>:
//-
//- Description: This function set the brightness of the 
//- display where 255 is off and 0 is on as bright as possible. 
//---------------------------------------------------------------
void SSEG_Set_Brightness(uint8_t val)
{
    12e8:	cf 93       	push	r28
    12ea:	c8 2f       	mov	r28, r24
	SPI_MasterTransmit(SSEG_BRIGHTNESS);	
    12ec:	8a e7       	ldi	r24, 0x7A	; 122
    12ee:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
	SPI_MasterTransmit(val);
    12f2:	8c 2f       	mov	r24, r28
    12f4:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
}
    12f8:	cf 91       	pop	r28
    12fa:	08 95       	ret

000012fc <SPI_MasterInit>:
void SPI_MasterInit(void)
{
	//SPCR |= ((1 << SPE) | (1 << SPIE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0)); 
	//SPSR |=  1 << SPI2X; 
	
	DDRB = ((1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_SCK)); 
    12fc:	87 e0       	ldi	r24, 0x07	; 7
    12fe:	84 b9       	out	0x04, r24	; 4
	//make sure SS is high
	PORTB |= (1 << SPI_SS);
    1300:	28 9a       	sbi	0x05, 0	; 5

	SPCR =  (0<<SPIE) |	//No interrupts
    1302:	83 e5       	ldi	r24, 0x53	; 83
    1304:	8c bd       	out	0x2c, r24	; 44
			(0<<CPOL) |	//rising leading edge
			(0<<CPHA) |	//sample leading edge
			(1<<SPR1) | //
			(1<<SPR0) ; //clock speed
	
	SPSR =  (0<<SPIF) |	//SPI interrupt flag
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	8d bd       	out	0x2d, r24	; 45
			(0<<WCOL) |	//Write collision flag
			(1<<SPI2X);	//Doubles SPI clock
			
	
	SSEG_Set_Brightness(10);
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <SSEG_Set_Brightness>
}
    1310:	08 95       	ret

00001312 <SSEG_Reset>:
//-
//- Description: This function turns off all display elements. 
//---------------------------------------------------------------
void SSEG_Reset(void)
{
	SPI_MasterTransmit(SSEG_RESET);	
    1312:	86 e7       	ldi	r24, 0x76	; 118
    1314:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
}
    1318:	08 95       	ret

0000131a <SSEG_Write_4vals_array>:
//- pointing to an array of four byte values, one for 
//- each of the 7-segment display locations. The four values
//- are then written to the 7-segment display.  
//---------------------------------------------------------------
void SSEG_Write_4vals_array(uint8_t* vals)
{
    131a:	1f 93       	push	r17
    131c:	cf 93       	push	r28
    131e:	df 93       	push	r29
    1320:	c8 2f       	mov	r28, r24
    1322:	d9 2f       	mov	r29, r25
    1324:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i = 0; i < 4; i ++)
	{
		SPI_MasterTransmit(*(vals + i));			
    1326:	89 91       	ld	r24, Y+
    1328:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
    132c:	11 50       	subi	r17, 0x01	; 1
//- are then written to the 7-segment display.  
//---------------------------------------------------------------
void SSEG_Write_4vals_array(uint8_t* vals)
{
	uint8_t i;
	for(i = 0; i < 4; i ++)
    132e:	d9 f7       	brne	.-10     	; 0x1326 <SSEG_Write_4vals_array+0xc>
	{
		SPI_MasterTransmit(*(vals + i));			
	}		
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	08 95       	ret

00001338 <SSEG_Write_digit>:
//- individual digits to the display. In this case, you need 
//- to first send the initial escape character before you 
//- send the actual data. 
//---------------------------------------------------------------
void SSEG_Write_digit(uint8_t digit, uint8_t val)
{
    1338:	cf 93       	push	r28
    133a:	c6 2f       	mov	r28, r22
	switch(digit)
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	89 f0       	breq	.+34     	; 0x1362 <SSEG_Write_digit+0x2a>
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	18 f4       	brcc	.+6      	; 0x134a <SSEG_Write_digit+0x12>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	09 f5       	brne	.+66     	; 0x138a <SSEG_Write_digit+0x52>
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <SSEG_Write_digit+0x1c>
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	89 f0       	breq	.+34     	; 0x1370 <SSEG_Write_digit+0x38>
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	e1 f4       	brne	.+56     	; 0x138a <SSEG_Write_digit+0x52>
    1352:	15 c0       	rjmp	.+42     	; 0x137e <SSEG_Write_digit+0x46>
	{
		case 1:
			SPI_MasterTransmit(DIGIT_1);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    135a:	8c 2f       	mov	r24, r28
    135c:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			break; 
    1360:	14 c0       	rjmp	.+40     	; 0x138a <SSEG_Write_digit+0x52>
		
		case 2:
			SPI_MasterTransmit(DIGIT_2);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			break;
    136e:	0d c0       	rjmp	.+26     	; 0x138a <SSEG_Write_digit+0x52>
		
		case 3:
			SPI_MasterTransmit(DIGIT_3);
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    1376:	8c 2f       	mov	r24, r28
    1378:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			break;
    137c:	06 c0       	rjmp	.+12     	; 0x138a <SSEG_Write_digit+0x52>
		
		case 4:
			SPI_MasterTransmit(DIGIT_4);
    137e:	84 e0       	ldi	r24, 0x04	; 4
    1380:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    1384:	8c 2f       	mov	r24, r28
    1386:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
			break;
			
		default:	
			break;
	}	
}
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <SSEG_Write_left_digits>:
//- a tens and ones digit the then sends them off to the two 
//- left-most digits of the display. This function also handles
//- lead zero blanking. 
//---------------------------------------------------------------
void SSEG_Write_left_digits(uint8_t val)
{
    138e:	cf 93       	push	r28
	uint8_t dig_ones_place = val;
	//variable to store the 10's place value once it's determined
	uint8_t dig_tens_place = 0; 
	
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
    1390:	84 36       	cpi	r24, 0x64	; 100
    1392:	48 f4       	brcc	.+18     	; 0x13a6 <SSEG_Write_left_digits+0x18>
	{
		dig_tens_place = val / 10;
    1394:	6a e0       	ldi	r22, 0x0A	; 10
    1396:	0e 94 20 10 	call	0x2040	; 0x2040 <__udivmodqi4>
    139a:	c9 2f       	mov	r28, r25
		dig_ones_place = val % 10;
		
		//SPI_MasterTransmit(DIGIT_1);
		SPI_MasterTransmit(dig_tens_place);
    139c:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
		//SPI_MasterTransmit(DIGIT_2);
		SPI_MasterTransmit(dig_ones_place);
    13a0:	8c 2f       	mov	r24, r28
    13a2:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
	}		
}
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <SSEG_Write_right_digits>:
//- a tens and ones digit the then sends them off to the two 
//- right-most digits of the display. This function also handles
//- lead zero blanking. 
//---------------------------------------------------------------
void SSEG_Write_right_digits(uint8_t val)
{
    13aa:	cf 93       	push	r28
	uint8_t dig_ones_place = val;
	//variable to store the 10's place value once it's determined
	uint8_t dig_tens_place = 0;
		
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
    13ac:	84 36       	cpi	r24, 0x64	; 100
    13ae:	b0 f4       	brcc	.+44     	; 0x13dc <SSEG_Write_right_digits+0x32>
	{
		//subtract from tens place until it's zero to determine
		//tens and ones place digits
		while((dig_ones_place - 10) >= 0)
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	2a 50       	subi	r18, 0x0A	; 10
    13b6:	30 40       	sbci	r19, 0x00	; 0
    13b8:	52 f0       	brmi	.+20     	; 0x13ce <SSEG_Write_right_digits+0x24>
    13ba:	c8 2f       	mov	r28, r24
    13bc:	80 e0       	ldi	r24, 0x00	; 0
		{
			dig_ones_place -= 10;
    13be:	ca 50       	subi	r28, 0x0A	; 10
			dig_tens_place++;
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
	{
		//subtract from tens place until it's zero to determine
		//tens and ones place digits
		while((dig_ones_place - 10) >= 0)
    13c2:	2c 2f       	mov	r18, r28
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	2a 50       	subi	r18, 0x0A	; 10
    13c8:	30 40       	sbci	r19, 0x00	; 0
    13ca:	ca f7       	brpl	.-14     	; 0x13be <SSEG_Write_right_digits+0x14>
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <SSEG_Write_right_digits+0x28>
    13ce:	c8 2f       	mov	r28, r24
    13d0:	80 e0       	ldi	r24, 0x00	; 0
		{
			dig_ones_place -= 10;
			dig_tens_place++;
		}
		//SPI_MasterTransmit(DIGIT_3);
		SPI_MasterTransmit(dig_tens_place);
    13d2:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
		//SPI_MasterTransmit(DIGIT_4);
		SPI_MasterTransmit(dig_ones_place);
    13d6:	8c 2f       	mov	r24, r28
    13d8:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
	}	
}
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <SSEG_Write_Decimal_Point>:
//- Description: Writes decimal point values to the display. 
//- There are six different values that can be written. Check 
//- out the 7-segment device spec for details on decimal points.
//---------------------------------------------------------------
void SSEG_Write_Decimal_Point(uint8_t val)
{
    13e0:	cf 93       	push	r28
    13e2:	c8 2f       	mov	r28, r24
	SPI_MasterTransmit(SSEG_DEC_PNT);
    13e4:	87 e7       	ldi	r24, 0x77	; 119
    13e6:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
	SPI_MasterTransmit(val);
    13ea:	8c 2f       	mov	r24, r28
    13ec:	0e 94 6d 09 	call	0x12da	; 0x12da <SPI_MasterTransmit>
}
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    13fa:	e0 91 52 1a 	lds	r30, 0x1A52
    13fe:	f0 91 53 1a 	lds	r31, 0x1A53
    1402:	93 83       	std	Z+3, r25	; 0x03
    1404:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    1406:	80 91 5a 1a 	lds	r24, 0x1A5A
    140a:	90 91 5b 1a 	lds	r25, 0x1A5B
    140e:	c8 17       	cp	r28, r24
    1410:	d9 07       	cpc	r29, r25
    1412:	68 f4       	brcc	.+26     	; 0x142e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1414:	80 91 5d 1a 	lds	r24, 0x1A5D
    1418:	90 91 5e 1a 	lds	r25, 0x1A5E
    141c:	60 91 52 1a 	lds	r22, 0x1A52
    1420:	70 91 53 1a 	lds	r23, 0x1A53
    1424:	6e 5f       	subi	r22, 0xFE	; 254
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>
    142c:	17 c0       	rjmp	.+46     	; 0x145c <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    142e:	80 91 5f 1a 	lds	r24, 0x1A5F
    1432:	90 91 60 1a 	lds	r25, 0x1A60
    1436:	60 91 52 1a 	lds	r22, 0x1A52
    143a:	70 91 53 1a 	lds	r23, 0x1A53
    143e:	6e 5f       	subi	r22, 0xFE	; 254
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    1446:	80 91 0e 02 	lds	r24, 0x020E
    144a:	90 91 0f 02 	lds	r25, 0x020F
    144e:	c8 17       	cp	r28, r24
    1450:	d9 07       	cpc	r29, r25
    1452:	20 f4       	brcc	.+8      	; 0x145c <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    1454:	d0 93 0f 02 	sts	0x020F, r29
    1458:	c0 93 0e 02 	sts	0x020E, r28
		}
	}
}
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	08 95       	ret

00001462 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1462:	c3 e6       	ldi	r28, 0x63	; 99
    1464:	da e1       	ldi	r29, 0x1A	; 26
    1466:	88 81       	ld	r24, Y
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	e8 f3       	brcs	.-6      	; 0x1466 <prvIdleTask+0x4>
			{
				taskYIELD();
    146c:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
    1470:	fa cf       	rjmp	.-12     	; 0x1466 <prvIdleTask+0x4>

00001472 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    1472:	4f 92       	push	r4
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	2c 01       	movw	r4, r24
    1492:	4b 01       	movw	r8, r22
    1494:	ea 01       	movw	r28, r20
    1496:	39 01       	movw	r6, r18
    1498:	b0 2e       	mov	r11, r16
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    149a:	8a e2       	ldi	r24, 0x2A	; 42
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
    14a2:	8c 01       	movw	r16, r24

	if( pxNewTCB != NULL )
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	09 f4       	brne	.+2      	; 0x14aa <xTaskGenericCreate+0x38>
    14a8:	e3 c0       	rjmp	.+454    	; 0x1670 <xTaskGenericCreate+0x1fe>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    14aa:	c1 14       	cp	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <xTaskGenericCreate+0x40>
    14b0:	f4 c0       	rjmp	.+488    	; 0x169a <xTaskGenericCreate+0x228>
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
    14b8:	6c 01       	movw	r12, r24
    14ba:	f8 01       	movw	r30, r16
    14bc:	90 8f       	std	Z+24, r25	; 0x18
    14be:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	29 f4       	brne	.+10     	; 0x14ce <xTaskGenericCreate+0x5c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    14c4:	c8 01       	movw	r24, r16
    14c6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	d6 c0       	rjmp	.+428    	; 0x167a <xTaskGenericCreate+0x208>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    14ce:	c6 01       	movw	r24, r12
    14d0:	65 ea       	ldi	r22, 0xA5	; 165
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	ae 01       	movw	r20, r28
    14d6:	0e 94 35 10 	call	0x206a	; 0x206a <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    14da:	9e 01       	movw	r18, r28
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	f8 01       	movw	r30, r16
    14e2:	87 89       	ldd	r24, Z+23	; 0x17
    14e4:	90 8d       	ldd	r25, Z+24	; 0x18
    14e6:	6c 01       	movw	r12, r24
    14e8:	c2 0e       	add	r12, r18
    14ea:	d3 1e       	adc	r13, r19
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    14ec:	c8 01       	movw	r24, r16
    14ee:	49 96       	adiw	r24, 0x19	; 25
    14f0:	b4 01       	movw	r22, r8
    14f2:	40 e1       	ldi	r20, 0x10	; 16
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	0e 94 3c 10 	call	0x2078	; 0x2078 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    14fa:	f8 01       	movw	r30, r16
    14fc:	10 a6       	lds	r17, 0xb0
    14fe:	cb 2d       	mov	r28, r11
    1500:	f3 e0       	ldi	r31, 0x03	; 3
    1502:	fb 15       	cp	r31, r11
    1504:	08 f4       	brcc	.+2      	; 0x1508 <xTaskGenericCreate+0x96>
    1506:	c3 e0       	ldi	r28, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    1508:	f8 01       	movw	r30, r16
    150a:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    150c:	c1 a7       	lds	r28, 0x71
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    150e:	88 24       	eor	r8, r8
    1510:	99 24       	eor	r9, r9
    1512:	68 94       	set
    1514:	81 f8       	bld	r8, 1
    1516:	80 0e       	add	r8, r16
    1518:	91 1e       	adc	r9, r17
    151a:	c4 01       	movw	r24, r8
    151c:	0e 94 de 03 	call	0x7bc	; 0x7bc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1520:	c8 01       	movw	r24, r16
    1522:	0c 96       	adiw	r24, 0x0c	; 12
    1524:	0e 94 de 03 	call	0x7bc	; 0x7bc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1528:	f8 01       	movw	r30, r16
    152a:	11 87       	std	Z+9, r17	; 0x09
    152c:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	8c 1b       	sub	r24, r28
    1534:	91 09       	sbc	r25, r1
    1536:	95 87       	std	Z+13, r25	; 0x0d
    1538:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    153a:	13 8b       	std	Z+19, r17	; 0x13
    153c:	02 8b       	std	Z+18, r16	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    153e:	c6 01       	movw	r24, r12
    1540:	b2 01       	movw	r22, r4
    1542:	a3 01       	movw	r20, r6
    1544:	0e 94 6f 04 	call	0x8de	; 0x8de <pxPortInitialiseStack>
    1548:	f8 01       	movw	r30, r16
    154a:	91 83       	std	Z+1, r25	; 0x01
    154c:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    154e:	e1 14       	cp	r14, r1
    1550:	f1 04       	cpc	r15, r1
    1552:	19 f0       	breq	.+6      	; 0x155a <xTaskGenericCreate+0xe8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    1554:	f7 01       	movw	r30, r14
    1556:	11 83       	std	Z+1, r17	; 0x01
    1558:	00 83       	st	Z, r16
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1560:	80 91 5c 1a 	lds	r24, 0x1A5C
    1564:	8f 5f       	subi	r24, 0xFF	; 255
    1566:	80 93 5c 1a 	sts	0x1A5C, r24
			if( pxCurrentTCB == NULL )
    156a:	80 91 52 1a 	lds	r24, 0x1A52
    156e:	90 91 53 1a 	lds	r25, 0x1A53
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	d9 f5       	brne	.+118    	; 0x15ec <xTaskGenericCreate+0x17a>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    1576:	10 93 53 1a 	sts	0x1A53, r17
    157a:	00 93 52 1a 	sts	0x1A52, r16

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    157e:	80 91 5c 1a 	lds	r24, 0x1A5C
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	09 f0       	breq	.+2      	; 0x1588 <xTaskGenericCreate+0x116>
    1586:	41 c0       	rjmp	.+130    	; 0x160a <xTaskGenericCreate+0x198>
    1588:	c0 e0       	ldi	r28, 0x00	; 0
    158a:	d0 e0       	ldi	r29, 0x00	; 0
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    158c:	ce 01       	movw	r24, r28
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	8c 0f       	add	r24, r28
    159c:	9d 1f       	adc	r25, r29
    159e:	8d 59       	subi	r24, 0x9D	; 157
    15a0:	95 4e       	sbci	r25, 0xE5	; 229
    15a2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
    15a6:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    15a8:	c4 30       	cpi	r28, 0x04	; 4
    15aa:	d1 05       	cpc	r29, r1
    15ac:	79 f7       	brne	.-34     	; 0x158c <xTaskGenericCreate+0x11a>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    15ae:	c7 e8       	ldi	r28, 0x87	; 135
    15b0:	da e1       	ldi	r29, 0x1A	; 26
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    15b8:	0f 2e       	mov	r0, r31
    15ba:	f0 e9       	ldi	r31, 0x90	; 144
    15bc:	ef 2e       	mov	r14, r31
    15be:	fa e1       	ldi	r31, 0x1A	; 26
    15c0:	ff 2e       	mov	r15, r31
    15c2:	f0 2d       	mov	r31, r0
    15c4:	c7 01       	movw	r24, r14
    15c6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    15ca:	89 e9       	ldi	r24, 0x99	; 153
    15cc:	9a e1       	ldi	r25, 0x1A	; 26
    15ce:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    15d2:	82 ea       	ldi	r24, 0xA2	; 162
    15d4:	9a e1       	ldi	r25, 0x1A	; 26
    15d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    15da:	d0 93 60 1a 	sts	0x1A60, r29
    15de:	c0 93 5f 1a 	sts	0x1A5F, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    15e2:	f0 92 5e 1a 	sts	0x1A5E, r15
    15e6:	e0 92 5d 1a 	sts	0x1A5D, r14
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <xTaskGenericCreate+0x198>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    15ec:	80 91 58 1a 	lds	r24, 0x1A58
    15f0:	88 23       	and	r24, r24
    15f2:	59 f4       	brne	.+22     	; 0x160a <xTaskGenericCreate+0x198>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    15f4:	e0 91 52 1a 	lds	r30, 0x1A52
    15f8:	f0 91 53 1a 	lds	r31, 0x1A53
    15fc:	86 89       	ldd	r24, Z+22	; 0x16
    15fe:	b8 16       	cp	r11, r24
    1600:	20 f0       	brcs	.+8      	; 0x160a <xTaskGenericCreate+0x198>
					{
						pxCurrentTCB = pxNewTCB;
    1602:	10 93 53 1a 	sts	0x1A53, r17
    1606:	00 93 52 1a 	sts	0x1A52, r16
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    160a:	f8 01       	movw	r30, r16
    160c:	86 89       	ldd	r24, Z+22	; 0x16
    160e:	90 91 61 1a 	lds	r25, 0x1A61
    1612:	98 17       	cp	r25, r24
    1614:	10 f4       	brcc	.+4      	; 0x161a <xTaskGenericCreate+0x1a8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    1616:	80 93 61 1a 	sts	0x1A61, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    161a:	90 91 62 1a 	lds	r25, 0x1A62
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	90 93 62 1a 	sts	0x1A62, r25

			prvAddTaskToReadyQueue( pxNewTCB );
    1624:	90 91 59 1a 	lds	r25, 0x1A59
    1628:	98 17       	cp	r25, r24
    162a:	10 f4       	brcc	.+4      	; 0x1630 <xTaskGenericCreate+0x1be>
    162c:	80 93 59 1a 	sts	0x1A59, r24
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 01       	movw	r18, r24
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	22 0f       	add	r18, r18
    163a:	33 1f       	adc	r19, r19
    163c:	22 0f       	add	r18, r18
    163e:	33 1f       	adc	r19, r19
    1640:	82 0f       	add	r24, r18
    1642:	93 1f       	adc	r25, r19
    1644:	8d 59       	subi	r24, 0x9D	; 157
    1646:	95 4e       	sbci	r25, 0xE5	; 229
    1648:	b4 01       	movw	r22, r8
    164a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    1652:	80 91 58 1a 	lds	r24, 0x1A58
    1656:	88 23       	and	r24, r24
    1658:	69 f0       	breq	.+26     	; 0x1674 <xTaskGenericCreate+0x202>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    165a:	e0 91 52 1a 	lds	r30, 0x1A52
    165e:	f0 91 53 1a 	lds	r31, 0x1A53
    1662:	86 89       	ldd	r24, Z+22	; 0x16
    1664:	8b 15       	cp	r24, r11
    1666:	40 f4       	brcc	.+16     	; 0x1678 <xTaskGenericCreate+0x206>
			{
				portYIELD_WITHIN_API();
    1668:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	05 c0       	rjmp	.+10     	; 0x167a <xTaskGenericCreate+0x208>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1670:	8f ef       	ldi	r24, 0xFF	; 255
    1672:	03 c0       	rjmp	.+6      	; 0x167a <xTaskGenericCreate+0x208>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	01 c0       	rjmp	.+2      	; 0x167a <xTaskGenericCreate+0x208>
    1678:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	9f 90       	pop	r9
    168e:	8f 90       	pop	r8
    1690:	7f 90       	pop	r7
    1692:	6f 90       	pop	r6
    1694:	5f 90       	pop	r5
    1696:	4f 90       	pop	r4
    1698:	08 95       	ret
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    169a:	fc 01       	movw	r30, r24
    169c:	d0 8e       	std	Z+24, r13	; 0x18
    169e:	c7 8a       	std	Z+23, r12	; 0x17
    16a0:	16 cf       	rjmp	.-468    	; 0x14ce <xTaskGenericCreate+0x5c>

000016a2 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    16a2:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    16a4:	82 85       	ldd	r24, Z+10	; 0x0a
    16a6:	93 85       	ldd	r25, Z+11	; 0x0b
    16a8:	2a e1       	ldi	r18, 0x1A	; 26
    16aa:	82 3a       	cpi	r24, 0xA2	; 162
    16ac:	92 07       	cpc	r25, r18
    16ae:	61 f4       	brne	.+24     	; 0x16c8 <xTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    16b0:	24 89       	ldd	r18, Z+20	; 0x14
    16b2:	35 89       	ldd	r19, Z+21	; 0x15
    16b4:	8a e1       	ldi	r24, 0x1A	; 26
    16b6:	29 39       	cpi	r18, 0x99	; 153
    16b8:	38 07       	cpc	r19, r24
    16ba:	41 f0       	breq	.+16     	; 0x16cc <xTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	21 15       	cp	r18, r1
    16c0:	31 05       	cpc	r19, r1
    16c2:	29 f0       	breq	.+10     	; 0x16ce <xTaskIsTaskSuspended+0x2c>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	08 95       	ret
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret
    16cc:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    16ce:	08 95       	ret

000016d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ec 01       	movw	r28, r24
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	b9 f1       	breq	.+110    	; 0x174c <vTaskResume+0x7c>
    16de:	80 91 52 1a 	lds	r24, 0x1A52
    16e2:	90 91 53 1a 	lds	r25, 0x1A53
    16e6:	c8 17       	cp	r28, r24
    16e8:	d9 07       	cpc	r29, r25
    16ea:	81 f1       	breq	.+96     	; 0x174c <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    16f2:	ce 01       	movw	r24, r28
    16f4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xTaskIsTaskSuspended>
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	31 f5       	brne	.+76     	; 0x1748 <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
    16fc:	8e 01       	movw	r16, r28
    16fe:	0e 5f       	subi	r16, 0xFE	; 254
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	90 91 59 1a 	lds	r25, 0x1A59
    170e:	98 17       	cp	r25, r24
    1710:	10 f4       	brcc	.+4      	; 0x1716 <vTaskResume+0x46>
    1712:	80 93 59 1a 	sts	0x1A59, r24
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 01       	movw	r18, r24
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	8d 59       	subi	r24, 0x9D	; 157
    172c:	95 4e       	sbci	r25, 0xE5	; 229
    172e:	b8 01       	movw	r22, r16
    1730:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1734:	e0 91 52 1a 	lds	r30, 0x1A52
    1738:	f0 91 53 1a 	lds	r31, 0x1A53
    173c:	9e 89       	ldd	r25, Y+22	; 0x16
    173e:	86 89       	ldd	r24, Z+22	; 0x16
    1740:	98 17       	cp	r25, r24
    1742:	10 f0       	brcs	.+4      	; 0x1748 <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    1744:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
		}
	}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	1f 91       	pop	r17
    1752:	0f 91       	pop	r16
    1754:	08 95       	ret

00001756 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	1f 93       	push	r17
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24

		pxTCB = ( tskTCB * ) pxTaskToResume;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    1762:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xTaskIsTaskSuspended>
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	b9 f5       	brne	.+110    	; 0x17d8 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    176a:	80 91 57 1a 	lds	r24, 0x1A57
    176e:	88 23       	and	r24, r24
    1770:	51 f5       	brne	.+84     	; 0x17c6 <xTaskResumeFromISR+0x70>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    1772:	e0 91 52 1a 	lds	r30, 0x1A52
    1776:	f0 91 53 1a 	lds	r31, 0x1A53
    177a:	11 e0       	ldi	r17, 0x01	; 1
    177c:	9e 89       	ldd	r25, Y+22	; 0x16
    177e:	86 89       	ldd	r24, Z+22	; 0x16
    1780:	98 17       	cp	r25, r24
    1782:	08 f4       	brcc	.+2      	; 0x1786 <xTaskResumeFromISR+0x30>
    1784:	10 e0       	ldi	r17, 0x00	; 0
					uxListRemove(  &( pxTCB->xGenericListItem ) );
    1786:	ee 24       	eor	r14, r14
    1788:	ff 24       	eor	r15, r15
    178a:	68 94       	set
    178c:	e1 f8       	bld	r14, 1
    178e:	ec 0e       	add	r14, r28
    1790:	fd 1e       	adc	r15, r29
    1792:	c7 01       	movw	r24, r14
    1794:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1798:	8e 89       	ldd	r24, Y+22	; 0x16
    179a:	90 91 59 1a 	lds	r25, 0x1A59
    179e:	98 17       	cp	r25, r24
    17a0:	10 f4       	brcc	.+4      	; 0x17a6 <xTaskResumeFromISR+0x50>
    17a2:	80 93 59 1a 	sts	0x1A59, r24
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9c 01       	movw	r18, r24
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	82 0f       	add	r24, r18
    17b8:	93 1f       	adc	r25, r19
    17ba:	8d 59       	subi	r24, 0x9D	; 157
    17bc:	95 4e       	sbci	r25, 0xE5	; 229
    17be:	b7 01       	movw	r22, r14
    17c0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
    17c4:	0a c0       	rjmp	.+20     	; 0x17da <xTaskResumeFromISR+0x84>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    17c6:	be 01       	movw	r22, r28
    17c8:	64 5f       	subi	r22, 0xF4	; 244
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	89 e9       	ldi	r24, 0x99	; 153
    17ce:	9a e1       	ldi	r25, 0x1A	; 26
    17d0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
	portBASE_TYPE xYieldRequired = pdFALSE;
    17d4:	10 e0       	ldi	r17, 0x00	; 0
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <xTaskResumeFromISR+0x84>
    17d8:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    17da:	81 2f       	mov	r24, r17
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	08 95       	ret

000017e8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    17e8:	af 92       	push	r10
    17ea:	bf 92       	push	r11
    17ec:	cf 92       	push	r12
    17ee:	df 92       	push	r13
    17f0:	ef 92       	push	r14
    17f2:	ff 92       	push	r15
    17f4:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    17f6:	81 e3       	ldi	r24, 0x31	; 49
    17f8:	9a e0       	ldi	r25, 0x0A	; 10
    17fa:	69 e0       	ldi	r22, 0x09	; 9
    17fc:	72 e0       	ldi	r23, 0x02	; 2
    17fe:	45 e5       	ldi	r20, 0x55	; 85
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	ee 24       	eor	r14, r14
    180a:	ff 24       	eor	r15, r15
    180c:	cc 24       	eor	r12, r12
    180e:	dd 24       	eor	r13, r13
    1810:	aa 24       	eor	r10, r10
    1812:	bb 24       	eor	r11, r11
    1814:	0e 94 39 0a 	call	0x1472	; 0x1472 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	49 f4       	brne	.+18     	; 0x182e <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    181c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    181e:	80 93 58 1a 	sts	0x1A58, r24
		xTickCount = ( portTickType ) 0U;
    1822:	10 92 5b 1a 	sts	0x1A5B, r1
    1826:	10 92 5a 1a 	sts	0x1A5A, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    182a:	0e 94 08 05 	call	0xa10	; 0xa10 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	08 95       	ret

0000183e <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    183e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1840:	10 92 58 1a 	sts	0x1A58, r1
	vPortEndScheduler();
    1844:	0e 94 46 05 	call	0xa8c	; 0xa8c <vPortEndScheduler>
}
    1848:	08 95       	ret

0000184a <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    184a:	80 91 57 1a 	lds	r24, 0x1A57
    184e:	8f 5f       	subi	r24, 0xFF	; 255
    1850:	80 93 57 1a 	sts	0x1A57, r24
}
    1854:	08 95       	ret

00001856 <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    185c:	80 91 5a 1a 	lds	r24, 0x1A5A
    1860:	90 91 5b 1a 	lds	r25, 0x1A5B
	}
	taskEXIT_CRITICAL();
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1868:	08 95       	ret

0000186a <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    186a:	80 91 5a 1a 	lds	r24, 0x1A5A
    186e:	90 91 5b 1a 	lds	r25, 0x1A5B
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1872:	08 95       	ret

00001874 <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    1874:	80 91 5c 1a 	lds	r24, 0x1A5C
}
    1878:	08 95       	ret

0000187a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1882:	80 91 57 1a 	lds	r24, 0x1A57
    1886:	88 23       	and	r24, r24
    1888:	09 f0       	breq	.+2      	; 0x188c <vTaskIncrementTick+0x12>
    188a:	b3 c0       	rjmp	.+358    	; 0x19f2 <vTaskIncrementTick+0x178>
	{
		++xTickCount;
    188c:	80 91 5a 1a 	lds	r24, 0x1A5A
    1890:	90 91 5b 1a 	lds	r25, 0x1A5B
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	90 93 5b 1a 	sts	0x1A5B, r25
    189a:	80 93 5a 1a 	sts	0x1A5A, r24
		if( xTickCount == ( portTickType ) 0U )
    189e:	80 91 5a 1a 	lds	r24, 0x1A5A
    18a2:	90 91 5b 1a 	lds	r25, 0x1A5B
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	99 f5       	brne	.+102    	; 0x1910 <vTaskIncrementTick+0x96>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
    18aa:	80 91 5f 1a 	lds	r24, 0x1A5F
    18ae:	90 91 60 1a 	lds	r25, 0x1A60
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    18b2:	20 91 5d 1a 	lds	r18, 0x1A5D
    18b6:	30 91 5e 1a 	lds	r19, 0x1A5E
    18ba:	30 93 60 1a 	sts	0x1A60, r19
    18be:	20 93 5f 1a 	sts	0x1A5F, r18
			pxOverflowDelayedTaskList = pxTemp;
    18c2:	90 93 5e 1a 	sts	0x1A5E, r25
    18c6:	80 93 5d 1a 	sts	0x1A5D, r24
			xNumOfOverflows++;
    18ca:	80 91 54 1a 	lds	r24, 0x1A54
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	80 93 54 1a 	sts	0x1A54, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    18d4:	e0 91 5f 1a 	lds	r30, 0x1A5F
    18d8:	f0 91 60 1a 	lds	r31, 0x1A60
    18dc:	80 81       	ld	r24, Z
    18de:	88 23       	and	r24, r24
    18e0:	39 f4       	brne	.+14     	; 0x18f0 <vTaskIncrementTick+0x76>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    18e2:	8f ef       	ldi	r24, 0xFF	; 255
    18e4:	9f ef       	ldi	r25, 0xFF	; 255
    18e6:	90 93 0f 02 	sts	0x020F, r25
    18ea:	80 93 0e 02 	sts	0x020E, r24
    18ee:	10 c0       	rjmp	.+32     	; 0x1910 <vTaskIncrementTick+0x96>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    18f0:	e0 91 5f 1a 	lds	r30, 0x1A5F
    18f4:	f0 91 60 1a 	lds	r31, 0x1A60
    18f8:	05 80       	ldd	r0, Z+5	; 0x05
    18fa:	f6 81       	ldd	r31, Z+6	; 0x06
    18fc:	e0 2d       	mov	r30, r0
    18fe:	06 80       	ldd	r0, Z+6	; 0x06
    1900:	f7 81       	ldd	r31, Z+7	; 0x07
    1902:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	90 93 0f 02 	sts	0x020F, r25
    190c:	80 93 0e 02 	sts	0x020E, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1910:	20 91 5a 1a 	lds	r18, 0x1A5A
    1914:	30 91 5b 1a 	lds	r19, 0x1A5B
    1918:	80 91 0e 02 	lds	r24, 0x020E
    191c:	90 91 0f 02 	lds	r25, 0x020F
    1920:	28 17       	cp	r18, r24
    1922:	39 07       	cpc	r19, r25
    1924:	08 f4       	brcc	.+2      	; 0x1928 <vTaskIncrementTick+0xae>
    1926:	6c c0       	rjmp	.+216    	; 0x1a00 <vTaskIncrementTick+0x186>
    1928:	e0 91 5f 1a 	lds	r30, 0x1A5F
    192c:	f0 91 60 1a 	lds	r31, 0x1A60
    1930:	80 81       	ld	r24, Z
    1932:	88 23       	and	r24, r24
    1934:	99 f0       	breq	.+38     	; 0x195c <vTaskIncrementTick+0xe2>
    1936:	e0 91 5f 1a 	lds	r30, 0x1A5F
    193a:	f0 91 60 1a 	lds	r31, 0x1A60
    193e:	05 80       	ldd	r0, Z+5	; 0x05
    1940:	f6 81       	ldd	r31, Z+6	; 0x06
    1942:	e0 2d       	mov	r30, r0
    1944:	c6 81       	ldd	r28, Z+6	; 0x06
    1946:	d7 81       	ldd	r29, Z+7	; 0x07
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	20 91 5a 1a 	lds	r18, 0x1A5A
    1950:	30 91 5b 1a 	lds	r19, 0x1A5B
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	f8 f4       	brcc	.+62     	; 0x1998 <vTaskIncrementTick+0x11e>
    195a:	19 c0       	rjmp	.+50     	; 0x198e <vTaskIncrementTick+0x114>
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	90 93 0f 02 	sts	0x020F, r25
    1964:	80 93 0e 02 	sts	0x020E, r24
    1968:	4b c0       	rjmp	.+150    	; 0x1a00 <vTaskIncrementTick+0x186>
    196a:	e0 91 5f 1a 	lds	r30, 0x1A5F
    196e:	f0 91 60 1a 	lds	r31, 0x1A60
    1972:	05 80       	ldd	r0, Z+5	; 0x05
    1974:	f6 81       	ldd	r31, Z+6	; 0x06
    1976:	e0 2d       	mov	r30, r0
    1978:	c6 81       	ldd	r28, Z+6	; 0x06
    197a:	d7 81       	ldd	r29, Z+7	; 0x07
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	9b 81       	ldd	r25, Y+3	; 0x03
    1980:	20 91 5a 1a 	lds	r18, 0x1A5A
    1984:	30 91 5b 1a 	lds	r19, 0x1A5B
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	28 f4       	brcc	.+10     	; 0x1998 <vTaskIncrementTick+0x11e>
    198e:	90 93 0f 02 	sts	0x020F, r25
    1992:	80 93 0e 02 	sts	0x020E, r24
    1996:	34 c0       	rjmp	.+104    	; 0x1a00 <vTaskIncrementTick+0x186>
    1998:	8e 01       	movw	r16, r28
    199a:	0e 5f       	subi	r16, 0xFE	; 254
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	c8 01       	movw	r24, r16
    19a0:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
    19a4:	8c 89       	ldd	r24, Y+20	; 0x14
    19a6:	9d 89       	ldd	r25, Y+21	; 0x15
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <vTaskIncrementTick+0x13a>
    19ac:	ce 01       	movw	r24, r28
    19ae:	0c 96       	adiw	r24, 0x0c	; 12
    19b0:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
    19b4:	8e 89       	ldd	r24, Y+22	; 0x16
    19b6:	90 91 59 1a 	lds	r25, 0x1A59
    19ba:	98 17       	cp	r25, r24
    19bc:	10 f4       	brcc	.+4      	; 0x19c2 <vTaskIncrementTick+0x148>
    19be:	80 93 59 1a 	sts	0x1A59, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	9c 01       	movw	r18, r24
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	8d 59       	subi	r24, 0x9D	; 157
    19d8:	95 4e       	sbci	r25, 0xE5	; 229
    19da:	b8 01       	movw	r22, r16
    19dc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
    19e0:	e0 91 5f 1a 	lds	r30, 0x1A5F
    19e4:	f0 91 60 1a 	lds	r31, 0x1A60
    19e8:	80 81       	ld	r24, Z
    19ea:	88 23       	and	r24, r24
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <vTaskIncrementTick+0x176>
    19ee:	bd cf       	rjmp	.-134    	; 0x196a <vTaskIncrementTick+0xf0>
    19f0:	b5 cf       	rjmp	.-150    	; 0x195c <vTaskIncrementTick+0xe2>
	}
	else
	{
		++uxMissedTicks;
    19f2:	80 91 56 1a 	lds	r24, 0x1A56
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	80 93 56 1a 	sts	0x1A56, r24

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    19fc:	0e 94 b3 03 	call	0x766	; 0x766 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    1a00:	80 91 56 1a 	lds	r24, 0x1A56
    1a04:	88 23       	and	r24, r24
    1a06:	11 f4       	brne	.+4      	; 0x1a0c <vTaskIncrementTick+0x192>
		{
			vApplicationTickHook();
    1a08:	0e 94 b3 03 	call	0x766	; 0x766 <vApplicationTickHook>
		}
	}
	#endif
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	1f 91       	pop	r17
    1a12:	0f 91       	pop	r16
    1a14:	08 95       	ret

00001a16 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	df 92       	push	r13
    1a1e:	ef 92       	push	r14
    1a20:	ff 92       	push	r15
    1a22:	0f 93       	push	r16
    1a24:	1f 93       	push	r17
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1a30:	80 91 57 1a 	lds	r24, 0x1A57
    1a34:	81 50       	subi	r24, 0x01	; 1
    1a36:	80 93 57 1a 	sts	0x1A57, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1a3a:	80 91 57 1a 	lds	r24, 0x1A57
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <xTaskResumeAll+0x2e>
    1a42:	69 c0       	rjmp	.+210    	; 0x1b16 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1a44:	80 91 5c 1a 	lds	r24, 0x1A5C
    1a48:	88 23       	and	r24, r24
    1a4a:	81 f5       	brne	.+96     	; 0x1aac <xTaskResumeAll+0x96>
    1a4c:	67 c0       	rjmp	.+206    	; 0x1b1c <xTaskResumeAll+0x106>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1a4e:	d6 01       	movw	r26, r12
    1a50:	ed 91       	ld	r30, X+
    1a52:	fc 91       	ld	r31, X
    1a54:	c6 81       	ldd	r28, Z+6	; 0x06
    1a56:	d7 81       	ldd	r29, Z+7	; 0x07
					uxListRemove( &( pxTCB->xEventListItem ) );
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0c 96       	adiw	r24, 0x0c	; 12
    1a5c:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
    1a60:	8e 01       	movw	r16, r28
    1a62:	0e 5f       	subi	r16, 0xFE	; 254
    1a64:	1f 4f       	sbci	r17, 0xFF	; 255
    1a66:	c8 01       	movw	r24, r16
    1a68:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1a6c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a6e:	90 91 59 1a 	lds	r25, 0x1A59
    1a72:	98 17       	cp	r25, r24
    1a74:	10 f4       	brcc	.+4      	; 0x1a7a <xTaskResumeAll+0x64>
    1a76:	80 93 59 1a 	sts	0x1A59, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9c 01       	movw	r18, r24
    1a7e:	22 0f       	add	r18, r18
    1a80:	33 1f       	adc	r19, r19
    1a82:	22 0f       	add	r18, r18
    1a84:	33 1f       	adc	r19, r19
    1a86:	22 0f       	add	r18, r18
    1a88:	33 1f       	adc	r19, r19
    1a8a:	82 0f       	add	r24, r18
    1a8c:	93 1f       	adc	r25, r19
    1a8e:	8d 59       	subi	r24, 0x9D	; 157
    1a90:	95 4e       	sbci	r25, 0xE5	; 229
    1a92:	b8 01       	movw	r22, r16
    1a94:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1a98:	e0 91 52 1a 	lds	r30, 0x1A52
    1a9c:	f0 91 53 1a 	lds	r31, 0x1A53
    1aa0:	9e 89       	ldd	r25, Y+22	; 0x16
    1aa2:	86 89       	ldd	r24, Z+22	; 0x16
    1aa4:	98 17       	cp	r25, r24
    1aa6:	88 f0       	brcs	.+34     	; 0x1aca <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    1aa8:	ba 2c       	mov	r11, r10
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <xTaskResumeAll+0xb4>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1aac:	bb 24       	eor	r11, r11
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1aae:	0f 2e       	mov	r0, r31
    1ab0:	f9 e9       	ldi	r31, 0x99	; 153
    1ab2:	ef 2e       	mov	r14, r31
    1ab4:	fa e1       	ldi	r31, 0x1A	; 26
    1ab6:	ff 2e       	mov	r15, r31
    1ab8:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1aba:	0f 2e       	mov	r0, r31
    1abc:	fe e9       	ldi	r31, 0x9E	; 158
    1abe:	cf 2e       	mov	r12, r31
    1ac0:	fa e1       	ldi	r31, 0x1A	; 26
    1ac2:	df 2e       	mov	r13, r31
    1ac4:	f0 2d       	mov	r31, r0

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldRequired = pdTRUE;
    1ac6:	aa 24       	eor	r10, r10
    1ac8:	a3 94       	inc	r10
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1aca:	f7 01       	movw	r30, r14
    1acc:	80 81       	ld	r24, Z
    1ace:	88 23       	and	r24, r24
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <xTaskResumeAll+0xbe>
    1ad2:	bd cf       	rjmp	.-134    	; 0x1a4e <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1ad4:	80 91 56 1a 	lds	r24, 0x1A56
    1ad8:	88 23       	and	r24, r24
    1ada:	81 f0       	breq	.+32     	; 0x1afc <xTaskResumeAll+0xe6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1adc:	80 91 56 1a 	lds	r24, 0x1A56
    1ae0:	88 23       	and	r24, r24
    1ae2:	99 f0       	breq	.+38     	; 0x1b0a <xTaskResumeAll+0xf4>
					{
						vTaskIncrementTick();
    1ae4:	0e 94 3d 0c 	call	0x187a	; 0x187a <vTaskIncrementTick>
						--uxMissedTicks;
    1ae8:	80 91 56 1a 	lds	r24, 0x1A56
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	80 93 56 1a 	sts	0x1A56, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1af2:	80 91 56 1a 	lds	r24, 0x1A56
    1af6:	88 23       	and	r24, r24
    1af8:	a9 f7       	brne	.-22     	; 0x1ae4 <xTaskResumeAll+0xce>
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <xTaskResumeAll+0xf4>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	bf 16       	cp	r11, r31
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <xTaskResumeAll+0xf4>
    1b02:	80 91 55 1a 	lds	r24, 0x1A55
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <xTaskResumeAll+0x104>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    1b0a:	10 92 55 1a 	sts	0x1A55, r1
					portYIELD_WITHIN_API();
    1b0e:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	03 c0       	rjmp	.+6      	; 0x1b1c <xTaskResumeAll+0x106>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	01 c0       	rjmp	.+2      	; 0x1b1c <xTaskResumeAll+0x106>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	bf 90       	pop	r11
    1b32:	af 90       	pop	r10
    1b34:	08 95       	ret

00001b36 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	b1 f0       	breq	.+44     	; 0x1b6c <vTaskDelay+0x36>
		{
			vTaskSuspendAll();
    1b40:	0e 94 25 0c 	call	0x184a	; 0x184a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1b44:	80 91 5a 1a 	lds	r24, 0x1A5A
    1b48:	90 91 5b 1a 	lds	r25, 0x1A5B
    1b4c:	c8 0f       	add	r28, r24
    1b4e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1b50:	80 91 52 1a 	lds	r24, 0x1A52
    1b54:	90 91 53 1a 	lds	r25, 0x1A53
    1b58:	02 96       	adiw	r24, 0x02	; 2
    1b5a:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1b5e:	ce 01       	movw	r24, r28
    1b60:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1b64:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f4       	brne	.+4      	; 0x1b70 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    1b6c:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
		}
	}
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	cf 93       	push	r28
    1b7c:	df 93       	push	r29
    1b7e:	8c 01       	movw	r16, r24
    1b80:	eb 01       	movw	r28, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1b82:	0e 94 25 0c 	call	0x184a	; 0x184a <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1b86:	f8 01       	movw	r30, r16
    1b88:	80 81       	ld	r24, Z
    1b8a:	91 81       	ldd	r25, Z+1	; 0x01
    1b8c:	c8 0f       	add	r28, r24
    1b8e:	d9 1f       	adc	r29, r25

			if( xTickCount < *pxPreviousWakeTime )
    1b90:	20 91 5a 1a 	lds	r18, 0x1A5A
    1b94:	30 91 5b 1a 	lds	r19, 0x1A5B
    1b98:	28 17       	cp	r18, r24
    1b9a:	39 07       	cpc	r19, r25
    1b9c:	68 f4       	brcc	.+26     	; 0x1bb8 <vTaskDelayUntil+0x42>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1b9e:	c8 17       	cp	r28, r24
    1ba0:	d9 07       	cpc	r29, r25
    1ba2:	50 f5       	brcc	.+84     	; 0x1bf8 <vTaskDelayUntil+0x82>
    1ba4:	80 91 5a 1a 	lds	r24, 0x1A5A
    1ba8:	90 91 5b 1a 	lds	r25, 0x1A5B
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1bac:	d1 83       	std	Z+1, r29	; 0x01
    1bae:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    1bb0:	8c 17       	cp	r24, r28
    1bb2:	9d 07       	cpc	r25, r29
    1bb4:	b0 f4       	brcc	.+44     	; 0x1be2 <vTaskDelayUntil+0x6c>
    1bb6:	0b c0       	rjmp	.+22     	; 0x1bce <vTaskDelayUntil+0x58>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1bb8:	c8 17       	cp	r28, r24
    1bba:	d9 07       	cpc	r29, r25
    1bbc:	c8 f0       	brcs	.+50     	; 0x1bf0 <vTaskDelayUntil+0x7a>
    1bbe:	80 91 5a 1a 	lds	r24, 0x1A5A
    1bc2:	90 91 5b 1a 	lds	r25, 0x1A5B
    1bc6:	8c 17       	cp	r24, r28
    1bc8:	9d 07       	cpc	r25, r29
    1bca:	90 f0       	brcs	.+36     	; 0x1bf0 <vTaskDelayUntil+0x7a>
    1bcc:	15 c0       	rjmp	.+42     	; 0x1bf8 <vTaskDelayUntil+0x82>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1bce:	80 91 52 1a 	lds	r24, 0x1A52
    1bd2:	90 91 53 1a 	lds	r25, 0x1A53
    1bd6:	02 96       	adiw	r24, 0x02	; 2
    1bd8:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1bdc:	ce 01       	movw	r24, r28
    1bde:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1be2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1be6:	88 23       	and	r24, r24
    1be8:	59 f4       	brne	.+22     	; 0x1c00 <vTaskDelayUntil+0x8a>
		{
			portYIELD_WITHIN_API();
    1bea:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <vTaskDelayUntil+0x8a>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	d1 83       	std	Z+1, r29	; 0x01
    1bf4:	c0 83       	st	Z, r28
    1bf6:	eb cf       	rjmp	.-42     	; 0x1bce <vTaskDelayUntil+0x58>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	d1 83       	std	Z+1, r29	; 0x01
    1bfc:	c0 83       	st	Z, r28
    1bfe:	f1 cf       	rjmp	.-30     	; 0x1be2 <vTaskDelayUntil+0x6c>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	1f 91       	pop	r17
    1c06:	0f 91       	pop	r16
    1c08:	08 95       	ret

00001c0a <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1c0a:	80 91 57 1a 	lds	r24, 0x1A57
    1c0e:	88 23       	and	r24, r24
    1c10:	99 f4       	brne	.+38     	; 0x1c38 <vTaskSwitchContext+0x2e>

//BB Commented out...
//		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c12:	80 91 59 1a 	lds	r24, 0x1A59
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	fc 01       	movw	r30, r24
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	ee 0f       	add	r30, r30
    1c20:	ff 1f       	adc	r31, r31
    1c22:	ee 0f       	add	r30, r30
    1c24:	ff 1f       	adc	r31, r31
    1c26:	8e 0f       	add	r24, r30
    1c28:	9f 1f       	adc	r25, r31
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	ed 59       	subi	r30, 0x9D	; 157
    1c2e:	f5 4e       	sbci	r31, 0xE5	; 229
    1c30:	80 81       	ld	r24, Z
    1c32:	88 23       	and	r24, r24
    1c34:	29 f0       	breq	.+10     	; 0x1c40 <vTaskSwitchContext+0x36>
    1c36:	1b c0       	rjmp	.+54     	; 0x1c6e <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	80 93 55 1a 	sts	0x1A55, r24
    1c3e:	08 95       	ret

//BB Commented out...
//		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c40:	80 91 59 1a 	lds	r24, 0x1A59
    1c44:	81 50       	subi	r24, 0x01	; 1
    1c46:	80 93 59 1a 	sts	0x1A59, r24
    1c4a:	80 91 59 1a 	lds	r24, 0x1A59
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	fc 01       	movw	r30, r24
    1c52:	ee 0f       	add	r30, r30
    1c54:	ff 1f       	adc	r31, r31
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	8e 0f       	add	r24, r30
    1c60:	9f 1f       	adc	r25, r31
    1c62:	fc 01       	movw	r30, r24
    1c64:	ed 59       	subi	r30, 0x9D	; 157
    1c66:	f5 4e       	sbci	r31, 0xE5	; 229
    1c68:	80 81       	ld	r24, Z
    1c6a:	88 23       	and	r24, r24
    1c6c:	49 f3       	breq	.-46     	; 0x1c40 <vTaskSwitchContext+0x36>
    1c6e:	80 91 59 1a 	lds	r24, 0x1A59
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	fc 01       	movw	r30, r24
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	e8 0f       	add	r30, r24
    1c84:	f9 1f       	adc	r31, r25
    1c86:	ed 59       	subi	r30, 0x9D	; 157
    1c88:	f5 4e       	sbci	r31, 0xE5	; 229
    1c8a:	a1 81       	ldd	r26, Z+1	; 0x01
    1c8c:	b2 81       	ldd	r27, Z+2	; 0x02
    1c8e:	12 96       	adiw	r26, 0x02	; 2
    1c90:	0d 90       	ld	r0, X+
    1c92:	bc 91       	ld	r27, X
    1c94:	a0 2d       	mov	r26, r0
    1c96:	b2 83       	std	Z+2, r27	; 0x02
    1c98:	a1 83       	std	Z+1, r26	; 0x01
    1c9a:	cf 01       	movw	r24, r30
    1c9c:	03 96       	adiw	r24, 0x03	; 3
    1c9e:	a8 17       	cp	r26, r24
    1ca0:	b9 07       	cpc	r27, r25
    1ca2:	31 f4       	brne	.+12     	; 0x1cb0 <vTaskSwitchContext+0xa6>
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	13 97       	sbiw	r26, 0x03	; 3
    1cac:	92 83       	std	Z+2, r25	; 0x02
    1cae:	81 83       	std	Z+1, r24	; 0x01
    1cb0:	01 80       	ldd	r0, Z+1	; 0x01
    1cb2:	f2 81       	ldd	r31, Z+2	; 0x02
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	86 81       	ldd	r24, Z+6	; 0x06
    1cb8:	97 81       	ldd	r25, Z+7	; 0x07
    1cba:	90 93 53 1a 	sts	0x1A53, r25
    1cbe:	80 93 52 1a 	sts	0x1A52, r24
    1cc2:	08 95       	ret

00001cc4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    1cc4:	ef 92       	push	r14
    1cc6:	ff 92       	push	r15
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	7c 01       	movw	r14, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    1cd8:	80 91 52 1a 	lds	r24, 0x1A52
    1cdc:	90 91 53 1a 	lds	r25, 0x1A53
    1ce0:	e8 16       	cp	r14, r24
    1ce2:	f9 06       	cpc	r15, r25
    1ce4:	21 f0       	breq	.+8      	; 0x1cee <vTaskSuspend+0x2a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1ce6:	e1 14       	cp	r14, r1
    1ce8:	f1 04       	cpc	r15, r1
    1cea:	41 f4       	brne	.+16     	; 0x1cfc <vTaskSuspend+0x38>
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <vTaskSuspend+0x2e>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
			{
				pxTaskToSuspend = NULL;
    1cee:	ee 24       	eor	r14, r14
    1cf0:	ff 24       	eor	r15, r15
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1cf2:	c0 91 52 1a 	lds	r28, 0x1A52
    1cf6:	d0 91 53 1a 	lds	r29, 0x1A53
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <vTaskSuspend+0x3a>
    1cfc:	e7 01       	movw	r28, r14

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0e 5f       	subi	r16, 0xFE	; 254
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	c8 01       	movw	r24, r16
    1d06:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1d0a:	8c 89       	ldd	r24, Y+20	; 0x14
    1d0c:	9d 89       	ldd	r25, Y+21	; 0x15
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	21 f0       	breq	.+8      	; 0x1d1a <vTaskSuspend+0x56>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
    1d12:	ce 01       	movw	r24, r28
    1d14:	0c 96       	adiw	r24, 0x0c	; 12
    1d16:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    1d1a:	82 ea       	ldi	r24, 0xA2	; 162
    1d1c:	9a e1       	ldi	r25, 0x1A	; 26
    1d1e:	b8 01       	movw	r22, r16
    1d20:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1d24:	0f 90       	pop	r0
    1d26:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    1d28:	e1 14       	cp	r14, r1
    1d2a:	f1 04       	cpc	r15, r1
    1d2c:	a1 f4       	brne	.+40     	; 0x1d56 <vTaskSuspend+0x92>
		{
			if( xSchedulerRunning != pdFALSE )
    1d2e:	80 91 58 1a 	lds	r24, 0x1A58
    1d32:	88 23       	and	r24, r24
    1d34:	19 f0       	breq	.+6      	; 0x1d3c <vTaskSuspend+0x78>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    1d36:	0e 94 47 05 	call	0xa8e	; 0xa8e <vPortYield>
    1d3a:	0d c0       	rjmp	.+26     	; 0x1d56 <vTaskSuspend+0x92>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1d3c:	90 91 a2 1a 	lds	r25, 0x1AA2
    1d40:	80 91 5c 1a 	lds	r24, 0x1A5C
    1d44:	98 17       	cp	r25, r24
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <vTaskSuspend+0x8e>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1d48:	10 92 53 1a 	sts	0x1A53, r1
    1d4c:	10 92 52 1a 	sts	0x1A52, r1
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vTaskSuspend+0x92>
				}
				else
				{
					vTaskSwitchContext();
    1d52:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <vTaskSwitchContext>
				}
			}
		}
	}
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	08 95       	ret

00001d64 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    1d6a:	60 91 52 1a 	lds	r22, 0x1A52
    1d6e:	70 91 53 1a 	lds	r23, 0x1A53
    1d72:	64 5f       	subi	r22, 0xF4	; 244
    1d74:	7f 4f       	sbci	r23, 0xFF	; 255
    1d76:	0e 94 0b 04 	call	0x816	; 0x816 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1d7a:	80 91 52 1a 	lds	r24, 0x1A52
    1d7e:	90 91 53 1a 	lds	r25, 0x1A53
    1d82:	02 96       	adiw	r24, 0x02	; 2
    1d84:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	cf 3f       	cpi	r28, 0xFF	; 255
    1d8c:	d8 07       	cpc	r29, r24
    1d8e:	59 f4       	brne	.+22     	; 0x1da6 <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1d90:	60 91 52 1a 	lds	r22, 0x1A52
    1d94:	70 91 53 1a 	lds	r23, 0x1A53
    1d98:	6e 5f       	subi	r22, 0xFE	; 254
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	82 ea       	ldi	r24, 0xA2	; 162
    1d9e:	9a e1       	ldi	r25, 0x1A	; 26
    1da0:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
    1da4:	08 c0       	rjmp	.+16     	; 0x1db6 <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    1da6:	80 91 5a 1a 	lds	r24, 0x1A5A
    1daa:	90 91 5b 1a 	lds	r25, 0x1A5B
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1dae:	8c 0f       	add	r24, r28
    1db0:	9d 1f       	adc	r25, r29
    1db2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	15 96       	adiw	r26, 0x05	; 5
    1dc8:	ed 91       	ld	r30, X+
    1dca:	fc 91       	ld	r31, X
    1dcc:	16 97       	sbiw	r26, 0x06	; 6
    1dce:	06 81       	ldd	r16, Z+6	; 0x06
    1dd0:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1dd2:	e8 01       	movw	r28, r16
    1dd4:	2c 96       	adiw	r28, 0x0c	; 12
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1ddc:	80 91 57 1a 	lds	r24, 0x1A57
    1de0:	88 23       	and	r24, r24
    1de2:	e9 f4       	brne	.+58     	; 0x1e1e <xTaskRemoveFromEventList+0x62>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1de4:	e8 01       	movw	r28, r16
    1de6:	22 96       	adiw	r28, 0x02	; 2
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    1dee:	f8 01       	movw	r30, r16
    1df0:	86 89       	ldd	r24, Z+22	; 0x16
    1df2:	90 91 59 1a 	lds	r25, 0x1A59
    1df6:	98 17       	cp	r25, r24
    1df8:	10 f4       	brcc	.+4      	; 0x1dfe <xTaskRemoveFromEventList+0x42>
    1dfa:	80 93 59 1a 	sts	0x1A59, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 01       	movw	r18, r24
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	82 0f       	add	r24, r18
    1e10:	93 1f       	adc	r25, r19
    1e12:	8d 59       	subi	r24, 0x9D	; 157
    1e14:	95 4e       	sbci	r25, 0xE5	; 229
    1e16:	be 01       	movw	r22, r28
    1e18:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1e1e:	89 e9       	ldi	r24, 0x99	; 153
    1e20:	9a e1       	ldi	r25, 0x1A	; 26
    1e22:	be 01       	movw	r22, r28
    1e24:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e28:	e0 91 52 1a 	lds	r30, 0x1A52
    1e2c:	f0 91 53 1a 	lds	r31, 0x1A53
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	d8 01       	movw	r26, r16
    1e34:	56 96       	adiw	r26, 0x16	; 22
    1e36:	2c 91       	ld	r18, X
    1e38:	56 97       	sbiw	r26, 0x16	; 22
    1e3a:	96 89       	ldd	r25, Z+22	; 0x16
    1e3c:	29 17       	cp	r18, r25
    1e3e:	08 f4       	brcc	.+2      	; 0x1e42 <xTaskRemoveFromEventList+0x86>
    1e40:	80 e0       	ldi	r24, 0x00	; 0
}
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    1e4c:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1e4e:	80 91 54 1a 	lds	r24, 0x1A54
    1e52:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    1e54:	80 91 5a 1a 	lds	r24, 0x1A5A
    1e58:	90 91 5b 1a 	lds	r25, 0x1A5B
    1e5c:	92 83       	std	Z+2, r25	; 0x02
    1e5e:	81 83       	std	Z+1, r24	; 0x01
}
    1e60:	08 95       	ret

00001e62 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1e62:	fc 01       	movw	r30, r24
    1e64:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1e6c:	4d 91       	ld	r20, X+
    1e6e:	5c 91       	ld	r21, X
    1e70:	11 97       	sbiw	r26, 0x01	; 1
    1e72:	6f ef       	ldi	r22, 0xFF	; 255
    1e74:	4f 3f       	cpi	r20, 0xFF	; 255
    1e76:	56 07       	cpc	r21, r22
    1e78:	51 f1       	breq	.+84     	; 0x1ece <xTaskCheckForTimeOut+0x6c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1e7a:	80 91 54 1a 	lds	r24, 0x1A54
    1e7e:	90 81       	ld	r25, Z
    1e80:	98 17       	cp	r25, r24
    1e82:	49 f0       	breq	.+18     	; 0x1e96 <xTaskCheckForTimeOut+0x34>
    1e84:	20 91 5a 1a 	lds	r18, 0x1A5A
    1e88:	30 91 5b 1a 	lds	r19, 0x1A5B
    1e8c:	81 81       	ldd	r24, Z+1	; 0x01
    1e8e:	92 81       	ldd	r25, Z+2	; 0x02
    1e90:	28 17       	cp	r18, r24
    1e92:	39 07       	cpc	r19, r25
    1e94:	f0 f4       	brcc	.+60     	; 0x1ed2 <xTaskCheckForTimeOut+0x70>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1e96:	80 91 5a 1a 	lds	r24, 0x1A5A
    1e9a:	90 91 5b 1a 	lds	r25, 0x1A5B
    1e9e:	21 81       	ldd	r18, Z+1	; 0x01
    1ea0:	32 81       	ldd	r19, Z+2	; 0x02
    1ea2:	82 1b       	sub	r24, r18
    1ea4:	93 0b       	sbc	r25, r19
    1ea6:	84 17       	cp	r24, r20
    1ea8:	95 07       	cpc	r25, r21
    1eaa:	a8 f4       	brcc	.+42     	; 0x1ed6 <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    1eac:	80 91 5a 1a 	lds	r24, 0x1A5A
    1eb0:	90 91 5b 1a 	lds	r25, 0x1A5B
    1eb4:	b9 01       	movw	r22, r18
    1eb6:	68 1b       	sub	r22, r24
    1eb8:	79 0b       	sbc	r23, r25
    1eba:	cb 01       	movw	r24, r22
    1ebc:	84 0f       	add	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	8d 93       	st	X+, r24
    1ec2:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    1ec4:	cf 01       	movw	r24, r30
    1ec6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <xTaskCheckForTimeOut+0x76>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <xTaskCheckForTimeOut+0x76>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <xTaskCheckForTimeOut+0x76>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1ed8:	0f 90       	pop	r0
    1eda:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1edc:	08 95       	ret

00001ede <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	80 93 55 1a 	sts	0x1A55, r24
}
    1ee4:	08 95       	ret

00001ee6 <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	29 f4       	brne	.+10     	; 0x1ef4 <uxTaskGetStackHighWaterMark+0xe>
    1eea:	e0 91 52 1a 	lds	r30, 0x1A52
    1eee:	f0 91 53 1a 	lds	r31, 0x1A53
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <uxTaskGetStackHighWaterMark+0x10>
    1ef4:	fc 01       	movw	r30, r24

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    1ef6:	07 88       	ldd	r0, Z+23	; 0x17
    1ef8:	f0 8d       	ldd	r31, Z+24	; 0x18
    1efa:	e0 2d       	mov	r30, r0

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1efc:	80 81       	ld	r24, Z
    1efe:	85 3a       	cpi	r24, 0xA5	; 165
    1f00:	41 f4       	brne	.+16     	; 0x1f12 <uxTaskGetStackHighWaterMark+0x2c>
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
    1f02:	31 96       	adiw	r30, 0x01	; 1

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    1f08:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1f0a:	21 91       	ld	r18, Z+
    1f0c:	25 3a       	cpi	r18, 0xA5	; 165
    1f0e:	e1 f3       	breq	.-8      	; 0x1f08 <uxTaskGetStackHighWaterMark+0x22>
    1f10:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    1f16:	08 95       	ret

00001f18 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1f18:	80 91 52 1a 	lds	r24, 0x1A52
    1f1c:	90 91 53 1a 	lds	r25, 0x1A53

		return xReturn;
	}
    1f20:	08 95       	ret

00001f22 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1f22:	0f 93       	push	r16
    1f24:	1f 93       	push	r17
    1f26:	cf 93       	push	r28
    1f28:	df 93       	push	r29
    1f2a:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <vTaskPriorityInherit+0x10>
    1f30:	4d c0       	rjmp	.+154    	; 0x1fcc <vTaskPriorityInherit+0xaa>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1f32:	8e 89       	ldd	r24, Y+22	; 0x16
    1f34:	e0 91 52 1a 	lds	r30, 0x1A52
    1f38:	f0 91 53 1a 	lds	r31, 0x1A53
    1f3c:	96 89       	ldd	r25, Z+22	; 0x16
    1f3e:	89 17       	cp	r24, r25
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <vTaskPriorityInherit+0x22>
    1f42:	44 c0       	rjmp	.+136    	; 0x1fcc <vTaskPriorityInherit+0xaa>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1f44:	e0 91 52 1a 	lds	r30, 0x1A52
    1f48:	f0 91 53 1a 	lds	r31, 0x1A53
    1f4c:	96 89       	ldd	r25, Z+22	; 0x16
    1f4e:	24 e0       	ldi	r18, 0x04	; 4
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	29 1b       	sub	r18, r25
    1f54:	31 09       	sbc	r19, r1
    1f56:	3d 87       	std	Y+13, r19	; 0x0d
    1f58:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 01       	movw	r18, r24
    1f5e:	22 0f       	add	r18, r18
    1f60:	33 1f       	adc	r19, r19
    1f62:	22 0f       	add	r18, r18
    1f64:	33 1f       	adc	r19, r19
    1f66:	22 0f       	add	r18, r18
    1f68:	33 1f       	adc	r19, r19
    1f6a:	82 0f       	add	r24, r18
    1f6c:	93 1f       	adc	r25, r19
    1f6e:	8d 59       	subi	r24, 0x9D	; 157
    1f70:	95 4e       	sbci	r25, 0xE5	; 229
    1f72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f74:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f76:	28 17       	cp	r18, r24
    1f78:	39 07       	cpc	r19, r25
    1f7a:	11 f5       	brne	.+68     	; 0x1fc0 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	0e 5f       	subi	r16, 0xFE	; 254
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	c8 01       	movw	r24, r16
    1f84:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1f88:	e0 91 52 1a 	lds	r30, 0x1A52
    1f8c:	f0 91 53 1a 	lds	r31, 0x1A53
    1f90:	86 89       	ldd	r24, Z+22	; 0x16
    1f92:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    1f94:	90 91 59 1a 	lds	r25, 0x1A59
    1f98:	98 17       	cp	r25, r24
    1f9a:	10 f4       	brcc	.+4      	; 0x1fa0 <vTaskPriorityInherit+0x7e>
    1f9c:	80 93 59 1a 	sts	0x1A59, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	22 0f       	add	r18, r18
    1fa6:	33 1f       	adc	r19, r19
    1fa8:	22 0f       	add	r18, r18
    1faa:	33 1f       	adc	r19, r19
    1fac:	22 0f       	add	r18, r18
    1fae:	33 1f       	adc	r19, r19
    1fb0:	82 0f       	add	r24, r18
    1fb2:	93 1f       	adc	r25, r19
    1fb4:	8d 59       	subi	r24, 0x9D	; 157
    1fb6:	95 4e       	sbci	r25, 0xE5	; 229
    1fb8:	b8 01       	movw	r22, r16
    1fba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
    1fbe:	06 c0       	rjmp	.+12     	; 0x1fcc <vTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1fc0:	e0 91 52 1a 	lds	r30, 0x1A52
    1fc4:	f0 91 53 1a 	lds	r31, 0x1A53
    1fc8:	86 89       	ldd	r24, Z+22	; 0x16
    1fca:	8e 8b       	std	Y+22, r24	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	49 f1       	breq	.+82     	; 0x2036 <vTaskPriorityDisinherit+0x60>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1fe4:	9e 89       	ldd	r25, Y+22	; 0x16
    1fe6:	89 a5       	lds	r24, 0x69
    1fe8:	98 17       	cp	r25, r24
    1fea:	29 f1       	breq	.+74     	; 0x2036 <vTaskPriorityDisinherit+0x60>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1fec:	8e 01       	movw	r16, r28
    1fee:	0e 5f       	subi	r16, 0xFE	; 254
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	c8 01       	movw	r24, r16
    1ff4:	0e 94 48 04 	call	0x890	; 0x890 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    1ff8:	49 a5       	lds	r20, 0x69
    1ffa:	4e 8b       	std	Y+22, r20	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    1ffc:	24 2f       	mov	r18, r20
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	84 e0       	ldi	r24, 0x04	; 4
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	82 1b       	sub	r24, r18
    2006:	93 0b       	sbc	r25, r19
    2008:	9d 87       	std	Y+13, r25	; 0x0d
    200a:	8c 87       	std	Y+12, r24	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    200c:	80 91 59 1a 	lds	r24, 0x1A59
    2010:	84 17       	cp	r24, r20
    2012:	10 f4       	brcc	.+4      	; 0x2018 <vTaskPriorityDisinherit+0x42>
    2014:	40 93 59 1a 	sts	0x1A59, r20
    2018:	c9 01       	movw	r24, r18
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	28 0f       	add	r18, r24
    2028:	39 1f       	adc	r19, r25
    202a:	c9 01       	movw	r24, r18
    202c:	8d 59       	subi	r24, 0x9D	; 157
    202e:	95 4e       	sbci	r25, 0xE5	; 229
    2030:	b8 01       	movw	r22, r16
    2032:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <vListInsertEnd>
			}
		}
	}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <__udivmodqi4>:
    2040:	99 1b       	sub	r25, r25
    2042:	79 e0       	ldi	r23, 0x09	; 9
    2044:	04 c0       	rjmp	.+8      	; 0x204e <__udivmodqi4_ep>

00002046 <__udivmodqi4_loop>:
    2046:	99 1f       	adc	r25, r25
    2048:	96 17       	cp	r25, r22
    204a:	08 f0       	brcs	.+2      	; 0x204e <__udivmodqi4_ep>
    204c:	96 1b       	sub	r25, r22

0000204e <__udivmodqi4_ep>:
    204e:	88 1f       	adc	r24, r24
    2050:	7a 95       	dec	r23
    2052:	c9 f7       	brne	.-14     	; 0x2046 <__udivmodqi4_loop>
    2054:	80 95       	com	r24
    2056:	08 95       	ret

00002058 <memcpy>:
    2058:	fb 01       	movw	r30, r22
    205a:	dc 01       	movw	r26, r24
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <memcpy+0xa>
    205e:	01 90       	ld	r0, Z+
    2060:	0d 92       	st	X+, r0
    2062:	41 50       	subi	r20, 0x01	; 1
    2064:	50 40       	sbci	r21, 0x00	; 0
    2066:	d8 f7       	brcc	.-10     	; 0x205e <memcpy+0x6>
    2068:	08 95       	ret

0000206a <memset>:
    206a:	dc 01       	movw	r26, r24
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <memset+0x6>
    206e:	6d 93       	st	X+, r22
    2070:	41 50       	subi	r20, 0x01	; 1
    2072:	50 40       	sbci	r21, 0x00	; 0
    2074:	e0 f7       	brcc	.-8      	; 0x206e <memset+0x4>
    2076:	08 95       	ret

00002078 <strncpy>:
    2078:	fb 01       	movw	r30, r22
    207a:	dc 01       	movw	r26, r24
    207c:	41 50       	subi	r20, 0x01	; 1
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	48 f0       	brcs	.+18     	; 0x2094 <strncpy+0x1c>
    2082:	01 90       	ld	r0, Z+
    2084:	0d 92       	st	X+, r0
    2086:	00 20       	and	r0, r0
    2088:	c9 f7       	brne	.-14     	; 0x207c <strncpy+0x4>
    208a:	01 c0       	rjmp	.+2      	; 0x208e <strncpy+0x16>
    208c:	1d 92       	st	X+, r1
    208e:	41 50       	subi	r20, 0x01	; 1
    2090:	50 40       	sbci	r21, 0x00	; 0
    2092:	e0 f7       	brcc	.-8      	; 0x208c <strncpy+0x14>
    2094:	08 95       	ret

00002096 <_exit>:
    2096:	f8 94       	cli

00002098 <__stop_program>:
    2098:	ff cf       	rjmp	.-2      	; 0x2098 <__stop_program>
