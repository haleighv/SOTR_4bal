
Lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000020c2  00002156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000189b  00800210  00800210  00002166  2**0
                  ALLOC
  3 .stab         000008a0  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ac  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000288b  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b47  00000000  00000000  000055e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f3  00000000  00000000  0000612a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000958  00000000  00000000  00007220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001076  00000000  00000000  00007b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266f  00000000  00000000  00008bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b25d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <__vector_13>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_32>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 ec       	ldi	r30, 0xC2	; 194
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	1a e1       	ldi	r17, 0x1A	; 26
     112:	a0 e1       	ldi	r26, 0x10	; 16
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	ab 3a       	cpi	r26, 0xAB	; 171
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 40 03 	call	0x680	; 0x680 <main>
     124:	0c 94 5f 10 	jmp	0x20be	; 0x20be <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <vIO_init>:
* return: void
*--------------------------------------------------------*/
void vIO_init(void)
{
	// Set PortA (LEDs) as all outputs
	DDRA = 0xFF;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	81 b9       	out	0x01, r24	; 1
	// Turn LEDs off
	PORTA = 0xFF;
     130:	82 b9       	out	0x02, r24	; 2
}
     132:	08 95       	ret

00000134 <initialize_timer2>:
*
* return: void
*--------------------------------------------------------*/
void initialize_timer2()
{
	TIMSK2 = (1 << OCIE2A);//Set interrupt mask for OC2A
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = ((1 << COM2A1) | (1 << COM2A0)|(1<<WGM21));//Set OC2A on Compare Match
     13a:	82 ec       	ldi	r24, 0xC2	; 194
     13c:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = ((1 << CS22) |(1 << CS21) | (1 << CS20));//Set timer2 to CTC, prescaler of 1024
     140:	87 e0       	ldi	r24, 0x07	; 7
     142:	80 93 b1 00 	sts	0x00B1, r24
	OCR2A  = TIMER2_10Hz; //initialize ocra2 to value corresponding to 10Hz interrupt generation
     146:	8d e0       	ldi	r24, 0x0D	; 13
     148:	80 93 b3 00 	sts	0x00B3, r24
}
     14c:	08 95       	ret

0000014e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     14e:	af 92       	push	r10
     150:	bf 92       	push	r11
     152:	cf 92       	push	r12
     154:	df 92       	push	r13
     156:	ef 92       	push	r14
     158:	ff 92       	push	r15
     15a:	0f 93       	push	r16
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	6c 01       	movw	r12, r24
     164:	e6 2e       	mov	r14, r22
     166:	f4 2e       	mov	r15, r20
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     168:	8a e1       	ldi	r24, 0x1A	; 26
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     170:	8c 01       	movw	r16, r24
	if( pxCoRoutine )
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	09 f4       	brne	.+2      	; 0x178 <xCoRoutineCreate+0x2a>
     176:	62 c0       	rjmp	.+196    	; 0x23c <xCoRoutineCreate+0xee>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     178:	80 91 10 02 	lds	r24, 0x0210
     17c:	90 91 11 02 	lds	r25, 0x0211
     180:	00 97       	sbiw	r24, 0x00	; 0
     182:	39 f5       	brne	.+78     	; 0x1d2 <xCoRoutineCreate+0x84>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     184:	10 93 11 02 	sts	0x0211, r17
     188:	00 93 10 02 	sts	0x0210, r16
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
     18c:	c3 e1       	ldi	r28, 0x13	; 19
     18e:	d2 e0       	ldi	r29, 0x02	; 2
     190:	ce 01       	movw	r24, r28
     192:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
     196:	ce 01       	movw	r24, r28
     198:	09 96       	adiw	r24, 0x09	; 9
     19a:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
     19e:	c5 e2       	ldi	r28, 0x25	; 37
     1a0:	d2 e0       	ldi	r29, 0x02	; 2
     1a2:	ce 01       	movw	r24, r28
     1a4:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
     1a8:	0f 2e       	mov	r0, r31
     1aa:	fe e2       	ldi	r31, 0x2E	; 46
     1ac:	af 2e       	mov	r10, r31
     1ae:	f2 e0       	ldi	r31, 0x02	; 2
     1b0:	bf 2e       	mov	r11, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	c5 01       	movw	r24, r10
     1b6:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
     1ba:	87 e3       	ldi	r24, 0x37	; 55
     1bc:	92 e0       	ldi	r25, 0x02	; 2
     1be:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
     1c2:	d0 93 41 02 	sts	0x0241, r29
     1c6:	c0 93 40 02 	sts	0x0240, r28
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
     1ca:	b0 92 43 02 	sts	0x0243, r11
     1ce:	a0 92 42 02 	sts	0x0242, r10
     1d2:	ce 2d       	mov	r28, r14
     1d4:	e1 10       	cpse	r14, r1
     1d6:	c1 e0       	ldi	r28, 0x01	; 1
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     1d8:	f8 01       	movw	r30, r16
     1da:	11 8e       	std	Z+25, r1	; 0x19
     1dc:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     1de:	c6 8b       	std	Z+22, r28	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     1e0:	f7 8a       	std	Z+23, r15	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     1e2:	c1 92       	st	Z+, r12
     1e4:	d1 92       	st	Z+, r13
     1e6:	7f 01       	movw	r14, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     1e8:	cf 01       	movw	r24, r30
     1ea:	0e 94 c2 03 	call	0x784	; 0x784 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     1ee:	c8 01       	movw	r24, r16
     1f0:	0c 96       	adiw	r24, 0x0c	; 12
     1f2:	0e 94 c2 03 	call	0x784	; 0x784 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     1f6:	f8 01       	movw	r30, r16
     1f8:	11 87       	std	Z+9, r17	; 0x09
     1fa:	00 87       	std	Z+8, r16	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     1fc:	13 8b       	std	Z+19, r17	; 0x13
     1fe:	02 8b       	std	Z+18, r16	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     200:	84 e0       	ldi	r24, 0x04	; 4
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8c 1b       	sub	r24, r28
     206:	91 09       	sbc	r25, r1
     208:	95 87       	std	Z+13, r25	; 0x0d
     20a:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     20c:	86 89       	ldd	r24, Z+22	; 0x16
     20e:	90 91 12 02 	lds	r25, 0x0212
     212:	98 17       	cp	r25, r24
     214:	10 f4       	brcc	.+4      	; 0x21a <xCoRoutineCreate+0xcc>
     216:	80 93 12 02 	sts	0x0212, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	9c 01       	movw	r18, r24
     21e:	22 0f       	add	r18, r18
     220:	33 1f       	adc	r19, r19
     222:	22 0f       	add	r18, r18
     224:	33 1f       	adc	r19, r19
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	82 0f       	add	r24, r18
     22c:	93 1f       	adc	r25, r19
     22e:	8d 5e       	subi	r24, 0xED	; 237
     230:	9d 4f       	sbci	r25, 0xFD	; 253
     232:	b7 01       	movw	r22, r14
     234:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

		xReturn = pdPASS;
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <xCoRoutineCreate+0xf0>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     23c:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	return xReturn;	
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	ff 90       	pop	r15
     248:	ef 90       	pop	r14
     24a:	df 90       	pop	r13
     24c:	cf 90       	pop	r12
     24e:	bf 90       	pop	r11
     250:	af 90       	pop	r10
     252:	08 95       	ret

00000254 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	8b 01       	movw	r16, r22
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     25e:	c0 91 44 02 	lds	r28, 0x0244
     262:	d0 91 45 02 	lds	r29, 0x0245
     266:	c8 0f       	add	r28, r24
     268:	d9 1f       	adc	r29, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     26a:	80 91 10 02 	lds	r24, 0x0210
     26e:	90 91 11 02 	lds	r25, 0x0211
     272:	02 96       	adiw	r24, 0x02	; 2
     274:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     278:	e0 91 10 02 	lds	r30, 0x0210
     27c:	f0 91 11 02 	lds	r31, 0x0211
     280:	d3 83       	std	Z+3, r29	; 0x03
     282:	c2 83       	std	Z+2, r28	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     284:	80 91 44 02 	lds	r24, 0x0244
     288:	90 91 45 02 	lds	r25, 0x0245
     28c:	c8 17       	cp	r28, r24
     28e:	d9 07       	cpc	r29, r25
     290:	50 f4       	brcc	.+20     	; 0x2a6 <vCoRoutineAddToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     292:	bf 01       	movw	r22, r30
     294:	6e 5f       	subi	r22, 0xFE	; 254
     296:	7f 4f       	sbci	r23, 0xFF	; 255
     298:	80 91 42 02 	lds	r24, 0x0242
     29c:	90 91 43 02 	lds	r25, 0x0243
     2a0:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>
     2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <vCoRoutineAddToDelayedList+0x64>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     2a6:	bf 01       	movw	r22, r30
     2a8:	6e 5f       	subi	r22, 0xFE	; 254
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	80 91 40 02 	lds	r24, 0x0240
     2b0:	90 91 41 02 	lds	r25, 0x0241
     2b4:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>
	}

	if( pxEventList )
     2b8:	01 15       	cp	r16, r1
     2ba:	11 05       	cpc	r17, r1
     2bc:	49 f0       	breq	.+18     	; 0x2d0 <vCoRoutineAddToDelayedList+0x7c>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     2be:	60 91 10 02 	lds	r22, 0x0210
     2c2:	70 91 11 02 	lds	r23, 0x0211
     2c6:	64 5f       	subi	r22, 0xF4	; 244
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	c8 01       	movw	r24, r16
     2cc:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>
	}
}
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     2ea:	80 91 37 02 	lds	r24, 0x0237
     2ee:	88 23       	and	r24, r24
     2f0:	b9 f1       	breq	.+110    	; 0x360 <vCoRoutineSchedule+0x86>
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     2f2:	0f 2e       	mov	r0, r31
     2f4:	fc e3       	ldi	r31, 0x3C	; 60
     2f6:	ef 2e       	mov	r14, r31
     2f8:	f2 e0       	ldi	r31, 0x02	; 2
     2fa:	ff 2e       	mov	r15, r31
     2fc:	f0 2d       	mov	r31, r0
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     2fe:	0f 2e       	mov	r0, r31
     300:	f7 e3       	ldi	r31, 0x37	; 55
     302:	cf 2e       	mov	r12, r31
     304:	f2 e0       	ldi	r31, 0x02	; 2
     306:	df 2e       	mov	r13, r31
     308:	f0 2d       	mov	r31, r0
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     30a:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     30c:	d7 01       	movw	r26, r14
     30e:	ed 91       	ld	r30, X+
     310:	fc 91       	ld	r31, X
     312:	c6 81       	ldd	r28, Z+6	; 0x06
     314:	d7 81       	ldd	r29, Z+7	; 0x07
			uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     316:	ce 01       	movw	r24, r28
     318:	0c 96       	adiw	r24, 0x0c	; 12
     31a:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
     31e:	78 94       	sei

		uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     320:	8e 01       	movw	r16, r28
     322:	0e 5f       	subi	r16, 0xFE	; 254
     324:	1f 4f       	sbci	r17, 0xFF	; 255
     326:	c8 01       	movw	r24, r16
     328:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	90 91 12 02 	lds	r25, 0x0212
     332:	98 17       	cp	r25, r24
     334:	10 f4       	brcc	.+4      	; 0x33a <vCoRoutineSchedule+0x60>
     336:	80 93 12 02 	sts	0x0212, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9c 01       	movw	r18, r24
     33e:	22 0f       	add	r18, r18
     340:	33 1f       	adc	r19, r19
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	8d 5e       	subi	r24, 0xED	; 237
     350:	9d 4f       	sbci	r25, 0xFD	; 253
     352:	b8 01       	movw	r22, r16
     354:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     358:	f6 01       	movw	r30, r12
     35a:	80 81       	ld	r24, Z
     35c:	88 23       	and	r24, r24
     35e:	a9 f6       	brne	.-86     	; 0x30a <vCoRoutineSchedule+0x30>

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     360:	0e 94 3f 0c 	call	0x187e	; 0x187e <xTaskGetTickCount>
     364:	20 91 46 02 	lds	r18, 0x0246
     368:	30 91 47 02 	lds	r19, 0x0247
     36c:	82 1b       	sub	r24, r18
     36e:	93 0b       	sbc	r25, r19
     370:	90 93 49 02 	sts	0x0249, r25
     374:	80 93 48 02 	sts	0x0248, r24
     378:	74 c0       	rjmp	.+232    	; 0x462 <vCoRoutineSchedule+0x188>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
     37a:	20 91 44 02 	lds	r18, 0x0244
     37e:	30 91 45 02 	lds	r19, 0x0245
     382:	2f 5f       	subi	r18, 0xFF	; 255
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	30 93 45 02 	sts	0x0245, r19
     38a:	20 93 44 02 	sts	0x0244, r18
		xPassedTicks--;
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	90 93 49 02 	sts	0x0249, r25
     394:	80 93 48 02 	sts	0x0248, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     398:	21 15       	cp	r18, r1
     39a:	31 05       	cpc	r19, r1
     39c:	81 f4       	brne	.+32     	; 0x3be <vCoRoutineSchedule+0xe4>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     39e:	80 91 40 02 	lds	r24, 0x0240
     3a2:	90 91 41 02 	lds	r25, 0x0241
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     3a6:	20 91 42 02 	lds	r18, 0x0242
     3aa:	30 91 43 02 	lds	r19, 0x0243
     3ae:	30 93 41 02 	sts	0x0241, r19
     3b2:	20 93 40 02 	sts	0x0240, r18
			pxOverflowDelayedCoRoutineList = pxTemp;
     3b6:	90 93 43 02 	sts	0x0243, r25
     3ba:	80 93 42 02 	sts	0x0242, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     3be:	e0 91 40 02 	lds	r30, 0x0240
     3c2:	f0 91 41 02 	lds	r31, 0x0241
     3c6:	80 81       	ld	r24, Z
     3c8:	88 23       	and	r24, r24
     3ca:	09 f4       	brne	.+2      	; 0x3ce <vCoRoutineSchedule+0xf4>
     3cc:	4a c0       	rjmp	.+148    	; 0x462 <vCoRoutineSchedule+0x188>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     3ce:	05 80       	ldd	r0, Z+5	; 0x05
     3d0:	f6 81       	ldd	r31, Z+6	; 0x06
     3d2:	e0 2d       	mov	r30, r0
     3d4:	c6 81       	ldd	r28, Z+6	; 0x06
     3d6:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     3d8:	2a 81       	ldd	r18, Y+2	; 0x02
     3da:	3b 81       	ldd	r19, Y+3	; 0x03
     3dc:	80 91 44 02 	lds	r24, 0x0244
     3e0:	90 91 45 02 	lds	r25, 0x0245
     3e4:	82 17       	cp	r24, r18
     3e6:	93 07       	cpc	r25, r19
     3e8:	78 f4       	brcc	.+30     	; 0x408 <vCoRoutineSchedule+0x12e>
     3ea:	3b c0       	rjmp	.+118    	; 0x462 <vCoRoutineSchedule+0x188>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     3ec:	05 80       	ldd	r0, Z+5	; 0x05
     3ee:	f6 81       	ldd	r31, Z+6	; 0x06
     3f0:	e0 2d       	mov	r30, r0
     3f2:	c6 81       	ldd	r28, Z+6	; 0x06
     3f4:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
     3f6:	2a 81       	ldd	r18, Y+2	; 0x02
     3f8:	3b 81       	ldd	r19, Y+3	; 0x03
     3fa:	80 91 44 02 	lds	r24, 0x0244
     3fe:	90 91 45 02 	lds	r25, 0x0245
     402:	82 17       	cp	r24, r18
     404:	93 07       	cpc	r25, r19
     406:	68 f1       	brcs	.+90     	; 0x462 <vCoRoutineSchedule+0x188>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
     408:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				uxListRemove( &( pxCRCB->xGenericListItem ) );											
     40a:	8e 01       	movw	r16, r28
     40c:	0e 5f       	subi	r16, 0xFE	; 254
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	c8 01       	movw	r24, r16
     412:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
     416:	8c 89       	ldd	r24, Y+20	; 0x14
     418:	9d 89       	ldd	r25, Y+21	; 0x15
     41a:	00 97       	sbiw	r24, 0x00	; 0
     41c:	21 f0       	breq	.+8      	; 0x426 <vCoRoutineSchedule+0x14c>
				{															
					uxListRemove( &( pxCRCB->xEventListItem ) );											
     41e:	ce 01       	movw	r24, r28
     420:	0c 96       	adiw	r24, 0x0c	; 12
     422:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     426:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
     428:	8e 89       	ldd	r24, Y+22	; 0x16
     42a:	90 91 12 02 	lds	r25, 0x0212
     42e:	98 17       	cp	r25, r24
     430:	10 f4       	brcc	.+4      	; 0x436 <vCoRoutineSchedule+0x15c>
     432:	80 93 12 02 	sts	0x0212, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	9c 01       	movw	r18, r24
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	22 0f       	add	r18, r18
     440:	33 1f       	adc	r19, r19
     442:	22 0f       	add	r18, r18
     444:	33 1f       	adc	r19, r19
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	8d 5e       	subi	r24, 0xED	; 237
     44c:	9d 4f       	sbci	r25, 0xFD	; 253
     44e:	b8 01       	movw	r22, r16
     450:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     454:	e0 91 40 02 	lds	r30, 0x0240
     458:	f0 91 41 02 	lds	r31, 0x0241
     45c:	80 81       	ld	r24, Z
     45e:	88 23       	and	r24, r24
     460:	29 f6       	brne	.-118    	; 0x3ec <vCoRoutineSchedule+0x112>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     462:	80 91 48 02 	lds	r24, 0x0248
     466:	90 91 49 02 	lds	r25, 0x0249
     46a:	00 97       	sbiw	r24, 0x00	; 0
     46c:	09 f0       	breq	.+2      	; 0x470 <vCoRoutineSchedule+0x196>
     46e:	85 cf       	rjmp	.-246    	; 0x37a <vCoRoutineSchedule+0xa0>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
     470:	80 91 44 02 	lds	r24, 0x0244
     474:	90 91 45 02 	lds	r25, 0x0245
     478:	90 93 47 02 	sts	0x0247, r25
     47c:	80 93 46 02 	sts	0x0246, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     480:	20 91 12 02 	lds	r18, 0x0212
     484:	82 2f       	mov	r24, r18
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	fc 01       	movw	r30, r24
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	e8 0f       	add	r30, r24
     498:	f9 1f       	adc	r31, r25
     49a:	ed 5e       	subi	r30, 0xED	; 237
     49c:	fd 4f       	sbci	r31, 0xFD	; 253
     49e:	30 81       	ld	r19, Z
     4a0:	33 23       	and	r19, r19
     4a2:	d9 f4       	brne	.+54     	; 0x4da <vCoRoutineSchedule+0x200>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     4a4:	22 23       	and	r18, r18
     4a6:	31 f4       	brne	.+12     	; 0x4b4 <vCoRoutineSchedule+0x1da>
     4a8:	47 c0       	rjmp	.+142    	; 0x538 <vCoRoutineSchedule+0x25e>
     4aa:	22 23       	and	r18, r18
     4ac:	19 f4       	brne	.+6      	; 0x4b4 <vCoRoutineSchedule+0x1da>
     4ae:	20 93 12 02 	sts	0x0212, r18
     4b2:	42 c0       	rjmp	.+132    	; 0x538 <vCoRoutineSchedule+0x25e>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
     4b4:	21 50       	subi	r18, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     4b6:	82 2f       	mov	r24, r18
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	ee 0f       	add	r30, r30
     4be:	ff 1f       	adc	r31, r31
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	ed 5e       	subi	r30, 0xED	; 237
     4ce:	fd 4f       	sbci	r31, 0xFD	; 253
     4d0:	30 81       	ld	r19, Z
     4d2:	33 23       	and	r19, r19
     4d4:	51 f3       	breq	.-44     	; 0x4aa <vCoRoutineSchedule+0x1d0>
     4d6:	20 93 12 02 	sts	0x0212, r18
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     4da:	fc 01       	movw	r30, r24
     4dc:	ee 0f       	add	r30, r30
     4de:	ff 1f       	adc	r31, r31
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	ee 0f       	add	r30, r30
     4e6:	ff 1f       	adc	r31, r31
     4e8:	8e 0f       	add	r24, r30
     4ea:	9f 1f       	adc	r25, r31
     4ec:	fc 01       	movw	r30, r24
     4ee:	ed 5e       	subi	r30, 0xED	; 237
     4f0:	fd 4f       	sbci	r31, 0xFD	; 253
     4f2:	a1 81       	ldd	r26, Z+1	; 0x01
     4f4:	b2 81       	ldd	r27, Z+2	; 0x02
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	0d 90       	ld	r0, X+
     4fa:	bc 91       	ld	r27, X
     4fc:	a0 2d       	mov	r26, r0
     4fe:	b2 83       	std	Z+2, r27	; 0x02
     500:	a1 83       	std	Z+1, r26	; 0x01
     502:	cf 01       	movw	r24, r30
     504:	03 96       	adiw	r24, 0x03	; 3
     506:	a8 17       	cp	r26, r24
     508:	b9 07       	cpc	r27, r25
     50a:	31 f4       	brne	.+12     	; 0x518 <vCoRoutineSchedule+0x23e>
     50c:	12 96       	adiw	r26, 0x02	; 2
     50e:	8d 91       	ld	r24, X+
     510:	9c 91       	ld	r25, X
     512:	13 97       	sbiw	r26, 0x03	; 3
     514:	92 83       	std	Z+2, r25	; 0x02
     516:	81 83       	std	Z+1, r24	; 0x01
     518:	01 80       	ldd	r0, Z+1	; 0x01
     51a:	f2 81       	ldd	r31, Z+2	; 0x02
     51c:	e0 2d       	mov	r30, r0
     51e:	a6 81       	ldd	r26, Z+6	; 0x06
     520:	b7 81       	ldd	r27, Z+7	; 0x07
     522:	b0 93 11 02 	sts	0x0211, r27
     526:	a0 93 10 02 	sts	0x0210, r26

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	11 97       	sbiw	r26, 0x01	; 1
     530:	cd 01       	movw	r24, r26
     532:	57 96       	adiw	r26, 0x17	; 23
     534:	6c 91       	ld	r22, X
     536:	19 95       	eicall

	return;
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     552:	dc 01       	movw	r26, r24
     554:	15 96       	adiw	r26, 0x05	; 5
     556:	ed 91       	ld	r30, X+
     558:	fc 91       	ld	r31, X
     55a:	16 97       	sbiw	r26, 0x06	; 6
     55c:	06 81       	ldd	r16, Z+6	; 0x06
     55e:	17 81       	ldd	r17, Z+7	; 0x07
	uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     560:	e8 01       	movw	r28, r16
     562:	2c 96       	adiw	r28, 0x0c	; 12
     564:	ce 01       	movw	r24, r28
     566:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
     56a:	87 e3       	ldi	r24, 0x37	; 55
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	be 01       	movw	r22, r28
     570:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
     574:	e0 91 10 02 	lds	r30, 0x0210
     578:	f0 91 11 02 	lds	r31, 0x0211
	{
		xReturn = pdTRUE;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	d8 01       	movw	r26, r16
     580:	56 96       	adiw	r26, 0x16	; 22
     582:	2c 91       	ld	r18, X
     584:	56 97       	sbiw	r26, 0x16	; 22
     586:	96 89       	ldd	r25, Z+22	; 0x16
     588:	29 17       	cp	r18, r25
     58a:	08 f4       	brcc	.+2      	; 0x58e <xCoRoutineRemoveFromEventList+0x44>
     58c:	80 e0       	ldi	r24, 0x00	; 0
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	08 95       	ret

00000598 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     5a2:	0e 94 39 0c 	call	0x1872	; 0x1872 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     5a6:	00 91 4a 02 	lds	r16, 0x024A
     5aa:	10 91 4b 02 	lds	r17, 0x024B
     5ae:	c0 0f       	add	r28, r16
     5b0:	d1 1f       	adc	r29, r17
     5b2:	88 e1       	ldi	r24, 0x18	; 24
     5b4:	c0 30       	cpi	r28, 0x00	; 0
     5b6:	d8 07       	cpc	r29, r24
     5b8:	50 f4       	brcc	.+20     	; 0x5ce <pvPortMalloc+0x36>
     5ba:	0c 17       	cp	r16, r28
     5bc:	1d 07       	cpc	r17, r29
     5be:	50 f4       	brcc	.+20     	; 0x5d4 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     5c0:	04 5b       	subi	r16, 0xB4	; 180
     5c2:	1d 4f       	sbci	r17, 0xFD	; 253
			xNextFreeByte += xWantedSize;
     5c4:	d0 93 4b 02 	sts	0x024B, r29
     5c8:	c0 93 4a 02 	sts	0x024A, r28
     5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     5ce:	00 e0       	ldi	r16, 0x00	; 0
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <pvPortMalloc+0x40>
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	10 e0       	ldi	r17, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;
		}
	}
	xTaskResumeAll();
     5d8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     5dc:	80 2f       	mov	r24, r16
     5de:	91 2f       	mov	r25, r17
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     5ea:	08 95       	ret

000005ec <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     5ec:	10 92 4b 02 	sts	0x024B, r1
     5f0:	10 92 4a 02 	sts	0x024A, r1
}
     5f4:	08 95       	ret

000005f6 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     5f6:	20 91 4a 02 	lds	r18, 0x024A
     5fa:	30 91 4b 02 	lds	r19, 0x024B
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	98 e1       	ldi	r25, 0x18	; 24
     602:	82 1b       	sub	r24, r18
     604:	93 0b       	sbc	r25, r19
}
     606:	08 95       	ret

00000608 <vTaskFunction_timerHandler>:
*--------------------------------------------------------*/



void vTaskFunction_timerHandler(void *pvNada)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	0f 92       	push	r0
     60e:	0f 92       	push	r0
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	static uint8_t task_cnt = 0, sseg_cnt_L = 0, sseg_cnt_R = 0;

	portTickType xLastExecutionTime;
	xLastExecutionTime = xTaskGetTickCount();
     614:	0e 94 3f 0c 	call	0x187e	; 0x187e <xTaskGetTickCount>
     618:	9a 83       	std	Y+2, r25	; 0x02
     61a:	89 83       	std	Y+1, r24	; 0x01
		//xSemaphoreTake( xBinarySemaphore_timer, portMAX_DELAY );
		
		SSEG_Write_left_digits(sseg_cnt_L);
		SSEG_Write_right_digits(sseg_cnt_R);
		
		task_cnt ^= 1;
     61c:	11 e0       	ldi	r17, 0x01	; 1
		
		if (sseg_cnt_R == 99)
			sseg_cnt_R = 0;
		else
			sseg_cnt_R++;
		PORTA ^= (1 << LED2);//Toggle LED2
     61e:	04 e0       	ldi	r16, 0x04	; 4
	xLastExecutionTime = xTaskGetTickCount();
	for(;;)
	{	
		//xSemaphoreTake( xBinarySemaphore_timer, portMAX_DELAY );
		
		SSEG_Write_left_digits(sseg_cnt_L);
     620:	80 91 4c 1a 	lds	r24, 0x1A4C
     624:	0e 94 ab 09 	call	0x1356	; 0x1356 <SSEG_Write_left_digits>
		SSEG_Write_right_digits(sseg_cnt_R);
     628:	80 91 4d 1a 	lds	r24, 0x1A4D
     62c:	0e 94 b9 09 	call	0x1372	; 0x1372 <SSEG_Write_right_digits>
		
		task_cnt ^= 1;
     630:	80 91 4e 1a 	lds	r24, 0x1A4E
     634:	81 27       	eor	r24, r17
     636:	80 93 4e 1a 	sts	0x1A4E, r24
		if(task_cnt)
     63a:	88 23       	and	r24, r24
     63c:	69 f0       	breq	.+26     	; 0x658 <vTaskFunction_timerHandler+0x50>
		{
			if (sseg_cnt_L == 99)
     63e:	80 91 4c 1a 	lds	r24, 0x1A4C
     642:	83 36       	cpi	r24, 0x63	; 99
     644:	19 f4       	brne	.+6      	; 0x64c <vTaskFunction_timerHandler+0x44>
				sseg_cnt_L = 0;
     646:	10 92 4c 1a 	sts	0x1A4C, r1
     64a:	03 c0       	rjmp	.+6      	; 0x652 <vTaskFunction_timerHandler+0x4a>
			else
				sseg_cnt_L++;	
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	80 93 4c 1a 	sts	0x1A4C, r24
			PORTA ^= (1 << LED0);//Toggle LED0
     652:	82 b1       	in	r24, 0x02	; 2
     654:	81 27       	eor	r24, r17
     656:	82 b9       	out	0x02, r24	; 2
		}		
		
		if (sseg_cnt_R == 99)
     658:	80 91 4d 1a 	lds	r24, 0x1A4D
     65c:	83 36       	cpi	r24, 0x63	; 99
     65e:	19 f4       	brne	.+6      	; 0x666 <vTaskFunction_timerHandler+0x5e>
			sseg_cnt_R = 0;
     660:	10 92 4d 1a 	sts	0x1A4D, r1
     664:	03 c0       	rjmp	.+6      	; 0x66c <vTaskFunction_timerHandler+0x64>
		else
			sseg_cnt_R++;
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 4d 1a 	sts	0x1A4D, r24
		PORTA ^= (1 << LED2);//Toggle LED2
     66c:	82 b1       	in	r24, 0x02	; 2
     66e:	80 27       	eor	r24, r16
     670:	82 b9       	out	0x02, r24	; 2
		
		//TCNT2 = 0;
		vTaskDelayUntil(&xLastExecutionTime, 50/portTICK_RATE_MS);
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	62 e3       	ldi	r22, 0x32	; 50
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <vTaskDelayUntil>
	}
     67e:	d0 cf       	rjmp	.-96     	; 0x620 <vTaskFunction_timerHandler+0x18>

00000680 <main>:
extern xSemaphoreHandle xMutex;
xSemaphoreHandle xBinarySemaphore_timer;

//-------------------Main Function-----------------------//
int main( void )
{  	
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
    // Function initializing PORTA as an output and setting LEDs low
	vIO_init(); 
     68e:	0e 94 96 00 	call	0x12c	; 0x12c <vIO_init>
	//initialize_timer2();
	SPI_MasterInit(); 
     692:	0e 94 62 09 	call	0x12c4	; 0x12c4 <SPI_MasterInit>
	//}
	//
	//
	//while(1);

	vSemaphoreCreateBinary( xBinarySemaphore_timer );
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	43 e0       	ldi	r20, 0x03	; 3
     69c:	0e 94 01 07 	call	0xe02	; 0xe02 <xQueueGenericCreate>
     6a0:	90 93 aa 1a 	sts	0x1AAA, r25
     6a4:	80 93 a9 1a 	sts	0x1AA9, r24
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	39 f0       	breq	.+14     	; 0x6ba <main+0x3a>
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	0e 94 32 07 	call	0xe64	; 0xe64 <xQueueGenericSend>
	
	// Creates a handler task for the interrupt generated by Timer2 CTC
	xTaskCreate(vTaskFunction_timerHandler, "TMR Task", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	93 e0       	ldi	r25, 0x03	; 3
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	45 e5       	ldi	r20, 0x55	; 85
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	01 e0       	ldi	r16, 0x01	; 1
     6cc:	ee 24       	eor	r14, r14
     6ce:	ff 24       	eor	r15, r15
     6d0:	cc 24       	eor	r12, r12
     6d2:	dd 24       	eor	r13, r13
     6d4:	aa 24       	eor	r10, r10
     6d6:	bb 24       	eor	r11, r11
     6d8:	0e 94 4d 0a 	call	0x149a	; 0x149a <xTaskGenericCreate>
	
    // Start the task scheduler
	vTaskStartScheduler();
     6dc:	0e 94 08 0c 	call	0x1810	; 0x1810 <vTaskStartScheduler>

	return 0;
}
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	08 95       	ret

000006f4 <__vector_13>:
*
* param a: TIMER2_COMPA_vect: vector generated when
*		   timer2 reaches the value held be OCR2A
*--------------------------------------------------------*/
ISR(TIMER2_COMPA_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	0b b6       	in	r0, 0x3b	; 59
     6fe:	0f 92       	push	r0
     700:	11 24       	eor	r1, r1
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	ef 93       	push	r30
     718:	ff 93       	push	r31
	static portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
     71a:	10 92 4f 1a 	sts	0x1A4F, r1
	/* 'Give' the semaphore to unblock the task. */
	xSemaphoreGiveFromISR( xBinarySemaphore_timer, &xHigherPriorityTaskWoken );
     71e:	80 91 a9 1a 	lds	r24, 0x1AA9
     722:	90 91 aa 1a 	lds	r25, 0x1AAA
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	4f e4       	ldi	r20, 0x4F	; 79
     72c:	5a e1       	ldi	r21, 0x1A	; 26
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	0e 94 fd 07 	call	0xffa	; 0xffa <xQueueGenericSendFromISR>
	if( xHigherPriorityTaskWoken == pdTRUE )
     734:	80 91 4f 1a 	lds	r24, 0x1A4F
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	11 f4       	brne	.+4      	; 0x740 <__vector_13+0x4c>
	{
		vPortYield();
     73c:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
	}
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0
     762:	1f 90       	pop	r1
     764:	18 95       	reti

00000766 <vApplicationTickHook>:
	//else if(count == 1000)
	//{
		//count = 0;
		//SSEG_Write_Decimal_Point(SSEG_DP_4_val);
	//}		
     766:	08 95       	ret

00000768 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     768:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     76a:	03 96       	adiw	r24, 0x03	; 3
     76c:	92 83       	std	Z+2, r25	; 0x02
     76e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     770:	2f ef       	ldi	r18, 0xFF	; 255
     772:	3f ef       	ldi	r19, 0xFF	; 255
     774:	34 83       	std	Z+4, r19	; 0x04
     776:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     778:	96 83       	std	Z+6, r25	; 0x06
     77a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     77c:	90 87       	std	Z+8, r25	; 0x08
     77e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     780:	10 82       	st	Z, r1
}
     782:	08 95       	ret

00000784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     784:	fc 01       	movw	r30, r24
     786:	11 86       	std	Z+9, r1	; 0x09
     788:	10 86       	std	Z+8, r1	; 0x08
}
     78a:	08 95       	ret

0000078c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ec 01       	movw	r28, r24
     792:	fb 01       	movw	r30, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	9a 81       	ldd	r25, Y+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     798:	dc 01       	movw	r26, r24
     79a:	12 96       	adiw	r26, 0x02	; 2
     79c:	2d 91       	ld	r18, X+
     79e:	3c 91       	ld	r19, X
     7a0:	13 97       	sbiw	r26, 0x03	; 3
     7a2:	33 83       	std	Z+3, r19	; 0x03
     7a4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	3a 81       	ldd	r19, Y+2	; 0x02
     7aa:	35 83       	std	Z+5, r19	; 0x05
     7ac:	24 83       	std	Z+4, r18	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     7ae:	12 96       	adiw	r26, 0x02	; 2
     7b0:	2d 91       	ld	r18, X+
     7b2:	3c 91       	ld	r19, X
     7b4:	13 97       	sbiw	r26, 0x03	; 3
     7b6:	d9 01       	movw	r26, r18
     7b8:	15 96       	adiw	r26, 0x05	; 5
     7ba:	7c 93       	st	X, r23
     7bc:	6e 93       	st	-X, r22
     7be:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     7c0:	dc 01       	movw	r26, r24
     7c2:	13 96       	adiw	r26, 0x03	; 3
     7c4:	7c 93       	st	X, r23
     7c6:	6e 93       	st	-X, r22
     7c8:	12 97       	sbiw	r26, 0x02	; 2
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     7ca:	7a 83       	std	Y+2, r23	; 0x02
     7cc:	69 83       	std	Y+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     7ce:	d1 87       	std	Z+9, r29	; 0x09
     7d0:	c0 87       	std	Z+8, r28	; 0x08

	( pxList->uxNumberOfItems )++;
     7d2:	88 81       	ld	r24, Y
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	88 83       	st	Y, r24
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	ac 01       	movw	r20, r24
     7e4:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     7e6:	28 81       	ld	r18, Y
     7e8:	39 81       	ldd	r19, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	2f 3f       	cpi	r18, 0xFF	; 255
     7ee:	38 07       	cpc	r19, r24
     7f0:	21 f4       	brne	.+8      	; 0x7fa <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     7f2:	fa 01       	movw	r30, r20
     7f4:	a7 81       	ldd	r26, Z+7	; 0x07
     7f6:	b0 85       	ldd	r27, Z+8	; 0x08
     7f8:	18 c0       	rjmp	.+48     	; 0x82a <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     7fa:	da 01       	movw	r26, r20
     7fc:	13 96       	adiw	r26, 0x03	; 3
     7fe:	fa 01       	movw	r30, r20
     800:	85 81       	ldd	r24, Z+5	; 0x05
     802:	96 81       	ldd	r25, Z+6	; 0x06
     804:	fc 01       	movw	r30, r24
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	68 f0       	brcs	.+26     	; 0x82a <vListInsert+0x4c>
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	0d 90       	ld	r0, X+
     814:	bc 91       	ld	r27, X
     816:	a0 2d       	mov	r26, r0
     818:	12 96       	adiw	r26, 0x02	; 2
     81a:	ed 91       	ld	r30, X+
     81c:	fc 91       	ld	r31, X
     81e:	13 97       	sbiw	r26, 0x03	; 3
     820:	80 81       	ld	r24, Z
     822:	91 81       	ldd	r25, Z+1	; 0x01
     824:	28 17       	cp	r18, r24
     826:	39 07       	cpc	r19, r25
     828:	98 f7       	brcc	.-26     	; 0x810 <vListInsert+0x32>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	ed 91       	ld	r30, X+
     82e:	fc 91       	ld	r31, X
     830:	13 97       	sbiw	r26, 0x03	; 3
     832:	fb 83       	std	Y+3, r31	; 0x03
     834:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     836:	d5 83       	std	Z+5, r29	; 0x05
     838:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     83a:	bd 83       	std	Y+5, r27	; 0x05
     83c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	dc 93       	st	X, r29
     842:	ce 93       	st	-X, r28
     844:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     846:	59 87       	std	Y+9, r21	; 0x09
     848:	48 87       	std	Y+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
     84a:	fa 01       	movw	r30, r20
     84c:	80 81       	ld	r24, Z
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	80 83       	st	Z, r24
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
     858:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     85a:	a2 81       	ldd	r26, Z+2	; 0x02
     85c:	b3 81       	ldd	r27, Z+3	; 0x03
     85e:	84 81       	ldd	r24, Z+4	; 0x04
     860:	95 81       	ldd	r25, Z+5	; 0x05
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	9c 93       	st	X, r25
     866:	8e 93       	st	-X, r24
     868:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     86a:	a4 81       	ldd	r26, Z+4	; 0x04
     86c:	b5 81       	ldd	r27, Z+5	; 0x05
     86e:	82 81       	ldd	r24, Z+2	; 0x02
     870:	93 81       	ldd	r25, Z+3	; 0x03
     872:	13 96       	adiw	r26, 0x03	; 3
     874:	9c 93       	st	X, r25
     876:	8e 93       	st	-X, r24
     878:	12 97       	sbiw	r26, 0x02	; 2

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     87a:	a0 85       	ldd	r26, Z+8	; 0x08
     87c:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	8d 91       	ld	r24, X+
     882:	9c 91       	ld	r25, X
     884:	12 97       	sbiw	r26, 0x02	; 2
     886:	8e 17       	cp	r24, r30
     888:	9f 07       	cpc	r25, r31
     88a:	31 f4       	brne	.+12     	; 0x898 <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     88c:	84 81       	ldd	r24, Z+4	; 0x04
     88e:	95 81       	ldd	r25, Z+5	; 0x05
     890:	12 96       	adiw	r26, 0x02	; 2
     892:	9c 93       	st	X, r25
     894:	8e 93       	st	-X, r24
     896:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     898:	11 86       	std	Z+9, r1	; 0x09
     89a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     89c:	8c 91       	ld	r24, X
     89e:	81 50       	subi	r24, 0x01	; 1
     8a0:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
     8a2:	8c 91       	ld	r24, X
}
     8a4:	08 95       	ret

000008a6 <pxPortInitialiseStack>:
#endif

	/* Place a few bytes of known values on the bottom of the stack.
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
     8a6:	21 e1       	ldi	r18, 0x11	; 17
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	32 e2       	ldi	r19, 0x22	; 34
     8b0:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
     8b2:	fc 01       	movw	r30, r24
     8b4:	32 97       	sbiw	r30, 0x02	; 2
     8b6:	a3 e3       	ldi	r26, 0x33	; 51
     8b8:	a0 83       	st	Z, r26
	 *
	 * In order to do this properly, we would need to get a full 3-byte pointer to
	 * pxCode.  That requires a change to GCC.  Not likely to happen any time soon.
	 */
	usAddress = ( unsigned portSHORT ) pxCode;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
     8ba:	fc 01       	movw	r30, r24
     8bc:	33 97       	sbiw	r30, 0x03	; 3
     8be:	60 83       	st	Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned portSHORT ) 0x00ff );
     8c0:	fc 01       	movw	r30, r24
     8c2:	34 97       	sbiw	r30, 0x04	; 4
     8c4:	70 83       	st	Z, r23
	pxTopOfStack--;

	*pxTopOfStack = 0;
     8c6:	fc 01       	movw	r30, r24
     8c8:	35 97       	sbiw	r30, 0x05	; 5
     8ca:	10 82       	st	Z, r1

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
     8cc:	fc 01       	movw	r30, r24
     8ce:	36 97       	sbiw	r30, 0x06	; 6
     8d0:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
     8d2:	fc 01       	movw	r30, r24
     8d4:	37 97       	sbiw	r30, 0x07	; 7
     8d6:	60 e8       	ldi	r22, 0x80	; 128
     8d8:	60 83       	st	Z, r22
#if defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)

	/* If we have an ATmega256x, we are also saving the RAMPZ and EIND registers.
	 * We should default those to 0.
	 */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* EIND */
     8da:	fc 01       	movw	r30, r24
     8dc:	38 97       	sbiw	r30, 0x08	; 8
     8de:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* RAMPZ */
     8e0:	fc 01       	movw	r30, r24
     8e2:	39 97       	sbiw	r30, 0x09	; 9
     8e4:	10 82       	st	Z, r1
	pxTopOfStack--;

#endif

	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
     8e6:	fc 01       	movw	r30, r24
     8e8:	3a 97       	sbiw	r30, 0x0a	; 10
     8ea:	10 82       	st	Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
     8ec:	fc 01       	movw	r30, r24
     8ee:	3b 97       	sbiw	r30, 0x0b	; 11
     8f0:	62 e0       	ldi	r22, 0x02	; 2
     8f2:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
     8f4:	fc 01       	movw	r30, r24
     8f6:	3c 97       	sbiw	r30, 0x0c	; 12
     8f8:	63 e0       	ldi	r22, 0x03	; 3
     8fa:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
     8fc:	fc 01       	movw	r30, r24
     8fe:	3d 97       	sbiw	r30, 0x0d	; 13
     900:	64 e0       	ldi	r22, 0x04	; 4
     902:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
     904:	fc 01       	movw	r30, r24
     906:	3e 97       	sbiw	r30, 0x0e	; 14
     908:	65 e0       	ldi	r22, 0x05	; 5
     90a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
     90c:	fc 01       	movw	r30, r24
     90e:	3f 97       	sbiw	r30, 0x0f	; 15
     910:	66 e0       	ldi	r22, 0x06	; 6
     912:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
     914:	fc 01       	movw	r30, r24
     916:	70 97       	sbiw	r30, 0x10	; 16
     918:	67 e0       	ldi	r22, 0x07	; 7
     91a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
     91c:	fc 01       	movw	r30, r24
     91e:	71 97       	sbiw	r30, 0x11	; 17
     920:	68 e0       	ldi	r22, 0x08	; 8
     922:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
     924:	fc 01       	movw	r30, r24
     926:	72 97       	sbiw	r30, 0x12	; 18
     928:	69 e0       	ldi	r22, 0x09	; 9
     92a:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
     92c:	fc 01       	movw	r30, r24
     92e:	73 97       	sbiw	r30, 0x13	; 19
     930:	60 e1       	ldi	r22, 0x10	; 16
     932:	60 83       	st	Z, r22
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
     934:	fc 01       	movw	r30, r24
     936:	74 97       	sbiw	r30, 0x14	; 20
     938:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
     93a:	fc 01       	movw	r30, r24
     93c:	75 97       	sbiw	r30, 0x15	; 21
     93e:	22 e1       	ldi	r18, 0x12	; 18
     940:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
     942:	fc 01       	movw	r30, r24
     944:	76 97       	sbiw	r30, 0x16	; 22
     946:	23 e1       	ldi	r18, 0x13	; 19
     948:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
     94a:	fc 01       	movw	r30, r24
     94c:	77 97       	sbiw	r30, 0x17	; 23
     94e:	24 e1       	ldi	r18, 0x14	; 20
     950:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
     952:	fc 01       	movw	r30, r24
     954:	78 97       	sbiw	r30, 0x18	; 24
     956:	25 e1       	ldi	r18, 0x15	; 21
     958:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
     95a:	fc 01       	movw	r30, r24
     95c:	79 97       	sbiw	r30, 0x19	; 25
     95e:	26 e1       	ldi	r18, 0x16	; 22
     960:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
     962:	fc 01       	movw	r30, r24
     964:	7a 97       	sbiw	r30, 0x1a	; 26
     966:	27 e1       	ldi	r18, 0x17	; 23
     968:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
     96a:	fc 01       	movw	r30, r24
     96c:	7b 97       	sbiw	r30, 0x1b	; 27
     96e:	28 e1       	ldi	r18, 0x18	; 24
     970:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
     972:	fc 01       	movw	r30, r24
     974:	7c 97       	sbiw	r30, 0x1c	; 28
     976:	29 e1       	ldi	r18, 0x19	; 25
     978:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
     97a:	fc 01       	movw	r30, r24
     97c:	7d 97       	sbiw	r30, 0x1d	; 29
     97e:	20 e2       	ldi	r18, 0x20	; 32
     980:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
     982:	fc 01       	movw	r30, r24
     984:	7e 97       	sbiw	r30, 0x1e	; 30
     986:	21 e2       	ldi	r18, 0x21	; 33
     988:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
     98a:	fc 01       	movw	r30, r24
     98c:	7f 97       	sbiw	r30, 0x1f	; 31
     98e:	30 83       	st	Z, r19
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
     990:	fc 01       	movw	r30, r24
     992:	b0 97       	sbiw	r30, 0x20	; 32
     994:	23 e2       	ldi	r18, 0x23	; 35
     996:	20 83       	st	Z, r18
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     998:	fc 01       	movw	r30, r24
     99a:	b1 97       	sbiw	r30, 0x21	; 33
     99c:	40 83       	st	Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
     99e:	fc 01       	movw	r30, r24
     9a0:	b2 97       	sbiw	r30, 0x22	; 34
     9a2:	50 83       	st	Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
     9a4:	fc 01       	movw	r30, r24
     9a6:	b3 97       	sbiw	r30, 0x23	; 35
     9a8:	26 e2       	ldi	r18, 0x26	; 38
     9aa:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
     9ac:	fc 01       	movw	r30, r24
     9ae:	b4 97       	sbiw	r30, 0x24	; 36
     9b0:	27 e2       	ldi	r18, 0x27	; 39
     9b2:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
     9b4:	fc 01       	movw	r30, r24
     9b6:	b5 97       	sbiw	r30, 0x25	; 37
     9b8:	28 e2       	ldi	r18, 0x28	; 40
     9ba:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
     9bc:	fc 01       	movw	r30, r24
     9be:	b6 97       	sbiw	r30, 0x26	; 38
     9c0:	29 e2       	ldi	r18, 0x29	; 41
     9c2:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
     9c4:	fc 01       	movw	r30, r24
     9c6:	b7 97       	sbiw	r30, 0x27	; 39
     9c8:	20 e3       	ldi	r18, 0x30	; 48
     9ca:	20 83       	st	Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
     9cc:	fc 01       	movw	r30, r24
     9ce:	b8 97       	sbiw	r30, 0x28	; 40
     9d0:	21 e3       	ldi	r18, 0x31	; 49
     9d2:	20 83       	st	Z, r18
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
     9d4:	89 97       	sbiw	r24, 0x29	; 41
}
     9d6:	08 95       	ret

000009d8 <xPortStartScheduler>:
    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH

    ulCompareMatch >>= 8;
    ucHighByte = ( unsigned portCHAR ) ( ulCompareMatch & ( unsigned portLONG ) 0xff );
    portOCRH = ucHighByte;
     9d8:	10 92 99 00 	sts	0x0099, r1

#endif

    portOCRL = ucLowByte;
     9dc:	89 ef       	ldi	r24, 0xF9	; 249
     9de:	80 93 98 00 	sts	0x0098, r24
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;
     9e2:	8b e0       	ldi	r24, 0x0B	; 11
     9e4:	80 93 91 00 	sts	0x0091, r24
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
     9e8:	e1 e7       	ldi	r30, 0x71	; 113
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     9ee:	82 60       	ori	r24, 0x02	; 2
    portTIMSK = ucLowByte;
     9f0:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
     9f2:	a0 91 50 1a 	lds	r26, 0x1A50
     9f6:	b0 91 51 1a 	lds	r27, 0x1A51
     9fa:	cd 91       	ld	r28, X+
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	dd 91       	ld	r29, X+
     a00:	de bf       	out	0x3e, r29	; 62
     a02:	ff 91       	pop	r31
     a04:	ef 91       	pop	r30
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	ff 90       	pop	r15
     a24:	ef 90       	pop	r14
     a26:	df 90       	pop	r13
     a28:	cf 90       	pop	r12
     a2a:	bf 90       	pop	r11
     a2c:	af 90       	pop	r10
     a2e:	9f 90       	pop	r9
     a30:	8f 90       	pop	r8
     a32:	7f 90       	pop	r7
     a34:	6f 90       	pop	r6
     a36:	5f 90       	pop	r5
     a38:	4f 90       	pop	r4
     a3a:	3f 90       	pop	r3
     a3c:	2f 90       	pop	r2
     a3e:	1f 90       	pop	r1
     a40:	0f 90       	pop	r0
     a42:	0c be       	out	0x3c, r0	; 60
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
     a4e:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	08 95       	ret

00000a54 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     a54:	08 95       	ret

00000a56 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	0f 92       	push	r0
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	0c b6       	in	r0, 0x3c	; 60
     a64:	0f 92       	push	r0
     a66:	1f 92       	push	r1
     a68:	11 24       	eor	r1, r1
     a6a:	2f 92       	push	r2
     a6c:	3f 92       	push	r3
     a6e:	4f 92       	push	r4
     a70:	5f 92       	push	r5
     a72:	6f 92       	push	r6
     a74:	7f 92       	push	r7
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	a0 91 50 1a 	lds	r26, 0x1A50
     aaa:	b0 91 51 1a 	lds	r27, 0x1A51
     aae:	0d b6       	in	r0, 0x3d	; 61
     ab0:	0d 92       	st	X+, r0
     ab2:	0e b6       	in	r0, 0x3e	; 62
     ab4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     ab6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     aba:	a0 91 50 1a 	lds	r26, 0x1A50
     abe:	b0 91 51 1a 	lds	r27, 0x1A51
     ac2:	cd 91       	ld	r28, X+
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	dd 91       	ld	r29, X+
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	1f 90       	pop	r1
     b08:	0f 90       	pop	r0
     b0a:	0c be       	out	0x3c, r0	; 60
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b16:	08 95       	ret

00000b18 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	0f 92       	push	r0
     b20:	0b b6       	in	r0, 0x3b	; 59
     b22:	0f 92       	push	r0
     b24:	0c b6       	in	r0, 0x3c	; 60
     b26:	0f 92       	push	r0
     b28:	1f 92       	push	r1
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 92       	push	r2
     b2e:	3f 92       	push	r3
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	a0 91 50 1a 	lds	r26, 0x1A50
     b6c:	b0 91 51 1a 	lds	r27, 0x1A51
     b70:	0d b6       	in	r0, 0x3d	; 61
     b72:	0d 92       	st	X+, r0
     b74:	0e b6       	in	r0, 0x3e	; 62
     b76:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     b78:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vTaskIncrementTick>
	vTaskSwitchContext();
     b7c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b80:	a0 91 50 1a 	lds	r26, 0x1A50
     b84:	b0 91 51 1a 	lds	r27, 0x1A51
     b88:	cd 91       	ld	r28, X+
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	dd 91       	ld	r29, X+
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	bf 90       	pop	r11
     bba:	af 90       	pop	r10
     bbc:	9f 90       	pop	r9
     bbe:	8f 90       	pop	r8
     bc0:	7f 90       	pop	r7
     bc2:	6f 90       	pop	r6
     bc4:	5f 90       	pop	r5
     bc6:	4f 90       	pop	r4
     bc8:	3f 90       	pop	r3
     bca:	2f 90       	pop	r2
     bcc:	1f 90       	pop	r1
     bce:	0f 90       	pop	r0
     bd0:	0c be       	out	0x3c, r0	; 60
     bd2:	0f 90       	pop	r0
     bd4:	0b be       	out	0x3b, r0	; 59
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0

	asm volatile ( "ret" );
     bdc:	08 95       	ret

00000bde <__vector_32>:

	#elif defined( portUSE_TIMER3 )
		#warning "Timer3 used for PRE-EMPTIVE scheduler."
		ISR(TIMER3_COMPA_vect, ISR_NAKED)
		{
			vPortYieldFromTick();
     bde:	0e 94 8c 05 	call	0xb18	; 0xb18 <vPortYieldFromTick>
			asm volatile ( "reti" );
     be2:	18 95       	reti

00000be4 <prvCopyDataFromQueue>:
	++( pxQueue->uxMessagesWaiting );
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	dc 01       	movw	r26, r24
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
     bea:	cd 91       	ld	r28, X+
     bec:	dc 91       	ld	r29, X
     bee:	11 97       	sbiw	r26, 0x01	; 1
     bf0:	20 97       	sbiw	r28, 0x00	; 0
     bf2:	21 f1       	breq	.+72     	; 0xc3c <prvCopyDataFromQueue+0x58>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
     bf4:	5c 96       	adiw	r26, 0x1c	; 28
     bf6:	4c 91       	ld	r20, X
     bf8:	5c 97       	sbiw	r26, 0x1c	; 28
     bfa:	16 96       	adiw	r26, 0x06	; 6
     bfc:	2d 91       	ld	r18, X+
     bfe:	3c 91       	ld	r19, X
     c00:	17 97       	sbiw	r26, 0x07	; 7
     c02:	24 0f       	add	r18, r20
     c04:	31 1d       	adc	r19, r1
     c06:	17 96       	adiw	r26, 0x07	; 7
     c08:	3c 93       	st	X, r19
     c0a:	2e 93       	st	-X, r18
     c0c:	16 97       	sbiw	r26, 0x06	; 6
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	ed 91       	ld	r30, X+
     c12:	fc 91       	ld	r31, X
     c14:	13 97       	sbiw	r26, 0x03	; 3
     c16:	2e 17       	cp	r18, r30
     c18:	3f 07       	cpc	r19, r31
     c1a:	20 f0       	brcs	.+8      	; 0xc24 <prvCopyDataFromQueue+0x40>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
     c1c:	17 96       	adiw	r26, 0x07	; 7
     c1e:	dc 93       	st	X, r29
     c20:	ce 93       	st	-X, r28
     c22:	16 97       	sbiw	r26, 0x06	; 6
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
     c24:	16 96       	adiw	r26, 0x06	; 6
     c26:	3c 91       	ld	r19, X
     c28:	16 97       	sbiw	r26, 0x06	; 6
     c2a:	17 96       	adiw	r26, 0x07	; 7
     c2c:	2c 91       	ld	r18, X
     c2e:	86 2f       	mov	r24, r22
     c30:	97 2f       	mov	r25, r23
     c32:	63 2f       	mov	r22, r19
     c34:	72 2f       	mov	r23, r18
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	0e 94 40 10 	call	0x2080	; 0x2080 <memcpy>
	}
}
     c3c:	df 91       	pop	r29
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	0f 92       	push	r0
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     c52:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c54:	18 16       	cp	r1, r24
     c56:	c4 f4       	brge	.+48     	; 0xc88 <prvUnlockQueue+0x46>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     c58:	89 89       	ldd	r24, Y+17	; 0x11
     c5a:	88 23       	and	r24, r24
     c5c:	29 f4       	brne	.+10     	; 0xc68 <prvUnlockQueue+0x26>
     c5e:	14 c0       	rjmp	.+40     	; 0xc88 <prvUnlockQueue+0x46>
     c60:	89 89       	ldd	r24, Y+17	; 0x11
     c62:	88 23       	and	r24, r24
     c64:	21 f4       	brne	.+8      	; 0xc6e <prvUnlockQueue+0x2c>
     c66:	10 c0       	rjmp	.+32     	; 0xc88 <prvUnlockQueue+0x46>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     c68:	8e 01       	movw	r16, r28
     c6a:	0f 5e       	subi	r16, 0xEF	; 239
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	c8 01       	movw	r24, r16
     c70:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
     c74:	88 23       	and	r24, r24
     c76:	11 f0       	breq	.+4      	; 0xc7c <prvUnlockQueue+0x3a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
     c78:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
     c7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c7e:	81 50       	subi	r24, 0x01	; 1
     c80:	8e 8f       	std	Y+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
     c82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c84:	18 16       	cp	r1, r24
     c86:	64 f3       	brlt	.-40     	; 0xc60 <prvUnlockQueue+0x1e>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	0f 92       	push	r0
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     c96:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c98:	18 16       	cp	r1, r24
     c9a:	c4 f4       	brge	.+48     	; 0xccc <prvUnlockQueue+0x8a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c9c:	88 85       	ldd	r24, Y+8	; 0x08
     c9e:	88 23       	and	r24, r24
     ca0:	29 f4       	brne	.+10     	; 0xcac <prvUnlockQueue+0x6a>
     ca2:	14 c0       	rjmp	.+40     	; 0xccc <prvUnlockQueue+0x8a>
     ca4:	88 85       	ldd	r24, Y+8	; 0x08
     ca6:	88 23       	and	r24, r24
     ca8:	21 f4       	brne	.+8      	; 0xcb2 <prvUnlockQueue+0x70>
     caa:	10 c0       	rjmp	.+32     	; 0xccc <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     cac:	8e 01       	movw	r16, r28
     cae:	08 5f       	subi	r16, 0xF8	; 248
     cb0:	1f 4f       	sbci	r17, 0xFF	; 255
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
     cb8:	88 23       	and	r24, r24
     cba:	11 f0       	breq	.+4      	; 0xcc0 <prvUnlockQueue+0x7e>
				{
					vTaskMissedYield();
     cbc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
     cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc2:	81 50       	subi	r24, 0x01	; 1
     cc4:	8d 8f       	std	Y+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
     cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cc8:	18 16       	cp	r1, r24
     cca:	64 f3       	brlt	.-40     	; 0xca4 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	08 95       	ret

00000cde <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
     ce4:	2c 8d       	ldd	r18, Y+28	; 0x1c
     ce6:	22 23       	and	r18, r18
     ce8:	59 f4       	brne	.+22     	; 0xd00 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     cea:	88 81       	ld	r24, Y
     cec:	99 81       	ldd	r25, Y+1	; 0x01
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	e1 f5       	brne	.+120    	; 0xd6a <prvCopyDataToQueue+0x8c>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     cfa:	1b 82       	std	Y+3, r1	; 0x03
     cfc:	1a 82       	std	Y+2, r1	; 0x02
     cfe:	35 c0       	rjmp	.+106    	; 0xd6a <prvCopyDataToQueue+0x8c>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
     d00:	44 23       	and	r20, r20
     d02:	b9 f4       	brne	.+46     	; 0xd32 <prvCopyDataToQueue+0x54>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	42 2f       	mov	r20, r18
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	0e 94 40 10 	call	0x2080	; 0x2080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     d10:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	9d 81       	ldd	r25, Y+5	; 0x05
     d16:	82 0f       	add	r24, r18
     d18:	91 1d       	adc	r25, r1
     d1a:	9d 83       	std	Y+5, r25	; 0x05
     d1c:	8c 83       	std	Y+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
     d1e:	2a 81       	ldd	r18, Y+2	; 0x02
     d20:	3b 81       	ldd	r19, Y+3	; 0x03
     d22:	82 17       	cp	r24, r18
     d24:	93 07       	cpc	r25, r19
     d26:	08 f1       	brcs	.+66     	; 0xd6a <prvCopyDataToQueue+0x8c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
     d28:	88 81       	ld	r24, Y
     d2a:	99 81       	ldd	r25, Y+1	; 0x01
     d2c:	9d 83       	std	Y+5, r25	; 0x05
     d2e:	8c 83       	std	Y+4, r24	; 0x04
     d30:	1c c0       	rjmp	.+56     	; 0xd6a <prvCopyDataToQueue+0x8c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
     d32:	8e 81       	ldd	r24, Y+6	; 0x06
     d34:	9f 81       	ldd	r25, Y+7	; 0x07
     d36:	42 2f       	mov	r20, r18
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	0e 94 40 10 	call	0x2080	; 0x2080 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
     d3e:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	50 95       	com	r21
     d44:	41 95       	neg	r20
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	8e 81       	ldd	r24, Y+6	; 0x06
     d4a:	9f 81       	ldd	r25, Y+7	; 0x07
     d4c:	84 0f       	add	r24, r20
     d4e:	95 1f       	adc	r25, r21
     d50:	9f 83       	std	Y+7, r25	; 0x07
     d52:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
     d54:	28 81       	ld	r18, Y
     d56:	39 81       	ldd	r19, Y+1	; 0x01
     d58:	82 17       	cp	r24, r18
     d5a:	93 07       	cpc	r25, r19
     d5c:	30 f4       	brcc	.+12     	; 0xd6a <prvCopyDataToQueue+0x8c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	9b 81       	ldd	r25, Y+3	; 0x03
     d62:	48 0f       	add	r20, r24
     d64:	59 1f       	adc	r21, r25
     d66:	5f 83       	std	Y+7, r21	; 0x07
     d68:	4e 83       	std	Y+6, r20	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
     d6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	8a 8f       	std	Y+26, r24	; 0x1a
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     d82:	48 81       	ld	r20, Y
     d84:	59 81       	ldd	r21, Y+1	; 0x01
     d86:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	ec 8d       	ldd	r30, Y+28	; 0x1c
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	2e 9f       	mul	r18, r30
     d90:	c0 01       	movw	r24, r0
     d92:	2f 9f       	mul	r18, r31
     d94:	90 0d       	add	r25, r0
     d96:	3e 9f       	mul	r19, r30
     d98:	90 0d       	add	r25, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	84 0f       	add	r24, r20
     d9e:	95 1f       	adc	r25, r21
     da0:	9b 83       	std	Y+3, r25	; 0x03
     da2:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     da4:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
     da6:	5d 83       	std	Y+5, r21	; 0x05
     da8:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
     daa:	c9 01       	movw	r24, r18
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	e8 9f       	mul	r30, r24
     db0:	90 01       	movw	r18, r0
     db2:	e9 9f       	mul	r30, r25
     db4:	30 0d       	add	r19, r0
     db6:	f8 9f       	mul	r31, r24
     db8:	30 0d       	add	r19, r0
     dba:	11 24       	eor	r1, r1
     dbc:	24 0f       	add	r18, r20
     dbe:	35 1f       	adc	r19, r21
     dc0:	3f 83       	std	Y+7, r19	; 0x07
     dc2:	2e 83       	std	Y+6, r18	; 0x06
		pxQueue->xRxLock = queueUNLOCKED;
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->xTxLock = queueUNLOCKED;
     dc8:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
     dca:	66 23       	and	r22, r22
     dcc:	61 f4       	brne	.+24     	; 0xde6 <xQueueGenericReset+0x70>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     dce:	88 85       	ldd	r24, Y+8	; 0x08
     dd0:	88 23       	and	r24, r24
     dd2:	89 f0       	breq	.+34     	; 0xdf6 <xQueueGenericReset+0x80>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
     dd4:	ce 01       	movw	r24, r28
     dd6:	08 96       	adiw	r24, 0x08	; 8
     dd8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	59 f4       	brne	.+22     	; 0xdf6 <xQueueGenericReset+0x80>
				{
					portYIELD_WITHIN_API();
     de0:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <xQueueGenericReset+0x80>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     de6:	ce 01       	movw	r24, r28
     de8:	08 96       	adiw	r24, 0x08	; 8
     dea:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     dee:	ce 01       	movw	r24, r28
     df0:	41 96       	adiw	r24, 0x11	; 17
     df2:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	18 2f       	mov	r17, r24
     e0c:	06 2f       	mov	r16, r22
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
     e0e:	88 23       	and	r24, r24
     e10:	f9 f0       	breq	.+62     	; 0xe50 <xQueueGenericCreate+0x4e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     e12:	8f e1       	ldi	r24, 0x1F	; 31
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     e1a:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	d9 f0       	breq	.+54     	; 0xe56 <xQueueGenericCreate+0x54>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
     e20:	01 9f       	mul	r16, r17
     e22:	c0 01       	movw	r24, r0
     e24:	11 24       	eor	r1, r1

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     e2c:	99 83       	std	Y+1, r25	; 0x01
     e2e:	88 83       	st	Y, r24
			if( pxNewQueue->pcHead != NULL )
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	41 f0       	breq	.+16     	; 0xe44 <xQueueGenericCreate+0x42>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
     e34:	1b 8f       	std	Y+27, r17	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
     e36:	0c 8f       	std	Y+28, r16	; 0x1c
				xQueueGenericReset( pxNewQueue, pdTRUE );
     e38:	ce 01       	movw	r24, r28
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	0e 94 bb 06 	call	0xd76	; 0xd76 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
     e40:	ce 01       	movw	r24, r28
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <xQueueGenericCreate+0x58>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
     e44:	ce 01       	movw	r24, r28
     e46:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <xQueueGenericCreate+0x58>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <xQueueGenericCreate+0x58>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
	}

	configASSERT( xReturn );

	return xReturn;
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
     e64:	8f 92       	push	r8
     e66:	9f 92       	push	r9
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <xQueueGenericSend+0x18>
     e7c:	0f 92       	push	r0
     e7e:	0f 92       	push	r0
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	8c 01       	movw	r16, r24
     e86:	4b 01       	movw	r8, r22
     e88:	5d 83       	std	Y+5, r21	; 0x05
     e8a:	4c 83       	std	Y+4, r20	; 0x04
     e8c:	b2 2e       	mov	r11, r18
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
     e8e:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
     e90:	ee 24       	eor	r14, r14
     e92:	e3 94       	inc	r14
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     e94:	cc 24       	eor	r12, r12
     e96:	dd 24       	eor	r13, r13
     e98:	68 94       	set
     e9a:	c3 f8       	bld	r12, 3
     e9c:	c8 0e       	add	r12, r24
     e9e:	d9 1e       	adc	r13, r25
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
     ea6:	f8 01       	movw	r30, r16
     ea8:	92 8d       	ldd	r25, Z+26	; 0x1a
     eaa:	83 8d       	ldd	r24, Z+27	; 0x1b
     eac:	98 17       	cp	r25, r24
     eae:	a8 f4       	brcc	.+42     	; 0xeda <xQueueGenericSend+0x76>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     eb0:	c8 01       	movw	r24, r16
     eb2:	b4 01       	movw	r22, r8
     eb4:	4b 2d       	mov	r20, r11
     eb6:	0e 94 6f 06 	call	0xcde	; 0xcde <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     eba:	f8 01       	movw	r30, r16
     ebc:	81 89       	ldd	r24, Z+17	; 0x11
     ebe:	88 23       	and	r24, r24
     ec0:	41 f0       	breq	.+16     	; 0xed2 <xQueueGenericSend+0x6e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
     ec2:	c8 01       	movw	r24, r16
     ec4:	41 96       	adiw	r24, 0x11	; 17
     ec6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	11 f4       	brne	.+4      	; 0xed2 <xQueueGenericSend+0x6e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
     ece:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	52 c0       	rjmp	.+164    	; 0xf7e <xQueueGenericSend+0x11a>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	21 f4       	brne	.+8      	; 0xeea <xQueueGenericSend+0x86>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	4a c0       	rjmp	.+148    	; 0xf7e <xQueueGenericSend+0x11a>
				}
				else if( xEntryTimeSet == pdFALSE )
     eea:	ff 20       	and	r15, r15
     eec:	29 f4       	brne	.+10     	; 0xef8 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
     eee:	ce 01       	movw	r24, r28
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     ef6:	fe 2c       	mov	r15, r14
				}
			}
		}
		taskEXIT_CRITICAL();
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
     efc:	0e 94 39 0c 	call	0x1872	; 0x1872 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	0f 92       	push	r0
     f06:	f8 01       	movw	r30, r16
     f08:	85 8d       	ldd	r24, Z+29	; 0x1d
     f0a:	8f 3f       	cpi	r24, 0xFF	; 255
     f0c:	09 f4       	brne	.+2      	; 0xf10 <xQueueGenericSend+0xac>
     f0e:	15 8e       	std	Z+29, r1	; 0x1d
     f10:	f8 01       	movw	r30, r16
     f12:	86 8d       	ldd	r24, Z+30	; 0x1e
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	09 f4       	brne	.+2      	; 0xf1a <xQueueGenericSend+0xb6>
     f18:	16 8e       	std	Z+30, r1	; 0x1e
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     f1e:	ce 01       	movw	r24, r28
     f20:	01 96       	adiw	r24, 0x01	; 1
     f22:	be 01       	movw	r22, r28
     f24:	6c 5f       	subi	r22, 0xFC	; 252
     f26:	7f 4f       	sbci	r23, 0xFF	; 255
     f28:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <xTaskCheckForTimeOut>
     f2c:	88 23       	and	r24, r24
     f2e:	09 f5       	brne	.+66     	; 0xf72 <xQueueGenericSend+0x10e>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
     f36:	f8 01       	movw	r30, r16
     f38:	92 8d       	ldd	r25, Z+26	; 0x1a
	taskEXIT_CRITICAL();
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
     f3e:	f8 01       	movw	r30, r16
     f40:	83 8d       	ldd	r24, Z+27	; 0x1b
     f42:	98 17       	cp	r25, r24
     f44:	81 f4       	brne	.+32     	; 0xf66 <xQueueGenericSend+0x102>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     f46:	6c 81       	ldd	r22, Y+4	; 0x04
     f48:	7d 81       	ldd	r23, Y+5	; 0x05
     f4a:	c6 01       	movw	r24, r12
     f4c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
     f50:	c8 01       	movw	r24, r16
     f52:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
     f56:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
     f5a:	88 23       	and	r24, r24
     f5c:	09 f0       	breq	.+2      	; 0xf60 <xQueueGenericSend+0xfc>
     f5e:	a0 cf       	rjmp	.-192    	; 0xea0 <xQueueGenericSend+0x3c>
				{
					portYIELD_WITHIN_API();
     f60:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
     f64:	9d cf       	rjmp	.-198    	; 0xea0 <xQueueGenericSend+0x3c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
     f66:	c8 01       	movw	r24, r16
     f68:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     f6c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
     f70:	97 cf       	rjmp	.-210    	; 0xea0 <xQueueGenericSend+0x3c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
     f72:	c8 01       	movw	r24, r16
     f74:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     f78:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
     f7e:	0f 90       	pop	r0
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	df 90       	pop	r13
     f96:	cf 90       	pop	r12
     f98:	bf 90       	pop	r11
     f9a:	9f 90       	pop	r9
     f9c:	8f 90       	pop	r8
     f9e:	08 95       	ret

00000fa0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
     fa4:	8f e1       	ldi	r24, 0x1F	; 31
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
     fac:	ec 01       	movw	r28, r24
		if( pxNewQueue != NULL )
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	f9 f0       	breq	.+62     	; 0xff0 <xQueueCreateMutex+0x50>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
     fb2:	1b 82       	std	Y+3, r1	; 0x03
     fb4:	1a 82       	std	Y+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	18 82       	st	Y, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
     fba:	1d 82       	std	Y+5, r1	; 0x05
     fbc:	1c 82       	std	Y+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
     fbe:	1f 82       	std	Y+7, r1	; 0x07
     fc0:	1e 82       	std	Y+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
     fc2:	1a 8e       	std	Y+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	8b 8f       	std	Y+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
     fc8:	1c 8e       	std	Y+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	8d 8f       	std	Y+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
     fce:	8e 8f       	std	Y+30, r24	; 0x1e
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
     fd0:	ce 01       	movw	r24, r28
     fd2:	08 96       	adiw	r24, 0x08	; 8
     fd4:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
     fd8:	ce 01       	movw	r24, r28
     fda:	41 96       	adiw	r24, 0x11	; 17
     fdc:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
     fe0:	ce 01       	movw	r24, r28
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	0e 94 32 07 	call	0xe64	; 0xe64 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
     ff0:	8c 2f       	mov	r24, r28
     ff2:	9d 2f       	mov	r25, r29
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	ec 01       	movw	r28, r24
    1004:	8a 01       	movw	r16, r20
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1006:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1008:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100a:	98 17       	cp	r25, r24
    100c:	e0 f4       	brcc	.+56     	; 0x1046 <xQueueGenericSendFromISR+0x4c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    100e:	ce 01       	movw	r24, r28
    1010:	42 2f       	mov	r20, r18
    1012:	0e 94 6f 06 	call	0xcde	; 0xcde <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1016:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1018:	8f 3f       	cpi	r24, 0xFF	; 255
    101a:	81 f4       	brne	.+32     	; 0x103c <xQueueGenericSendFromISR+0x42>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	88 23       	and	r24, r24
    1020:	a1 f0       	breq	.+40     	; 0x104a <xQueueGenericSendFromISR+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1022:	ce 01       	movw	r24, r28
    1024:	41 96       	adiw	r24, 0x11	; 17
    1026:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
    102a:	88 23       	and	r24, r24
    102c:	81 f0       	breq	.+32     	; 0x104e <xQueueGenericSendFromISR+0x54>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
    102e:	01 15       	cp	r16, r1
    1030:	11 05       	cpc	r17, r1
    1032:	79 f0       	breq	.+30     	; 0x1052 <xQueueGenericSendFromISR+0x58>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24
    103a:	0c c0       	rjmp	.+24     	; 0x1054 <xQueueGenericSendFromISR+0x5a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    103c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    103e:	8f 5f       	subi	r24, 0xFF	; 255
    1040:	8e 8f       	std	Y+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	07 c0       	rjmp	.+14     	; 0x1054 <xQueueGenericSendFromISR+0x5a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <xQueueGenericSendFromISR+0x5a>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <xQueueGenericSendFromISR+0x5a>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <xQueueGenericSendFromISR+0x5a>
    1052:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	08 95       	ret

0000105e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    105e:	8f 92       	push	r8
    1060:	9f 92       	push	r9
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	00 d0       	rcall	.+0      	; 0x1076 <xQueueGenericReceive+0x18>
    1076:	0f 92       	push	r0
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8c 01       	movw	r16, r24
    1080:	4b 01       	movw	r8, r22
    1082:	5d 83       	std	Y+5, r21	; 0x05
    1084:	4c 83       	std	Y+4, r20	; 0x04
    1086:	b2 2e       	mov	r11, r18
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1088:	ff 24       	eor	r15, r15
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    108a:	ee 24       	eor	r14, r14
    108c:	e3 94       	inc	r14
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    108e:	0f 2e       	mov	r0, r31
    1090:	f1 e1       	ldi	r31, 0x11	; 17
    1092:	cf 2e       	mov	r12, r31
    1094:	dd 24       	eor	r13, r13
    1096:	f0 2d       	mov	r31, r0
    1098:	c8 0e       	add	r12, r24
    109a:	d9 1e       	adc	r13, r25
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    10a2:	f8 01       	movw	r30, r16
    10a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    10a6:	88 23       	and	r24, r24
    10a8:	a1 f1       	breq	.+104    	; 0x1112 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    10aa:	e6 80       	ldd	r14, Z+6	; 0x06
    10ac:	f7 80       	ldd	r15, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    10ae:	c8 01       	movw	r24, r16
    10b0:	b4 01       	movw	r22, r8
    10b2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    10b6:	bb 20       	and	r11, r11
    10b8:	d1 f4       	brne	.+52     	; 0x10ee <xQueueGenericReceive+0x90>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    10ba:	f8 01       	movw	r30, r16
    10bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    10be:	81 50       	subi	r24, 0x01	; 1
    10c0:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    10ca:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <xTaskGetCurrentTaskHandle>
    10ce:	f8 01       	movw	r30, r16
    10d0:	93 83       	std	Z+3, r25	; 0x03
    10d2:	82 83       	std	Z+2, r24	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 85       	ldd	r24, Z+8	; 0x08
    10d8:	88 23       	and	r24, r24
    10da:	b9 f0       	breq	.+46     	; 0x110a <xQueueGenericReceive+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    10dc:	c8 01       	movw	r24, r16
    10de:	08 96       	adiw	r24, 0x08	; 8
    10e0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	89 f4       	brne	.+34     	; 0x110a <xQueueGenericReceive+0xac>
						{
							portYIELD_WITHIN_API();
    10e8:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <xQueueGenericReceive+0xac>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    10ee:	f8 01       	movw	r30, r16
    10f0:	f7 82       	std	Z+7, r15	; 0x07
    10f2:	e6 82       	std	Z+6, r14	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10f4:	81 89       	ldd	r24, Z+17	; 0x11
    10f6:	88 23       	and	r24, r24
    10f8:	41 f0       	breq	.+16     	; 0x110a <xQueueGenericReceive+0xac>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10fa:	c8 01       	movw	r24, r16
    10fc:	41 96       	adiw	r24, 0x11	; 17
    10fe:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
    1102:	88 23       	and	r24, r24
    1104:	11 f0       	breq	.+4      	; 0x110a <xQueueGenericReceive+0xac>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    1106:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	5f c0       	rjmp	.+190    	; 0x11d0 <xQueueGenericReceive+0x172>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	21 f4       	brne	.+8      	; 0x1122 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	57 c0       	rjmp	.+174    	; 0x11d0 <xQueueGenericReceive+0x172>
				}
				else if( xEntryTimeSet == pdFALSE )
    1122:	ff 20       	and	r15, r15
    1124:	29 f4       	brne	.+10     	; 0x1130 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    112e:	fe 2c       	mov	r15, r14
				}
			}
		}
		taskEXIT_CRITICAL();
    1130:	0f 90       	pop	r0
    1132:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1134:	0e 94 39 0c 	call	0x1872	; 0x1872 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	0f 92       	push	r0
    113e:	f8 01       	movw	r30, r16
    1140:	85 8d       	ldd	r24, Z+29	; 0x1d
    1142:	8f 3f       	cpi	r24, 0xFF	; 255
    1144:	09 f4       	brne	.+2      	; 0x1148 <xQueueGenericReceive+0xea>
    1146:	15 8e       	std	Z+29, r1	; 0x1d
    1148:	f8 01       	movw	r30, r16
    114a:	86 8d       	ldd	r24, Z+30	; 0x1e
    114c:	8f 3f       	cpi	r24, 0xFF	; 255
    114e:	09 f4       	brne	.+2      	; 0x1152 <xQueueGenericReceive+0xf4>
    1150:	16 8e       	std	Z+30, r1	; 0x1e
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1156:	ce 01       	movw	r24, r28
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	be 01       	movw	r22, r28
    115c:	6c 5f       	subi	r22, 0xFC	; 252
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <xTaskCheckForTimeOut>
    1164:	88 23       	and	r24, r24
    1166:	71 f5       	brne	.+92     	; 0x11c4 <xQueueGenericReceive+0x166>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    116e:	f8 01       	movw	r30, r16
    1170:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1176:	88 23       	and	r24, r24
    1178:	f9 f4       	brne	.+62     	; 0x11b8 <xQueueGenericReceive+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    117a:	f8 01       	movw	r30, r16
    117c:	80 81       	ld	r24, Z
    117e:	91 81       	ldd	r25, Z+1	; 0x01
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	51 f4       	brne	.+20     	; 0x1198 <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    118a:	f8 01       	movw	r30, r16
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	93 81       	ldd	r25, Z+3	; 0x03
    1190:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1198:	6c 81       	ldd	r22, Y+4	; 0x04
    119a:	7d 81       	ldd	r23, Y+5	; 0x05
    119c:	c6 01       	movw	r24, r12
    119e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    11a2:	c8 01       	movw	r24, r16
    11a4:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    11a8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
    11ac:	88 23       	and	r24, r24
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <xQueueGenericReceive+0x154>
    11b0:	75 cf       	rjmp	.-278    	; 0x109c <xQueueGenericReceive+0x3e>
				{
					portYIELD_WITHIN_API();
    11b2:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    11b6:	72 cf       	rjmp	.-284    	; 0x109c <xQueueGenericReceive+0x3e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    11b8:	c8 01       	movw	r24, r16
    11ba:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    11be:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
    11c2:	6c cf       	rjmp	.-296    	; 0x109c <xQueueGenericReceive+0x3e>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    11c4:	c8 01       	movw	r24, r16
    11c6:	0e 94 21 06 	call	0xc42	; 0xc42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    11ca:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    11ce:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	df 90       	pop	r13
    11e8:	cf 90       	pop	r12
    11ea:	bf 90       	pop	r11
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	08 95       	ret

000011f2 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
    11fc:	8a 01       	movw	r16, r20
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    11fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1200:	88 23       	and	r24, r24
    1202:	f1 f0       	breq	.+60     	; 0x1240 <xQueueReceiveFromISR+0x4e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    1204:	ce 01       	movw	r24, r28
    1206:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    120a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	8a 8f       	std	Y+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    1210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1212:	8f 3f       	cpi	r24, 0xFF	; 255
    1214:	81 f4       	brne	.+32     	; 0x1236 <xQueueReceiveFromISR+0x44>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1216:	88 85       	ldd	r24, Y+8	; 0x08
    1218:	88 23       	and	r24, r24
    121a:	a1 f0       	breq	.+40     	; 0x1244 <xQueueReceiveFromISR+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    121c:	ce 01       	movw	r24, r28
    121e:	08 96       	adiw	r24, 0x08	; 8
    1220:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <xTaskRemoveFromEventList>
    1224:	88 23       	and	r24, r24
    1226:	81 f0       	breq	.+32     	; 0x1248 <xQueueReceiveFromISR+0x56>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    1228:	01 15       	cp	r16, r1
    122a:	11 05       	cpc	r17, r1
    122c:	79 f0       	breq	.+30     	; 0x124c <xQueueReceiveFromISR+0x5a>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	0c c0       	rjmp	.+24     	; 0x124e <xQueueReceiveFromISR+0x5c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    1236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	8d 8f       	std	Y+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	07 c0       	rjmp	.+14     	; 0x124e <xQueueReceiveFromISR+0x5c>
		}
		else
		{
			xReturn = pdFAIL;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	05 c0       	rjmp	.+10     	; 0x124e <xQueueReceiveFromISR+0x5c>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
			}

			xReturn = pdPASS;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	03 c0       	rjmp	.+6      	; 0x124e <xQueueReceiveFromISR+0x5c>
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	01 c0       	rjmp	.+2      	; 0x124e <xQueueReceiveFromISR+0x5c>
    124c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	08 95       	ret

00001258 <uxQueueMessagesWaiting>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    125e:	fc 01       	movw	r30, r24
    1260:	82 8d       	ldd	r24, Z+26	; 0x1a
	taskEXIT_CRITICAL();
    1262:	0f 90       	pop	r0
    1264:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
}
    1266:	08 95       	ret

00001268 <uxQueueMessagesWaitingFromISR>:
{
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    1268:	fc 01       	movw	r30, r24
    126a:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
}
    126c:	08 95       	ret

0000126e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    1274:	88 81       	ld	r24, Y
    1276:	99 81       	ldd	r25, Y+1	; 0x01
    1278:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
	vPortFree( pxQueue );
    127c:	ce 01       	movw	r24, r28
    127e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <xQueueIsQueueEmptyFromISR>:
signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    1288:	fc 01       	movw	r30, r24
    128a:	92 8d       	ldd	r25, Z+26	; 0x1a
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	91 11       	cpse	r25, r1
    1290:	80 e0       	ldi	r24, 0x00	; 0

	return xReturn;
}
    1292:	08 95       	ret

00001294 <xQueueIsQueueFullFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    1294:	fc 01       	movw	r30, r24
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    1296:	22 8d       	ldd	r18, Z+26	; 0x1a
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	93 8d       	ldd	r25, Z+27	; 0x1b
    129c:	29 13       	cpse	r18, r25
    129e:	80 e0       	ldi	r24, 0x00	; 0

	return xReturn;
}
    12a0:	08 95       	ret

000012a2 <SPI_MasterTransmit>:
void SPI_MasterTransmit(uint8_t data)
{
	//xSemaphoreTake( xMutex, portMAX_DELAY);
	
	//set SS low
	PORTB &= ~(1 << SPI_SS);
    12a2:	28 98       	cbi	0x05, 0	; 5
	//Load data to be transferred
	SPDR = data;
    12a4:	8e bd       	out	0x2e, r24	; 46
	//wait for spi interrupt flag to signal complete transfer
	while (!(SPSR & (1 << SPIF))); 
    12a6:	0d b4       	in	r0, 0x2d	; 45
    12a8:	07 fe       	sbrs	r0, 7
    12aa:	fd cf       	rjmp	.-6      	; 0x12a6 <SPI_MasterTransmit+0x4>
	//Set SS high 
	PORTB |= (1 << SPI_SS);	
    12ac:	28 9a       	sbi	0x05, 0	; 5
	
	//xSemaphoreGive( xMutex );
}
    12ae:	08 95       	ret

000012b0 <SSEG_Set_Brightness>:
//-
//- Description: This function set the brightness of the 
//- display where 255 is off and 0 is on as bright as possible. 
//---------------------------------------------------------------
void SSEG_Set_Brightness(uint8_t val)
{
    12b0:	cf 93       	push	r28
    12b2:	c8 2f       	mov	r28, r24
	SPI_MasterTransmit(SSEG_BRIGHTNESS);	
    12b4:	8a e7       	ldi	r24, 0x7A	; 122
    12b6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
	SPI_MasterTransmit(val);
    12ba:	8c 2f       	mov	r24, r28
    12bc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
}
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <SPI_MasterInit>:
void SPI_MasterInit(void)
{
	//SPCR |= ((1 << SPE) | (1 << SPIE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0)); 
	//SPSR |=  1 << SPI2X; 
	
	DDRB = ((1 << SPI_SS) | (1 << SPI_MOSI) | (1 << SPI_SCK)); 
    12c4:	87 e0       	ldi	r24, 0x07	; 7
    12c6:	84 b9       	out	0x04, r24	; 4
	//make sure SS is high
	PORTB |= (1 << SPI_SS);
    12c8:	28 9a       	sbi	0x05, 0	; 5

	SPCR =  (0<<SPIE) |	//No interrupts
    12ca:	83 e5       	ldi	r24, 0x53	; 83
    12cc:	8c bd       	out	0x2c, r24	; 44
			(0<<CPOL) |	//rising leading edge
			(0<<CPHA) |	//sample leading edge
			(1<<SPR1) | //
			(1<<SPR0) ; //clock speed
	
	SPSR =  (0<<SPIF) |	//SPI interrupt flag
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	8d bd       	out	0x2d, r24	; 45
			(0<<WCOL) |	//Write collision flag
			(1<<SPI2X);	//Doubles SPI clock
			
	
	SSEG_Set_Brightness(10);
    12d2:	8a e0       	ldi	r24, 0x0A	; 10
    12d4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <SSEG_Set_Brightness>
}
    12d8:	08 95       	ret

000012da <SSEG_Reset>:
//-
//- Description: This function turns off all display elements. 
//---------------------------------------------------------------
void SSEG_Reset(void)
{
	SPI_MasterTransmit(SSEG_RESET);	
    12da:	86 e7       	ldi	r24, 0x76	; 118
    12dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
}
    12e0:	08 95       	ret

000012e2 <SSEG_Write_4vals_array>:
//- pointing to an array of four byte values, one for 
//- each of the 7-segment display locations. The four values
//- are then written to the 7-segment display.  
//---------------------------------------------------------------
void SSEG_Write_4vals_array(uint8_t* vals)
{
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	c8 2f       	mov	r28, r24
    12ea:	d9 2f       	mov	r29, r25
    12ec:	14 e0       	ldi	r17, 0x04	; 4
	uint8_t i;
	for(i = 0; i < 4; i ++)
	{
		SPI_MasterTransmit(*(vals + i));			
    12ee:	89 91       	ld	r24, Y+
    12f0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
    12f4:	11 50       	subi	r17, 0x01	; 1
//- are then written to the 7-segment display.  
//---------------------------------------------------------------
void SSEG_Write_4vals_array(uint8_t* vals)
{
	uint8_t i;
	for(i = 0; i < 4; i ++)
    12f6:	d9 f7       	brne	.-10     	; 0x12ee <SSEG_Write_4vals_array+0xc>
	{
		SPI_MasterTransmit(*(vals + i));			
	}		
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	1f 91       	pop	r17
    12fe:	08 95       	ret

00001300 <SSEG_Write_digit>:
//- individual digits to the display. In this case, you need 
//- to first send the initial escape character before you 
//- send the actual data. 
//---------------------------------------------------------------
void SSEG_Write_digit(uint8_t digit, uint8_t val)
{
    1300:	cf 93       	push	r28
    1302:	c6 2f       	mov	r28, r22
	switch(digit)
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	89 f0       	breq	.+34     	; 0x132a <SSEG_Write_digit+0x2a>
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	18 f4       	brcc	.+6      	; 0x1312 <SSEG_Write_digit+0x12>
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	09 f5       	brne	.+66     	; 0x1352 <SSEG_Write_digit+0x52>
    1310:	05 c0       	rjmp	.+10     	; 0x131c <SSEG_Write_digit+0x1c>
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	89 f0       	breq	.+34     	; 0x1338 <SSEG_Write_digit+0x38>
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	e1 f4       	brne	.+56     	; 0x1352 <SSEG_Write_digit+0x52>
    131a:	15 c0       	rjmp	.+42     	; 0x1346 <SSEG_Write_digit+0x46>
	{
		case 1:
			SPI_MasterTransmit(DIGIT_1);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    1322:	8c 2f       	mov	r24, r28
    1324:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break; 
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <SSEG_Write_digit+0x52>
		
		case 2:
			SPI_MasterTransmit(DIGIT_2);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    1330:	8c 2f       	mov	r24, r28
    1332:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    1336:	0d c0       	rjmp	.+26     	; 0x1352 <SSEG_Write_digit+0x52>
		
		case 3:
			SPI_MasterTransmit(DIGIT_3);
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    133e:	8c 2f       	mov	r24, r28
    1340:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    1344:	06 c0       	rjmp	.+12     	; 0x1352 <SSEG_Write_digit+0x52>
		
		case 4:
			SPI_MasterTransmit(DIGIT_4);
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(val);
    134c:	8c 2f       	mov	r24, r28
    134e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
			
		default:	
			break;
	}	
}
    1352:	cf 91       	pop	r28
    1354:	08 95       	ret

00001356 <SSEG_Write_left_digits>:
//- a tens and ones digit the then sends them off to the two 
//- left-most digits of the display. This function also handles
//- lead zero blanking. 
//---------------------------------------------------------------
void SSEG_Write_left_digits(uint8_t val)
{
    1356:	cf 93       	push	r28
	uint8_t dig_ones_place = val;
	//variable to store the 10's place value once it's determined
	uint8_t dig_tens_place = 0; 
	
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
    1358:	84 36       	cpi	r24, 0x64	; 100
    135a:	48 f4       	brcc	.+18     	; 0x136e <SSEG_Write_left_digits+0x18>
	{
		dig_tens_place = val / 10;
    135c:	6a e0       	ldi	r22, 0x0A	; 10
    135e:	0e 94 34 10 	call	0x2068	; 0x2068 <__udivmodqi4>
    1362:	c9 2f       	mov	r28, r25
		dig_ones_place = val % 10;
		
		//SPI_MasterTransmit(DIGIT_1);
		SPI_MasterTransmit(dig_tens_place);
    1364:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
		//SPI_MasterTransmit(DIGIT_2);
		SPI_MasterTransmit(dig_ones_place);
    1368:	8c 2f       	mov	r24, r28
    136a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
	}		
}
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <SSEG_Write_right_digits>:
//- a tens and ones digit the then sends them off to the two 
//- right-most digits of the display. This function also handles
//- lead zero blanking. 
//---------------------------------------------------------------
void SSEG_Write_right_digits(uint8_t val)
{
    1372:	cf 93       	push	r28
	uint8_t dig_ones_place = val;
	//variable to store the 10's place value once it's determined
	uint8_t dig_tens_place = 0;
		
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
    1374:	84 36       	cpi	r24, 0x64	; 100
    1376:	b0 f4       	brcc	.+44     	; 0x13a4 <SSEG_Write_right_digits+0x32>
	{
		//subtract from tens place until it's zero to determine
		//tens and ones place digits
		while((dig_ones_place - 10) >= 0)
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	2a 50       	subi	r18, 0x0A	; 10
    137e:	30 40       	sbci	r19, 0x00	; 0
    1380:	52 f0       	brmi	.+20     	; 0x1396 <SSEG_Write_right_digits+0x24>
    1382:	c8 2f       	mov	r28, r24
    1384:	80 e0       	ldi	r24, 0x00	; 0
		{
			dig_ones_place -= 10;
    1386:	ca 50       	subi	r28, 0x0A	; 10
			dig_tens_place++;
    1388:	8f 5f       	subi	r24, 0xFF	; 255
	//2 digits of 7seg can display up to 99. Check bounds of 'val'
	if(val < 100)
	{
		//subtract from tens place until it's zero to determine
		//tens and ones place digits
		while((dig_ones_place - 10) >= 0)
    138a:	2c 2f       	mov	r18, r28
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	2a 50       	subi	r18, 0x0A	; 10
    1390:	30 40       	sbci	r19, 0x00	; 0
    1392:	ca f7       	brpl	.-14     	; 0x1386 <SSEG_Write_right_digits+0x14>
    1394:	02 c0       	rjmp	.+4      	; 0x139a <SSEG_Write_right_digits+0x28>
    1396:	c8 2f       	mov	r28, r24
    1398:	80 e0       	ldi	r24, 0x00	; 0
		{
			dig_ones_place -= 10;
			dig_tens_place++;
		}
		//SPI_MasterTransmit(DIGIT_3);
		SPI_MasterTransmit(dig_tens_place);
    139a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
		//SPI_MasterTransmit(DIGIT_4);
		SPI_MasterTransmit(dig_ones_place);
    139e:	8c 2f       	mov	r24, r28
    13a0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
	}	
}
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <SSEG_Write_Decimal_Point>:
//- There are six different values that can be written. Check 
//- out the 7-segment device spec for details on decimal points.
//---------------------------------------------------------------
void SSEG_Write_Decimal_Point(uint8_t val)
{
	switch(val)
    13a8:	82 30       	cpi	r24, 0x02	; 2
    13aa:	e1 f0       	breq	.+56     	; 0x13e4 <SSEG_Write_Decimal_Point+0x3c>
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	28 f4       	brcc	.+10     	; 0x13ba <SSEG_Write_Decimal_Point+0x12>
    13b0:	88 23       	and	r24, r24
    13b2:	51 f0       	breq	.+20     	; 0x13c8 <SSEG_Write_Decimal_Point+0x20>
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	89 f5       	brne	.+98     	; 0x141a <SSEG_Write_Decimal_Point+0x72>
    13b8:	0e c0       	rjmp	.+28     	; 0x13d6 <SSEG_Write_Decimal_Point+0x2e>
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	09 f1       	breq	.+66     	; 0x1400 <SSEG_Write_Decimal_Point+0x58>
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	c0 f0       	brcs	.+48     	; 0x13f2 <SSEG_Write_Decimal_Point+0x4a>
    13c2:	85 30       	cpi	r24, 0x05	; 5
    13c4:	51 f5       	brne	.+84     	; 0x141a <SSEG_Write_Decimal_Point+0x72>
    13c6:	23 c0       	rjmp	.+70     	; 0x140e <SSEG_Write_Decimal_Point+0x66>
	{
		case 0:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    13c8:	87 e7       	ldi	r24, 0x77	; 119
    13ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_0);			
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    13d4:	08 95       	ret
			
		case 1:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    13d6:	87 e7       	ldi	r24, 0x77	; 119
    13d8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_1);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    13e2:	08 95       	ret
			
		case 2:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    13e4:	87 e7       	ldi	r24, 0x77	; 119
    13e6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_2);
    13ea:	84 e0       	ldi	r24, 0x04	; 4
    13ec:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    13f0:	08 95       	ret
			
		case 3:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    13f2:	87 e7       	ldi	r24, 0x77	; 119
    13f4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_3);
    13f8:	88 e0       	ldi	r24, 0x08	; 8
    13fa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    13fe:	08 95       	ret
			
		case 4:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    1400:	87 e7       	ldi	r24, 0x77	; 119
    1402:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_4);
    1406:	80 e1       	ldi	r24, 0x10	; 16
    1408:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			break;
    140c:	08 95       	ret
			
		case 5:
			SPI_MasterTransmit(SSEG_DEC_PNT);
    140e:	87 e7       	ldi	r24, 0x77	; 119
    1410:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
			SPI_MasterTransmit(SSEG_DP_5);
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	0e 94 51 09 	call	0x12a2	; 0x12a2 <SPI_MasterTransmit>
    141a:	08 95       	ret

0000141c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    1422:	e0 91 50 1a 	lds	r30, 0x1A50
    1426:	f0 91 51 1a 	lds	r31, 0x1A51
    142a:	93 83       	std	Z+3, r25	; 0x03
    142c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    142e:	80 91 58 1a 	lds	r24, 0x1A58
    1432:	90 91 59 1a 	lds	r25, 0x1A59
    1436:	c8 17       	cp	r28, r24
    1438:	d9 07       	cpc	r29, r25
    143a:	68 f4       	brcc	.+26     	; 0x1456 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    143c:	80 91 5b 1a 	lds	r24, 0x1A5B
    1440:	90 91 5c 1a 	lds	r25, 0x1A5C
    1444:	60 91 50 1a 	lds	r22, 0x1A50
    1448:	70 91 51 1a 	lds	r23, 0x1A51
    144c:	6e 5f       	subi	r22, 0xFE	; 254
    144e:	7f 4f       	sbci	r23, 0xFF	; 255
    1450:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>
    1454:	17 c0       	rjmp	.+46     	; 0x1484 <prvAddCurrentTaskToDelayedList+0x68>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1456:	80 91 5d 1a 	lds	r24, 0x1A5D
    145a:	90 91 5e 1a 	lds	r25, 0x1A5E
    145e:	60 91 50 1a 	lds	r22, 0x1A50
    1462:	70 91 51 1a 	lds	r23, 0x1A51
    1466:	6e 5f       	subi	r22, 0xFE	; 254
    1468:	7f 4f       	sbci	r23, 0xFF	; 255
    146a:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    146e:	80 91 0e 02 	lds	r24, 0x020E
    1472:	90 91 0f 02 	lds	r25, 0x020F
    1476:	c8 17       	cp	r28, r24
    1478:	d9 07       	cpc	r29, r25
    147a:	20 f4       	brcc	.+8      	; 0x1484 <prvAddCurrentTaskToDelayedList+0x68>
		{
			xNextTaskUnblockTime = xTimeToWake;
    147c:	d0 93 0f 02 	sts	0x020F, r29
    1480:	c0 93 0e 02 	sts	0x020E, r28
		}
	}
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    148a:	c1 e6       	ldi	r28, 0x61	; 97
    148c:	da e1       	ldi	r29, 0x1A	; 26
    148e:	88 81       	ld	r24, Y
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	e8 f3       	brcs	.-6      	; 0x148e <prvIdleTask+0x4>
			{
				taskYIELD();
    1494:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    1498:	fa cf       	rjmp	.-12     	; 0x148e <prvIdleTask+0x4>

0000149a <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    149a:	4f 92       	push	r4
    149c:	5f 92       	push	r5
    149e:	6f 92       	push	r6
    14a0:	7f 92       	push	r7
    14a2:	8f 92       	push	r8
    14a4:	9f 92       	push	r9
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	2c 01       	movw	r4, r24
    14ba:	4b 01       	movw	r8, r22
    14bc:	ea 01       	movw	r28, r20
    14be:	39 01       	movw	r6, r18
    14c0:	b0 2e       	mov	r11, r16
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    14c2:	8a e2       	ldi	r24, 0x2A	; 42
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
    14ca:	8c 01       	movw	r16, r24

	if( pxNewTCB != NULL )
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <xTaskGenericCreate+0x38>
    14d0:	e3 c0       	rjmp	.+454    	; 0x1698 <xTaskGenericCreate+0x1fe>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    14d2:	c1 14       	cp	r12, r1
    14d4:	d1 04       	cpc	r13, r1
    14d6:	09 f0       	breq	.+2      	; 0x14da <xTaskGenericCreate+0x40>
    14d8:	f4 c0       	rjmp	.+488    	; 0x16c2 <xTaskGenericCreate+0x228>
    14da:	ce 01       	movw	r24, r28
    14dc:	0e 94 cc 02 	call	0x598	; 0x598 <pvPortMalloc>
    14e0:	6c 01       	movw	r12, r24
    14e2:	f8 01       	movw	r30, r16
    14e4:	90 8f       	std	Z+24, r25	; 0x18
    14e6:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <xTaskGenericCreate+0x5c>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    14ec:	c8 01       	movw	r24, r16
    14ee:	0e 94 f5 02 	call	0x5ea	; 0x5ea <vPortFree>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	d6 c0       	rjmp	.+428    	; 0x16a2 <xTaskGenericCreate+0x208>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    14f6:	c6 01       	movw	r24, r12
    14f8:	65 ea       	ldi	r22, 0xA5	; 165
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	ae 01       	movw	r20, r28
    14fe:	0e 94 49 10 	call	0x2092	; 0x2092 <memset>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    1502:	9e 01       	movw	r18, r28
    1504:	21 50       	subi	r18, 0x01	; 1
    1506:	30 40       	sbci	r19, 0x00	; 0
    1508:	f8 01       	movw	r30, r16
    150a:	87 89       	ldd	r24, Z+23	; 0x17
    150c:	90 8d       	ldd	r25, Z+24	; 0x18
    150e:	6c 01       	movw	r12, r24
    1510:	c2 0e       	add	r12, r18
    1512:	d3 1e       	adc	r13, r19
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    1514:	c8 01       	movw	r24, r16
    1516:	49 96       	adiw	r24, 0x19	; 25
    1518:	b4 01       	movw	r22, r8
    151a:	40 e1       	ldi	r20, 0x10	; 16
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    1522:	f8 01       	movw	r30, r16
    1524:	10 a6       	lds	r17, 0xb0
    1526:	cb 2d       	mov	r28, r11
    1528:	f3 e0       	ldi	r31, 0x03	; 3
    152a:	fb 15       	cp	r31, r11
    152c:	08 f4       	brcc	.+2      	; 0x1530 <xTaskGenericCreate+0x96>
    152e:	c3 e0       	ldi	r28, 0x03	; 3
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
    1530:	f8 01       	movw	r30, r16
    1532:	c6 8b       	std	Z+22, r28	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    1534:	c1 a7       	lds	r28, 0x71
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    1536:	88 24       	eor	r8, r8
    1538:	99 24       	eor	r9, r9
    153a:	68 94       	set
    153c:	81 f8       	bld	r8, 1
    153e:	80 0e       	add	r8, r16
    1540:	91 1e       	adc	r9, r17
    1542:	c4 01       	movw	r24, r8
    1544:	0e 94 c2 03 	call	0x784	; 0x784 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    1548:	c8 01       	movw	r24, r16
    154a:	0c 96       	adiw	r24, 0x0c	; 12
    154c:	0e 94 c2 03 	call	0x784	; 0x784 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    1550:	f8 01       	movw	r30, r16
    1552:	11 87       	std	Z+9, r17	; 0x09
    1554:	00 87       	std	Z+8, r16	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    1556:	84 e0       	ldi	r24, 0x04	; 4
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	8c 1b       	sub	r24, r28
    155c:	91 09       	sbc	r25, r1
    155e:	95 87       	std	Z+13, r25	; 0x0d
    1560:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    1562:	13 8b       	std	Z+19, r17	; 0x13
    1564:	02 8b       	std	Z+18, r16	; 0x12
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1566:	c6 01       	movw	r24, r12
    1568:	b2 01       	movw	r22, r4
    156a:	a3 01       	movw	r20, r6
    156c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <pxPortInitialiseStack>
    1570:	f8 01       	movw	r30, r16
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    1576:	e1 14       	cp	r14, r1
    1578:	f1 04       	cpc	r15, r1
    157a:	19 f0       	breq	.+6      	; 0x1582 <xTaskGenericCreate+0xe8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    157c:	f7 01       	movw	r30, r14
    157e:	11 83       	std	Z+1, r17	; 0x01
    1580:	00 83       	st	Z, r16
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    1588:	80 91 5a 1a 	lds	r24, 0x1A5A
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 5a 1a 	sts	0x1A5A, r24
			if( pxCurrentTCB == NULL )
    1592:	80 91 50 1a 	lds	r24, 0x1A50
    1596:	90 91 51 1a 	lds	r25, 0x1A51
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	d9 f5       	brne	.+118    	; 0x1614 <xTaskGenericCreate+0x17a>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    159e:	10 93 51 1a 	sts	0x1A51, r17
    15a2:	00 93 50 1a 	sts	0x1A50, r16

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    15a6:	80 91 5a 1a 	lds	r24, 0x1A5A
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <xTaskGenericCreate+0x116>
    15ae:	41 c0       	rjmp	.+130    	; 0x1632 <xTaskGenericCreate+0x198>
    15b0:	c0 e0       	ldi	r28, 0x00	; 0
    15b2:	d0 e0       	ldi	r29, 0x00	; 0
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    15b4:	ce 01       	movw	r24, r28
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	8c 0f       	add	r24, r28
    15c4:	9d 1f       	adc	r25, r29
    15c6:	8f 59       	subi	r24, 0x9F	; 159
    15c8:	95 4e       	sbci	r25, 0xE5	; 229
    15ca:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
    15ce:	21 96       	adiw	r28, 0x01	; 1

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    15d0:	c4 30       	cpi	r28, 0x04	; 4
    15d2:	d1 05       	cpc	r29, r1
    15d4:	79 f7       	brne	.-34     	; 0x15b4 <xTaskGenericCreate+0x11a>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    15d6:	c5 e8       	ldi	r28, 0x85	; 133
    15d8:	da e1       	ldi	r29, 0x1A	; 26
    15da:	ce 01       	movw	r24, r28
    15dc:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    15e0:	0f 2e       	mov	r0, r31
    15e2:	fe e8       	ldi	r31, 0x8E	; 142
    15e4:	ef 2e       	mov	r14, r31
    15e6:	fa e1       	ldi	r31, 0x1A	; 26
    15e8:	ff 2e       	mov	r15, r31
    15ea:	f0 2d       	mov	r31, r0
    15ec:	c7 01       	movw	r24, r14
    15ee:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    15f2:	87 e9       	ldi	r24, 0x97	; 151
    15f4:	9a e1       	ldi	r25, 0x1A	; 26
    15f6:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    15fa:	80 ea       	ldi	r24, 0xA0	; 160
    15fc:	9a e1       	ldi	r25, 0x1A	; 26
    15fe:	0e 94 b4 03 	call	0x768	; 0x768 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    1602:	d0 93 5e 1a 	sts	0x1A5E, r29
    1606:	c0 93 5d 1a 	sts	0x1A5D, r28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    160a:	f0 92 5c 1a 	sts	0x1A5C, r15
    160e:	e0 92 5b 1a 	sts	0x1A5B, r14
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <xTaskGenericCreate+0x198>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    1614:	80 91 56 1a 	lds	r24, 0x1A56
    1618:	88 23       	and	r24, r24
    161a:	59 f4       	brne	.+22     	; 0x1632 <xTaskGenericCreate+0x198>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    161c:	e0 91 50 1a 	lds	r30, 0x1A50
    1620:	f0 91 51 1a 	lds	r31, 0x1A51
    1624:	86 89       	ldd	r24, Z+22	; 0x16
    1626:	b8 16       	cp	r11, r24
    1628:	20 f0       	brcs	.+8      	; 0x1632 <xTaskGenericCreate+0x198>
					{
						pxCurrentTCB = pxNewTCB;
    162a:	10 93 51 1a 	sts	0x1A51, r17
    162e:	00 93 50 1a 	sts	0x1A50, r16
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    1632:	f8 01       	movw	r30, r16
    1634:	86 89       	ldd	r24, Z+22	; 0x16
    1636:	90 91 5f 1a 	lds	r25, 0x1A5F
    163a:	98 17       	cp	r25, r24
    163c:	10 f4       	brcc	.+4      	; 0x1642 <xTaskGenericCreate+0x1a8>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    163e:	80 93 5f 1a 	sts	0x1A5F, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    1642:	90 91 60 1a 	lds	r25, 0x1A60
    1646:	9f 5f       	subi	r25, 0xFF	; 255
    1648:	90 93 60 1a 	sts	0x1A60, r25

			prvAddTaskToReadyQueue( pxNewTCB );
    164c:	90 91 57 1a 	lds	r25, 0x1A57
    1650:	98 17       	cp	r25, r24
    1652:	10 f4       	brcc	.+4      	; 0x1658 <xTaskGenericCreate+0x1be>
    1654:	80 93 57 1a 	sts	0x1A57, r24
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 01       	movw	r18, r24
    165c:	22 0f       	add	r18, r18
    165e:	33 1f       	adc	r19, r19
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
    1668:	82 0f       	add	r24, r18
    166a:	93 1f       	adc	r25, r19
    166c:	8f 59       	subi	r24, 0x9F	; 159
    166e:	95 4e       	sbci	r25, 0xE5	; 229
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
    167a:	80 91 56 1a 	lds	r24, 0x1A56
    167e:	88 23       	and	r24, r24
    1680:	69 f0       	breq	.+26     	; 0x169c <xTaskGenericCreate+0x202>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    1682:	e0 91 50 1a 	lds	r30, 0x1A50
    1686:	f0 91 51 1a 	lds	r31, 0x1A51
    168a:	86 89       	ldd	r24, Z+22	; 0x16
    168c:	8b 15       	cp	r24, r11
    168e:	40 f4       	brcc	.+16     	; 0x16a0 <xTaskGenericCreate+0x206>
			{
				portYIELD_WITHIN_API();
    1690:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <xTaskGenericCreate+0x208>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <xTaskGenericCreate+0x208>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <xTaskGenericCreate+0x208>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
	}

	return xReturn;
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	9f 90       	pop	r9
    16b6:	8f 90       	pop	r8
    16b8:	7f 90       	pop	r7
    16ba:	6f 90       	pop	r6
    16bc:	5f 90       	pop	r5
    16be:	4f 90       	pop	r4
    16c0:	08 95       	ret
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    16c2:	fc 01       	movw	r30, r24
    16c4:	d0 8e       	std	Z+24, r13	; 0x18
    16c6:	c7 8a       	std	Z+23, r12	; 0x17
    16c8:	16 cf       	rjmp	.-468    	; 0x14f6 <xTaskGenericCreate+0x5c>

000016ca <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    16ca:	fc 01       	movw	r30, r24
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    16cc:	82 85       	ldd	r24, Z+10	; 0x0a
    16ce:	93 85       	ldd	r25, Z+11	; 0x0b
    16d0:	2a e1       	ldi	r18, 0x1A	; 26
    16d2:	80 3a       	cpi	r24, 0xA0	; 160
    16d4:	92 07       	cpc	r25, r18
    16d6:	61 f4       	brne	.+24     	; 0x16f0 <xTaskIsTaskSuspended+0x26>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    16d8:	24 89       	ldd	r18, Z+20	; 0x14
    16da:	35 89       	ldd	r19, Z+21	; 0x15
    16dc:	8a e1       	ldi	r24, 0x1A	; 26
    16de:	27 39       	cpi	r18, 0x97	; 151
    16e0:	38 07       	cpc	r19, r24
    16e2:	41 f0       	breq	.+16     	; 0x16f4 <xTaskIsTaskSuspended+0x2a>

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
	portBASE_TYPE xReturn = pdFALSE;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	21 15       	cp	r18, r1
    16e8:	31 05       	cpc	r19, r1
    16ea:	29 f0       	breq	.+10     	; 0x16f6 <xTaskIsTaskSuspended+0x2c>
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	08 95       	ret
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}

		return xReturn;
	}
    16f6:	08 95       	ret

000016f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	ec 01       	movw	r28, r24
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	b9 f1       	breq	.+110    	; 0x1774 <vTaskResume+0x7c>
    1706:	80 91 50 1a 	lds	r24, 0x1A50
    170a:	90 91 51 1a 	lds	r25, 0x1A51
    170e:	c8 17       	cp	r28, r24
    1710:	d9 07       	cpc	r29, r25
    1712:	81 f1       	breq	.+96     	; 0x1774 <vTaskResume+0x7c>
		{
			taskENTER_CRITICAL();
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xTaskIsTaskSuspended>
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	31 f5       	brne	.+76     	; 0x1770 <vTaskResume+0x78>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					uxListRemove(  &( pxTCB->xGenericListItem ) );
    1724:	8e 01       	movw	r16, r28
    1726:	0e 5f       	subi	r16, 0xFE	; 254
    1728:	1f 4f       	sbci	r17, 0xFF	; 255
    172a:	c8 01       	movw	r24, r16
    172c:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1730:	8e 89       	ldd	r24, Y+22	; 0x16
    1732:	90 91 57 1a 	lds	r25, 0x1A57
    1736:	98 17       	cp	r25, r24
    1738:	10 f4       	brcc	.+4      	; 0x173e <vTaskResume+0x46>
    173a:	80 93 57 1a 	sts	0x1A57, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 01       	movw	r18, r24
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	8f 59       	subi	r24, 0x9F	; 159
    1754:	95 4e       	sbci	r25, 0xE5	; 229
    1756:	b8 01       	movw	r22, r16
    1758:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    175c:	e0 91 50 1a 	lds	r30, 0x1A50
    1760:	f0 91 51 1a 	lds	r31, 0x1A51
    1764:	9e 89       	ldd	r25, Y+22	; 0x16
    1766:	86 89       	ldd	r24, Z+22	; 0x16
    1768:	98 17       	cp	r25, r24
    176a:	10 f0       	brcs	.+4      	; 0x1770 <vTaskResume+0x78>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    176c:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
		}
	}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	08 95       	ret

0000177e <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	1f 93       	push	r17
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	ec 01       	movw	r28, r24

		pxTCB = ( tskTCB * ) pxTaskToResume;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    178a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <xTaskIsTaskSuspended>
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	b9 f5       	brne	.+110    	; 0x1800 <xTaskResumeFromISR+0x82>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1792:	80 91 55 1a 	lds	r24, 0x1A55
    1796:	88 23       	and	r24, r24
    1798:	51 f5       	brne	.+84     	; 0x17ee <xTaskResumeFromISR+0x70>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    179a:	e0 91 50 1a 	lds	r30, 0x1A50
    179e:	f0 91 51 1a 	lds	r31, 0x1A51
    17a2:	11 e0       	ldi	r17, 0x01	; 1
    17a4:	9e 89       	ldd	r25, Y+22	; 0x16
    17a6:	86 89       	ldd	r24, Z+22	; 0x16
    17a8:	98 17       	cp	r25, r24
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <xTaskResumeFromISR+0x30>
    17ac:	10 e0       	ldi	r17, 0x00	; 0
					uxListRemove(  &( pxTCB->xGenericListItem ) );
    17ae:	ee 24       	eor	r14, r14
    17b0:	ff 24       	eor	r15, r15
    17b2:	68 94       	set
    17b4:	e1 f8       	bld	r14, 1
    17b6:	ec 0e       	add	r14, r28
    17b8:	fd 1e       	adc	r15, r29
    17ba:	c7 01       	movw	r24, r14
    17bc:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    17c0:	8e 89       	ldd	r24, Y+22	; 0x16
    17c2:	90 91 57 1a 	lds	r25, 0x1A57
    17c6:	98 17       	cp	r25, r24
    17c8:	10 f4       	brcc	.+4      	; 0x17ce <xTaskResumeFromISR+0x50>
    17ca:	80 93 57 1a 	sts	0x1A57, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9c 01       	movw	r18, r24
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	82 0f       	add	r24, r18
    17e0:	93 1f       	adc	r25, r19
    17e2:	8f 59       	subi	r24, 0x9F	; 159
    17e4:	95 4e       	sbci	r25, 0xE5	; 229
    17e6:	b7 01       	movw	r22, r14
    17e8:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
    17ec:	0a c0       	rjmp	.+20     	; 0x1802 <xTaskResumeFromISR+0x84>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    17ee:	be 01       	movw	r22, r28
    17f0:	64 5f       	subi	r22, 0xF4	; 244
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	87 e9       	ldi	r24, 0x97	; 151
    17f6:	9a e1       	ldi	r25, 0x1A	; 26
    17f8:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
	portBASE_TYPE xYieldRequired = pdFALSE;
    17fc:	10 e0       	ldi	r17, 0x00	; 0
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <xTaskResumeFromISR+0x84>
    1800:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
	}
    1802:	81 2f       	mov	r24, r17
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	1f 91       	pop	r17
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	08 95       	ret

00001810 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    181e:	85 e4       	ldi	r24, 0x45	; 69
    1820:	9a e0       	ldi	r25, 0x0A	; 10
    1822:	69 e0       	ldi	r22, 0x09	; 9
    1824:	72 e0       	ldi	r23, 0x02	; 2
    1826:	45 e5       	ldi	r20, 0x55	; 85
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	00 e0       	ldi	r16, 0x00	; 0
    1830:	ee 24       	eor	r14, r14
    1832:	ff 24       	eor	r15, r15
    1834:	cc 24       	eor	r12, r12
    1836:	dd 24       	eor	r13, r13
    1838:	aa 24       	eor	r10, r10
    183a:	bb 24       	eor	r11, r11
    183c:	0e 94 4d 0a 	call	0x149a	; 0x149a <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    1840:	81 30       	cpi	r24, 0x01	; 1
    1842:	49 f4       	brne	.+18     	; 0x1856 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    1844:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    1846:	80 93 56 1a 	sts	0x1A56, r24
		xTickCount = ( portTickType ) 0U;
    184a:	10 92 59 1a 	sts	0x1A59, r1
    184e:	10 92 58 1a 	sts	0x1A58, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1852:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	08 95       	ret

00001866 <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    1866:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    1868:	10 92 56 1a 	sts	0x1A56, r1
	vPortEndScheduler();
    186c:	0e 94 2a 05 	call	0xa54	; 0xa54 <vPortEndScheduler>
}
    1870:	08 95       	ret

00001872 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    1872:	80 91 55 1a 	lds	r24, 0x1A55
    1876:	8f 5f       	subi	r24, 0xFF	; 255
    1878:	80 93 55 1a 	sts	0x1A55, r24
}
    187c:	08 95       	ret

0000187e <xTaskGetTickCount>:
portTickType xTaskGetTickCount( void )
{
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    1884:	80 91 58 1a 	lds	r24, 0x1A58
    1888:	90 91 59 1a 	lds	r25, 0x1A59
	}
	taskEXIT_CRITICAL();
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
    1890:	08 95       	ret

00001892 <xTaskGetTickCountFromISR>:
{
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	xReturn = xTickCount;
    1892:	80 91 58 1a 	lds	r24, 0x1A58
    1896:	90 91 59 1a 	lds	r25, 0x1A59
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    189a:	08 95       	ret

0000189c <uxTaskGetNumberOfTasks>:

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    189c:	80 91 5a 1a 	lds	r24, 0x1A5A
}
    18a0:	08 95       	ret

000018a2 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    18aa:	80 91 55 1a 	lds	r24, 0x1A55
    18ae:	88 23       	and	r24, r24
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <vTaskIncrementTick+0x12>
    18b2:	b3 c0       	rjmp	.+358    	; 0x1a1a <vTaskIncrementTick+0x178>
	{
		++xTickCount;
    18b4:	80 91 58 1a 	lds	r24, 0x1A58
    18b8:	90 91 59 1a 	lds	r25, 0x1A59
    18bc:	01 96       	adiw	r24, 0x01	; 1
    18be:	90 93 59 1a 	sts	0x1A59, r25
    18c2:	80 93 58 1a 	sts	0x1A58, r24
		if( xTickCount == ( portTickType ) 0U )
    18c6:	80 91 58 1a 	lds	r24, 0x1A58
    18ca:	90 91 59 1a 	lds	r25, 0x1A59
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	99 f5       	brne	.+102    	; 0x1938 <vTaskIncrementTick+0x96>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
    18d2:	80 91 5d 1a 	lds	r24, 0x1A5D
    18d6:	90 91 5e 1a 	lds	r25, 0x1A5E
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    18da:	20 91 5b 1a 	lds	r18, 0x1A5B
    18de:	30 91 5c 1a 	lds	r19, 0x1A5C
    18e2:	30 93 5e 1a 	sts	0x1A5E, r19
    18e6:	20 93 5d 1a 	sts	0x1A5D, r18
			pxOverflowDelayedTaskList = pxTemp;
    18ea:	90 93 5c 1a 	sts	0x1A5C, r25
    18ee:	80 93 5b 1a 	sts	0x1A5B, r24
			xNumOfOverflows++;
    18f2:	80 91 52 1a 	lds	r24, 0x1A52
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	80 93 52 1a 	sts	0x1A52, r24

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    18fc:	e0 91 5d 1a 	lds	r30, 0x1A5D
    1900:	f0 91 5e 1a 	lds	r31, 0x1A5E
    1904:	80 81       	ld	r24, Z
    1906:	88 23       	and	r24, r24
    1908:	39 f4       	brne	.+14     	; 0x1918 <vTaskIncrementTick+0x76>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	9f ef       	ldi	r25, 0xFF	; 255
    190e:	90 93 0f 02 	sts	0x020F, r25
    1912:	80 93 0e 02 	sts	0x020E, r24
    1916:	10 c0       	rjmp	.+32     	; 0x1938 <vTaskIncrementTick+0x96>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1918:	e0 91 5d 1a 	lds	r30, 0x1A5D
    191c:	f0 91 5e 1a 	lds	r31, 0x1A5E
    1920:	05 80       	ldd	r0, Z+5	; 0x05
    1922:	f6 81       	ldd	r31, Z+6	; 0x06
    1924:	e0 2d       	mov	r30, r0
    1926:	06 80       	ldd	r0, Z+6	; 0x06
    1928:	f7 81       	ldd	r31, Z+7	; 0x07
    192a:	e0 2d       	mov	r30, r0
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	90 93 0f 02 	sts	0x020F, r25
    1934:	80 93 0e 02 	sts	0x020E, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    1938:	20 91 58 1a 	lds	r18, 0x1A58
    193c:	30 91 59 1a 	lds	r19, 0x1A59
    1940:	80 91 0e 02 	lds	r24, 0x020E
    1944:	90 91 0f 02 	lds	r25, 0x020F
    1948:	28 17       	cp	r18, r24
    194a:	39 07       	cpc	r19, r25
    194c:	08 f4       	brcc	.+2      	; 0x1950 <vTaskIncrementTick+0xae>
    194e:	6c c0       	rjmp	.+216    	; 0x1a28 <vTaskIncrementTick+0x186>
    1950:	e0 91 5d 1a 	lds	r30, 0x1A5D
    1954:	f0 91 5e 1a 	lds	r31, 0x1A5E
    1958:	80 81       	ld	r24, Z
    195a:	88 23       	and	r24, r24
    195c:	99 f0       	breq	.+38     	; 0x1984 <vTaskIncrementTick+0xe2>
    195e:	e0 91 5d 1a 	lds	r30, 0x1A5D
    1962:	f0 91 5e 1a 	lds	r31, 0x1A5E
    1966:	05 80       	ldd	r0, Z+5	; 0x05
    1968:	f6 81       	ldd	r31, Z+6	; 0x06
    196a:	e0 2d       	mov	r30, r0
    196c:	c6 81       	ldd	r28, Z+6	; 0x06
    196e:	d7 81       	ldd	r29, Z+7	; 0x07
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	20 91 58 1a 	lds	r18, 0x1A58
    1978:	30 91 59 1a 	lds	r19, 0x1A59
    197c:	28 17       	cp	r18, r24
    197e:	39 07       	cpc	r19, r25
    1980:	f8 f4       	brcc	.+62     	; 0x19c0 <vTaskIncrementTick+0x11e>
    1982:	19 c0       	rjmp	.+50     	; 0x19b6 <vTaskIncrementTick+0x114>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f ef       	ldi	r25, 0xFF	; 255
    1988:	90 93 0f 02 	sts	0x020F, r25
    198c:	80 93 0e 02 	sts	0x020E, r24
    1990:	4b c0       	rjmp	.+150    	; 0x1a28 <vTaskIncrementTick+0x186>
    1992:	e0 91 5d 1a 	lds	r30, 0x1A5D
    1996:	f0 91 5e 1a 	lds	r31, 0x1A5E
    199a:	05 80       	ldd	r0, Z+5	; 0x05
    199c:	f6 81       	ldd	r31, Z+6	; 0x06
    199e:	e0 2d       	mov	r30, r0
    19a0:	c6 81       	ldd	r28, Z+6	; 0x06
    19a2:	d7 81       	ldd	r29, Z+7	; 0x07
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	20 91 58 1a 	lds	r18, 0x1A58
    19ac:	30 91 59 1a 	lds	r19, 0x1A59
    19b0:	28 17       	cp	r18, r24
    19b2:	39 07       	cpc	r19, r25
    19b4:	28 f4       	brcc	.+10     	; 0x19c0 <vTaskIncrementTick+0x11e>
    19b6:	90 93 0f 02 	sts	0x020F, r25
    19ba:	80 93 0e 02 	sts	0x020E, r24
    19be:	34 c0       	rjmp	.+104    	; 0x1a28 <vTaskIncrementTick+0x186>
    19c0:	8e 01       	movw	r16, r28
    19c2:	0e 5f       	subi	r16, 0xFE	; 254
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
    19cc:	8c 89       	ldd	r24, Y+20	; 0x14
    19ce:	9d 89       	ldd	r25, Y+21	; 0x15
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	21 f0       	breq	.+8      	; 0x19dc <vTaskIncrementTick+0x13a>
    19d4:	ce 01       	movw	r24, r28
    19d6:	0c 96       	adiw	r24, 0x0c	; 12
    19d8:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
    19dc:	8e 89       	ldd	r24, Y+22	; 0x16
    19de:	90 91 57 1a 	lds	r25, 0x1A57
    19e2:	98 17       	cp	r25, r24
    19e4:	10 f4       	brcc	.+4      	; 0x19ea <vTaskIncrementTick+0x148>
    19e6:	80 93 57 1a 	sts	0x1A57, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	9c 01       	movw	r18, r24
    19ee:	22 0f       	add	r18, r18
    19f0:	33 1f       	adc	r19, r19
    19f2:	22 0f       	add	r18, r18
    19f4:	33 1f       	adc	r19, r19
    19f6:	22 0f       	add	r18, r18
    19f8:	33 1f       	adc	r19, r19
    19fa:	82 0f       	add	r24, r18
    19fc:	93 1f       	adc	r25, r19
    19fe:	8f 59       	subi	r24, 0x9F	; 159
    1a00:	95 4e       	sbci	r25, 0xE5	; 229
    1a02:	b8 01       	movw	r22, r16
    1a04:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
    1a08:	e0 91 5d 1a 	lds	r30, 0x1A5D
    1a0c:	f0 91 5e 1a 	lds	r31, 0x1A5E
    1a10:	80 81       	ld	r24, Z
    1a12:	88 23       	and	r24, r24
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <vTaskIncrementTick+0x176>
    1a16:	bd cf       	rjmp	.-134    	; 0x1992 <vTaskIncrementTick+0xf0>
    1a18:	b5 cf       	rjmp	.-150    	; 0x1984 <vTaskIncrementTick+0xe2>
	}
	else
	{
		++uxMissedTicks;
    1a1a:	80 91 54 1a 	lds	r24, 0x1A54
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	80 93 54 1a 	sts	0x1A54, r24

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    1a24:	0e 94 b3 03 	call	0x766	; 0x766 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    1a28:	80 91 54 1a 	lds	r24, 0x1A54
    1a2c:	88 23       	and	r24, r24
    1a2e:	11 f4       	brne	.+4      	; 0x1a34 <vTaskIncrementTick+0x192>
		{
			vApplicationTickHook();
    1a30:	0e 94 b3 03 	call	0x766	; 0x766 <vApplicationTickHook>
		}
	}
	#endif
}
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	08 95       	ret

00001a3e <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	cf 92       	push	r12
    1a44:	df 92       	push	r13
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    1a58:	80 91 55 1a 	lds	r24, 0x1A55
    1a5c:	81 50       	subi	r24, 0x01	; 1
    1a5e:	80 93 55 1a 	sts	0x1A55, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1a62:	80 91 55 1a 	lds	r24, 0x1A55
    1a66:	88 23       	and	r24, r24
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <xTaskResumeAll+0x2e>
    1a6a:	69 c0       	rjmp	.+210    	; 0x1b3e <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1a6c:	80 91 5a 1a 	lds	r24, 0x1A5A
    1a70:	88 23       	and	r24, r24
    1a72:	81 f5       	brne	.+96     	; 0x1ad4 <xTaskResumeAll+0x96>
    1a74:	67 c0       	rjmp	.+206    	; 0x1b44 <xTaskResumeAll+0x106>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1a76:	d6 01       	movw	r26, r12
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a7e:	d7 81       	ldd	r29, Z+7	; 0x07
					uxListRemove( &( pxTCB->xEventListItem ) );
    1a80:	ce 01       	movw	r24, r28
    1a82:	0c 96       	adiw	r24, 0x0c	; 12
    1a84:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					uxListRemove( &( pxTCB->xGenericListItem ) );
    1a88:	8e 01       	movw	r16, r28
    1a8a:	0e 5f       	subi	r16, 0xFE	; 254
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	c8 01       	movw	r24, r16
    1a90:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    1a94:	8e 89       	ldd	r24, Y+22	; 0x16
    1a96:	90 91 57 1a 	lds	r25, 0x1A57
    1a9a:	98 17       	cp	r25, r24
    1a9c:	10 f4       	brcc	.+4      	; 0x1aa2 <xTaskResumeAll+0x64>
    1a9e:	80 93 57 1a 	sts	0x1A57, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 01       	movw	r18, r24
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	22 0f       	add	r18, r18
    1aac:	33 1f       	adc	r19, r19
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	8f 59       	subi	r24, 0x9F	; 159
    1ab8:	95 4e       	sbci	r25, 0xE5	; 229
    1aba:	b8 01       	movw	r22, r16
    1abc:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1ac0:	e0 91 50 1a 	lds	r30, 0x1A50
    1ac4:	f0 91 51 1a 	lds	r31, 0x1A51
    1ac8:	9e 89       	ldd	r25, Y+22	; 0x16
    1aca:	86 89       	ldd	r24, Z+22	; 0x16
    1acc:	98 17       	cp	r25, r24
    1ace:	88 f0       	brcs	.+34     	; 0x1af2 <xTaskResumeAll+0xb4>
					{
						xYieldRequired = pdTRUE;
    1ad0:	ba 2c       	mov	r11, r10
    1ad2:	0f c0       	rjmp	.+30     	; 0x1af2 <xTaskResumeAll+0xb4>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    1ad4:	bb 24       	eor	r11, r11
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f7 e9       	ldi	r31, 0x97	; 151
    1ada:	ef 2e       	mov	r14, r31
    1adc:	fa e1       	ldi	r31, 0x1A	; 26
    1ade:	ff 2e       	mov	r15, r31
    1ae0:	f0 2d       	mov	r31, r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    1ae2:	0f 2e       	mov	r0, r31
    1ae4:	fc e9       	ldi	r31, 0x9C	; 156
    1ae6:	cf 2e       	mov	r12, r31
    1ae8:	fa e1       	ldi	r31, 0x1A	; 26
    1aea:	df 2e       	mov	r13, r31
    1aec:	f0 2d       	mov	r31, r0

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldRequired = pdTRUE;
    1aee:	aa 24       	eor	r10, r10
    1af0:	a3 94       	inc	r10
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    1af2:	f7 01       	movw	r30, r14
    1af4:	80 81       	ld	r24, Z
    1af6:	88 23       	and	r24, r24
    1af8:	09 f0       	breq	.+2      	; 0x1afc <xTaskResumeAll+0xbe>
    1afa:	bd cf       	rjmp	.-134    	; 0x1a76 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1afc:	80 91 54 1a 	lds	r24, 0x1A54
    1b00:	88 23       	and	r24, r24
    1b02:	81 f0       	breq	.+32     	; 0x1b24 <xTaskResumeAll+0xe6>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1b04:	80 91 54 1a 	lds	r24, 0x1A54
    1b08:	88 23       	and	r24, r24
    1b0a:	99 f0       	breq	.+38     	; 0x1b32 <xTaskResumeAll+0xf4>
					{
						vTaskIncrementTick();
    1b0c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <vTaskIncrementTick>
						--uxMissedTicks;
    1b10:	80 91 54 1a 	lds	r24, 0x1A54
    1b14:	81 50       	subi	r24, 0x01	; 1
    1b16:	80 93 54 1a 	sts	0x1A54, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    1b1a:	80 91 54 1a 	lds	r24, 0x1A54
    1b1e:	88 23       	and	r24, r24
    1b20:	a9 f7       	brne	.-22     	; 0x1b0c <xTaskResumeAll+0xce>
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <xTaskResumeAll+0xf4>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    1b24:	f1 e0       	ldi	r31, 0x01	; 1
    1b26:	bf 16       	cp	r11, r31
    1b28:	21 f0       	breq	.+8      	; 0x1b32 <xTaskResumeAll+0xf4>
    1b2a:	80 91 53 1a 	lds	r24, 0x1A53
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	41 f4       	brne	.+16     	; 0x1b42 <xTaskResumeAll+0x104>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
    1b32:	10 92 53 1a 	sts	0x1A53, r1
					portYIELD_WITHIN_API();
    1b36:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <xTaskResumeAll+0x106>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <xTaskResumeAll+0x106>
    1b42:	80 e0       	ldi	r24, 0x00	; 0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	08 95       	ret

00001b5e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	b1 f0       	breq	.+44     	; 0x1b94 <vTaskDelay+0x36>
		{
			vTaskSuspendAll();
    1b68:	0e 94 39 0c 	call	0x1872	; 0x1872 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1b6c:	80 91 58 1a 	lds	r24, 0x1A58
    1b70:	90 91 59 1a 	lds	r25, 0x1A59
    1b74:	c8 0f       	add	r28, r24
    1b76:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1b78:	80 91 50 1a 	lds	r24, 0x1A50
    1b7c:	90 91 51 1a 	lds	r25, 0x1A51
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1b86:	ce 01       	movw	r24, r28
    1b88:	0e 94 0e 0a 	call	0x141c	; 0x141c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1b8c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1b90:	88 23       	and	r24, r24
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    1b94:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
		}
	}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    1b9e:	0f 93       	push	r16
    1ba0:	1f 93       	push	r17
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	8c 01       	movw	r16, r24
    1ba8:	eb 01       	movw	r28, r22
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    1baa:	0e 94 39 0c 	call	0x1872	; 0x1872 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    1bae:	f8 01       	movw	r30, r16
    1bb0:	80 81       	ld	r24, Z
    1bb2:	91 81       	ldd	r25, Z+1	; 0x01
    1bb4:	c8 0f       	add	r28, r24
    1bb6:	d9 1f       	adc	r29, r25

			if( xTickCount < *pxPreviousWakeTime )
    1bb8:	20 91 58 1a 	lds	r18, 0x1A58
    1bbc:	30 91 59 1a 	lds	r19, 0x1A59
    1bc0:	28 17       	cp	r18, r24
    1bc2:	39 07       	cpc	r19, r25
    1bc4:	68 f4       	brcc	.+26     	; 0x1be0 <vTaskDelayUntil+0x42>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    1bc6:	c8 17       	cp	r28, r24
    1bc8:	d9 07       	cpc	r29, r25
    1bca:	50 f5       	brcc	.+84     	; 0x1c20 <vTaskDelayUntil+0x82>
    1bcc:	80 91 58 1a 	lds	r24, 0x1A58
    1bd0:	90 91 59 1a 	lds	r25, 0x1A59
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1bd4:	d1 83       	std	Z+1, r29	; 0x01
    1bd6:	c0 83       	st	Z, r28

			if( xShouldDelay != pdFALSE )
    1bd8:	8c 17       	cp	r24, r28
    1bda:	9d 07       	cpc	r25, r29
    1bdc:	b0 f4       	brcc	.+44     	; 0x1c0a <vTaskDelayUntil+0x6c>
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <vTaskDelayUntil+0x58>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    1be0:	c8 17       	cp	r28, r24
    1be2:	d9 07       	cpc	r29, r25
    1be4:	c8 f0       	brcs	.+50     	; 0x1c18 <vTaskDelayUntil+0x7a>
    1be6:	80 91 58 1a 	lds	r24, 0x1A58
    1bea:	90 91 59 1a 	lds	r25, 0x1A59
    1bee:	8c 17       	cp	r24, r28
    1bf0:	9d 07       	cpc	r25, r29
    1bf2:	90 f0       	brcs	.+36     	; 0x1c18 <vTaskDelayUntil+0x7a>
    1bf4:	15 c0       	rjmp	.+42     	; 0x1c20 <vTaskDelayUntil+0x82>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1bf6:	80 91 50 1a 	lds	r24, 0x1A50
    1bfa:	90 91 51 1a 	lds	r25, 0x1A51
    1bfe:	02 96       	adiw	r24, 0x02	; 2
    1c00:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1c04:	ce 01       	movw	r24, r28
    1c06:	0e 94 0e 0a 	call	0x141c	; 0x141c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    1c0a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1c0e:	88 23       	and	r24, r24
    1c10:	59 f4       	brne	.+22     	; 0x1c28 <vTaskDelayUntil+0x8a>
		{
			portYIELD_WITHIN_API();
    1c12:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <vTaskDelayUntil+0x8a>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1c18:	f8 01       	movw	r30, r16
    1c1a:	d1 83       	std	Z+1, r29	; 0x01
    1c1c:	c0 83       	st	Z, r28
    1c1e:	eb cf       	rjmp	.-42     	; 0x1bf6 <vTaskDelayUntil+0x58>
    1c20:	f8 01       	movw	r30, r16
    1c22:	d1 83       	std	Z+1, r29	; 0x01
    1c24:	c0 83       	st	Z, r28
    1c26:	f1 cf       	rjmp	.-30     	; 0x1c0a <vTaskDelayUntil+0x6c>
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1c32:	80 91 55 1a 	lds	r24, 0x1A55
    1c36:	88 23       	and	r24, r24
    1c38:	99 f4       	brne	.+38     	; 0x1c60 <vTaskSwitchContext+0x2e>

//BB Commented out...
//		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c3a:	80 91 57 1a 	lds	r24, 0x1A57
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	fc 01       	movw	r30, r24
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	8e 0f       	add	r24, r30
    1c50:	9f 1f       	adc	r25, r31
    1c52:	fc 01       	movw	r30, r24
    1c54:	ef 59       	subi	r30, 0x9F	; 159
    1c56:	f5 4e       	sbci	r31, 0xE5	; 229
    1c58:	80 81       	ld	r24, Z
    1c5a:	88 23       	and	r24, r24
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <vTaskSwitchContext+0x36>
    1c5e:	1b c0       	rjmp	.+54     	; 0x1c96 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 53 1a 	sts	0x1A53, r24
    1c66:	08 95       	ret

//BB Commented out...
//		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
    1c68:	80 91 57 1a 	lds	r24, 0x1A57
    1c6c:	81 50       	subi	r24, 0x01	; 1
    1c6e:	80 93 57 1a 	sts	0x1A57, r24
    1c72:	80 91 57 1a 	lds	r24, 0x1A57
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	ee 0f       	add	r30, r30
    1c7c:	ff 1f       	adc	r31, r31
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	ee 0f       	add	r30, r30
    1c84:	ff 1f       	adc	r31, r31
    1c86:	8e 0f       	add	r24, r30
    1c88:	9f 1f       	adc	r25, r31
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	ef 59       	subi	r30, 0x9F	; 159
    1c8e:	f5 4e       	sbci	r31, 0xE5	; 229
    1c90:	80 81       	ld	r24, Z
    1c92:	88 23       	and	r24, r24
    1c94:	49 f3       	breq	.-46     	; 0x1c68 <vTaskSwitchContext+0x36>
    1c96:	80 91 57 1a 	lds	r24, 0x1A57
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	ee 0f       	add	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	e8 0f       	add	r30, r24
    1cac:	f9 1f       	adc	r31, r25
    1cae:	ef 59       	subi	r30, 0x9F	; 159
    1cb0:	f5 4e       	sbci	r31, 0xE5	; 229
    1cb2:	a1 81       	ldd	r26, Z+1	; 0x01
    1cb4:	b2 81       	ldd	r27, Z+2	; 0x02
    1cb6:	12 96       	adiw	r26, 0x02	; 2
    1cb8:	0d 90       	ld	r0, X+
    1cba:	bc 91       	ld	r27, X
    1cbc:	a0 2d       	mov	r26, r0
    1cbe:	b2 83       	std	Z+2, r27	; 0x02
    1cc0:	a1 83       	std	Z+1, r26	; 0x01
    1cc2:	cf 01       	movw	r24, r30
    1cc4:	03 96       	adiw	r24, 0x03	; 3
    1cc6:	a8 17       	cp	r26, r24
    1cc8:	b9 07       	cpc	r27, r25
    1cca:	31 f4       	brne	.+12     	; 0x1cd8 <vTaskSwitchContext+0xa6>
    1ccc:	12 96       	adiw	r26, 0x02	; 2
    1cce:	8d 91       	ld	r24, X+
    1cd0:	9c 91       	ld	r25, X
    1cd2:	13 97       	sbiw	r26, 0x03	; 3
    1cd4:	92 83       	std	Z+2, r25	; 0x02
    1cd6:	81 83       	std	Z+1, r24	; 0x01
    1cd8:	01 80       	ldd	r0, Z+1	; 0x01
    1cda:	f2 81       	ldd	r31, Z+2	; 0x02
    1cdc:	e0 2d       	mov	r30, r0
    1cde:	86 81       	ldd	r24, Z+6	; 0x06
    1ce0:	97 81       	ldd	r25, Z+7	; 0x07
    1ce2:	90 93 51 1a 	sts	0x1A51, r25
    1ce6:	80 93 50 1a 	sts	0x1A50, r24
    1cea:	08 95       	ret

00001cec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	7c 01       	movw	r14, r24
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    1d00:	80 91 50 1a 	lds	r24, 0x1A50
    1d04:	90 91 51 1a 	lds	r25, 0x1A51
    1d08:	e8 16       	cp	r14, r24
    1d0a:	f9 06       	cpc	r15, r25
    1d0c:	21 f0       	breq	.+8      	; 0x1d16 <vTaskSuspend+0x2a>
			{
				pxTaskToSuspend = NULL;
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1d0e:	e1 14       	cp	r14, r1
    1d10:	f1 04       	cpc	r15, r1
    1d12:	41 f4       	brne	.+16     	; 0x1d24 <vTaskSuspend+0x38>
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <vTaskSuspend+0x2e>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
			{
				pxTaskToSuspend = NULL;
    1d16:	ee 24       	eor	r14, r14
    1d18:	ff 24       	eor	r15, r15
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    1d1a:	c0 91 50 1a 	lds	r28, 0x1A50
    1d1e:	d0 91 51 1a 	lds	r29, 0x1A51
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <vTaskSuspend+0x3a>
    1d24:	e7 01       	movw	r28, r14

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1d26:	8e 01       	movw	r16, r28
    1d28:	0e 5f       	subi	r16, 0xFE	; 254
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    1d32:	8c 89       	ldd	r24, Y+20	; 0x14
    1d34:	9d 89       	ldd	r25, Y+21	; 0x15
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	21 f0       	breq	.+8      	; 0x1d42 <vTaskSuspend+0x56>
			{
				uxListRemove( &( pxTCB->xEventListItem ) );
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	0c 96       	adiw	r24, 0x0c	; 12
    1d3e:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    1d42:	80 ea       	ldi	r24, 0xA0	; 160
    1d44:	9a e1       	ldi	r25, 0x1A	; 26
    1d46:	b8 01       	movw	r22, r16
    1d48:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    1d50:	e1 14       	cp	r14, r1
    1d52:	f1 04       	cpc	r15, r1
    1d54:	a1 f4       	brne	.+40     	; 0x1d7e <vTaskSuspend+0x92>
		{
			if( xSchedulerRunning != pdFALSE )
    1d56:	80 91 56 1a 	lds	r24, 0x1A56
    1d5a:	88 23       	and	r24, r24
    1d5c:	19 f0       	breq	.+6      	; 0x1d64 <vTaskSuspend+0x78>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    1d5e:	0e 94 2b 05 	call	0xa56	; 0xa56 <vPortYield>
    1d62:	0d c0       	rjmp	.+26     	; 0x1d7e <vTaskSuspend+0x92>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    1d64:	90 91 a0 1a 	lds	r25, 0x1AA0
    1d68:	80 91 5a 1a 	lds	r24, 0x1A5A
    1d6c:	98 17       	cp	r25, r24
    1d6e:	29 f4       	brne	.+10     	; 0x1d7a <vTaskSuspend+0x8e>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    1d70:	10 92 51 1a 	sts	0x1A51, r1
    1d74:	10 92 50 1a 	sts	0x1A50, r1
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <vTaskSuspend+0x92>
				}
				else
				{
					vTaskSwitchContext();
    1d7a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <vTaskSwitchContext>
				}
			}
		}
	}
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	08 95       	ret

00001d8c <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	eb 01       	movw	r28, r22
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    1d92:	60 91 50 1a 	lds	r22, 0x1A50
    1d96:	70 91 51 1a 	lds	r23, 0x1A51
    1d9a:	64 5f       	subi	r22, 0xF4	; 244
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	0e 94 ef 03 	call	0x7de	; 0x7de <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
    1da2:	80 91 50 1a 	lds	r24, 0x1A50
    1da6:	90 91 51 1a 	lds	r25, 0x1A51
    1daa:	02 96       	adiw	r24, 0x02	; 2
    1dac:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	cf 3f       	cpi	r28, 0xFF	; 255
    1db4:	d8 07       	cpc	r29, r24
    1db6:	59 f4       	brne	.+22     	; 0x1dce <vTaskPlaceOnEventList+0x42>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1db8:	60 91 50 1a 	lds	r22, 0x1A50
    1dbc:	70 91 51 1a 	lds	r23, 0x1A51
    1dc0:	6e 5f       	subi	r22, 0xFE	; 254
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	80 ea       	ldi	r24, 0xA0	; 160
    1dc6:	9a e1       	ldi	r25, 0x1A	; 26
    1dc8:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
    1dcc:	08 c0       	rjmp	.+16     	; 0x1dde <vTaskPlaceOnEventList+0x52>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    1dce:	80 91 58 1a 	lds	r24, 0x1A58
    1dd2:	90 91 59 1a 	lds	r25, 0x1A59
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    1dd6:	8c 0f       	add	r24, r28
    1dd8:	9d 1f       	adc	r25, r29
    1dda:	0e 94 0e 0a 	call	0x141c	; 0x141c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	08 95       	ret

00001de4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    1de4:	0f 93       	push	r16
    1de6:	1f 93       	push	r17
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1dec:	dc 01       	movw	r26, r24
    1dee:	15 96       	adiw	r26, 0x05	; 5
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	16 97       	sbiw	r26, 0x06	; 6
    1df6:	06 81       	ldd	r16, Z+6	; 0x06
    1df8:	17 81       	ldd	r17, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1dfa:	e8 01       	movw	r28, r16
    1dfc:	2c 96       	adiw	r28, 0x0c	; 12
    1dfe:	ce 01       	movw	r24, r28
    1e00:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    1e04:	80 91 55 1a 	lds	r24, 0x1A55
    1e08:	88 23       	and	r24, r24
    1e0a:	e9 f4       	brne	.+58     	; 0x1e46 <xTaskRemoveFromEventList+0x62>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    1e0c:	e8 01       	movw	r28, r16
    1e0e:	22 96       	adiw	r28, 0x02	; 2
    1e10:	ce 01       	movw	r24, r28
    1e12:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    1e16:	f8 01       	movw	r30, r16
    1e18:	86 89       	ldd	r24, Z+22	; 0x16
    1e1a:	90 91 57 1a 	lds	r25, 0x1A57
    1e1e:	98 17       	cp	r25, r24
    1e20:	10 f4       	brcc	.+4      	; 0x1e26 <xTaskRemoveFromEventList+0x42>
    1e22:	80 93 57 1a 	sts	0x1A57, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 01       	movw	r18, r24
    1e2a:	22 0f       	add	r18, r18
    1e2c:	33 1f       	adc	r19, r19
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	22 0f       	add	r18, r18
    1e34:	33 1f       	adc	r19, r19
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	8f 59       	subi	r24, 0x9F	; 159
    1e3c:	95 4e       	sbci	r25, 0xE5	; 229
    1e3e:	be 01       	movw	r22, r28
    1e40:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <xTaskRemoveFromEventList+0x6c>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1e46:	87 e9       	ldi	r24, 0x97	; 151
    1e48:	9a e1       	ldi	r25, 0x1A	; 26
    1e4a:	be 01       	movw	r22, r28
    1e4c:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1e50:	e0 91 50 1a 	lds	r30, 0x1A50
    1e54:	f0 91 51 1a 	lds	r31, 0x1A51
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	d8 01       	movw	r26, r16
    1e5c:	56 96       	adiw	r26, 0x16	; 22
    1e5e:	2c 91       	ld	r18, X
    1e60:	56 97       	sbiw	r26, 0x16	; 22
    1e62:	96 89       	ldd	r25, Z+22	; 0x16
    1e64:	29 17       	cp	r18, r25
    1e66:	08 f4       	brcc	.+2      	; 0x1e6a <xTaskRemoveFromEventList+0x86>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
}
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    1e74:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1e76:	80 91 52 1a 	lds	r24, 0x1A52
    1e7a:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    1e7c:	80 91 58 1a 	lds	r24, 0x1A58
    1e80:	90 91 59 1a 	lds	r25, 0x1A59
    1e84:	92 83       	std	Z+2, r25	; 0x02
    1e86:	81 83       	std	Z+1, r24	; 0x01
}
    1e88:	08 95       	ret

00001e8a <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	db 01       	movw	r26, r22
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    1e94:	4d 91       	ld	r20, X+
    1e96:	5c 91       	ld	r21, X
    1e98:	11 97       	sbiw	r26, 0x01	; 1
    1e9a:	6f ef       	ldi	r22, 0xFF	; 255
    1e9c:	4f 3f       	cpi	r20, 0xFF	; 255
    1e9e:	56 07       	cpc	r21, r22
    1ea0:	51 f1       	breq	.+84     	; 0x1ef6 <xTaskCheckForTimeOut+0x6c>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    1ea2:	80 91 52 1a 	lds	r24, 0x1A52
    1ea6:	90 81       	ld	r25, Z
    1ea8:	98 17       	cp	r25, r24
    1eaa:	49 f0       	breq	.+18     	; 0x1ebe <xTaskCheckForTimeOut+0x34>
    1eac:	20 91 58 1a 	lds	r18, 0x1A58
    1eb0:	30 91 59 1a 	lds	r19, 0x1A59
    1eb4:	81 81       	ldd	r24, Z+1	; 0x01
    1eb6:	92 81       	ldd	r25, Z+2	; 0x02
    1eb8:	28 17       	cp	r18, r24
    1eba:	39 07       	cpc	r19, r25
    1ebc:	f0 f4       	brcc	.+60     	; 0x1efa <xTaskCheckForTimeOut+0x70>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    1ebe:	80 91 58 1a 	lds	r24, 0x1A58
    1ec2:	90 91 59 1a 	lds	r25, 0x1A59
    1ec6:	21 81       	ldd	r18, Z+1	; 0x01
    1ec8:	32 81       	ldd	r19, Z+2	; 0x02
    1eca:	82 1b       	sub	r24, r18
    1ecc:	93 0b       	sbc	r25, r19
    1ece:	84 17       	cp	r24, r20
    1ed0:	95 07       	cpc	r25, r21
    1ed2:	a8 f4       	brcc	.+42     	; 0x1efe <xTaskCheckForTimeOut+0x74>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    1ed4:	80 91 58 1a 	lds	r24, 0x1A58
    1ed8:	90 91 59 1a 	lds	r25, 0x1A59
    1edc:	b9 01       	movw	r22, r18
    1ede:	68 1b       	sub	r22, r24
    1ee0:	79 0b       	sbc	r23, r25
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	84 0f       	add	r24, r20
    1ee6:	95 1f       	adc	r25, r21
    1ee8:	8d 93       	st	X+, r24
    1eea:	9c 93       	st	X, r25
			vTaskSetTimeOutState( pxTimeOut );
    1eec:	cf 01       	movw	r24, r30
    1eee:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <xTaskCheckForTimeOut+0x76>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <xTaskCheckForTimeOut+0x76>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <xTaskCheckForTimeOut+0x76>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
    1efe:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	taskEXIT_CRITICAL();
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
    1f04:	08 95       	ret

00001f06 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	80 93 53 1a 	sts	0x1A53, r24
}
    1f0c:	08 95       	ret

00001f0e <uxTaskGetStackHighWaterMark>:
	{
	tskTCB *pxTCB;
	unsigned char *pcEndOfStack;
	unsigned portBASE_TYPE uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	29 f4       	brne	.+10     	; 0x1f1c <uxTaskGetStackHighWaterMark+0xe>
    1f12:	e0 91 50 1a 	lds	r30, 0x1A50
    1f16:	f0 91 51 1a 	lds	r31, 0x1A51
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <uxTaskGetStackHighWaterMark+0x10>
    1f1c:	fc 01       	movw	r30, r24

		#if portSTACK_GROWTH < 0
		{
			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
    1f1e:	07 88       	ldd	r0, Z+23	; 0x17
    1f20:	f0 8d       	ldd	r31, Z+24	; 0x18
    1f22:	e0 2d       	mov	r30, r0

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1f24:	80 81       	ld	r24, Z
    1f26:	85 3a       	cpi	r24, 0xA5	; 165
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <uxTaskGetStackHighWaterMark+0x2c>
#endif
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
    1f2a:	31 96       	adiw	r30, 0x01	; 1

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0

		while( *pucStackByte == tskSTACK_FILL_BYTE )
		{
			pucStackByte -= portSTACK_GROWTH;
			usCount++;
    1f30:	01 96       	adiw	r24, 0x01	; 1

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;

		while( *pucStackByte == tskSTACK_FILL_BYTE )
    1f32:	21 91       	ld	r18, Z+
    1f34:	25 3a       	cpi	r18, 0xA5	; 165
    1f36:	e1 f3       	breq	.-8      	; 0x1f30 <uxTaskGetStackHighWaterMark+0x22>
    1f38:	08 95       	ret

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
	{
	register unsigned short usCount = 0U;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
		#endif

		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );

		return uxReturn;
	}
    1f3e:	08 95       	ret

00001f40 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    1f40:	80 91 50 1a 	lds	r24, 0x1A50
    1f44:	90 91 51 1a 	lds	r25, 0x1A51

		return xReturn;
	}
    1f48:	08 95       	ret

00001f4a <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <vTaskPriorityInherit+0x10>
    1f58:	4d c0       	rjmp	.+154    	; 0x1ff4 <vTaskPriorityInherit+0xaa>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    1f5a:	8e 89       	ldd	r24, Y+22	; 0x16
    1f5c:	e0 91 50 1a 	lds	r30, 0x1A50
    1f60:	f0 91 51 1a 	lds	r31, 0x1A51
    1f64:	96 89       	ldd	r25, Z+22	; 0x16
    1f66:	89 17       	cp	r24, r25
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <vTaskPriorityInherit+0x22>
    1f6a:	44 c0       	rjmp	.+136    	; 0x1ff4 <vTaskPriorityInherit+0xaa>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    1f6c:	e0 91 50 1a 	lds	r30, 0x1A50
    1f70:	f0 91 51 1a 	lds	r31, 0x1A51
    1f74:	96 89       	ldd	r25, Z+22	; 0x16
    1f76:	24 e0       	ldi	r18, 0x04	; 4
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	29 1b       	sub	r18, r25
    1f7c:	31 09       	sbc	r19, r1
    1f7e:	3d 87       	std	Y+13, r19	; 0x0d
    1f80:	2c 87       	std	Y+12, r18	; 0x0c

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 01       	movw	r18, r24
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	22 0f       	add	r18, r18
    1f8c:	33 1f       	adc	r19, r19
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	82 0f       	add	r24, r18
    1f94:	93 1f       	adc	r25, r19
    1f96:	8f 59       	subi	r24, 0x9F	; 159
    1f98:	95 4e       	sbci	r25, 0xE5	; 229
    1f9a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f9c:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f9e:	28 17       	cp	r18, r24
    1fa0:	39 07       	cpc	r19, r25
    1fa2:	11 f5       	brne	.+68     	; 0x1fe8 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    1fa4:	8e 01       	movw	r16, r28
    1fa6:	0e 5f       	subi	r16, 0xFE	; 254
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1fb0:	e0 91 50 1a 	lds	r30, 0x1A50
    1fb4:	f0 91 51 1a 	lds	r31, 0x1A51
    1fb8:	86 89       	ldd	r24, Z+22	; 0x16
    1fba:	8e 8b       	std	Y+22, r24	; 0x16
					prvAddTaskToReadyQueue( pxTCB );
    1fbc:	90 91 57 1a 	lds	r25, 0x1A57
    1fc0:	98 17       	cp	r25, r24
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <vTaskPriorityInherit+0x7e>
    1fc4:	80 93 57 1a 	sts	0x1A57, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9c 01       	movw	r18, r24
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	22 0f       	add	r18, r18
    1fd2:	33 1f       	adc	r19, r19
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	8f 59       	subi	r24, 0x9F	; 159
    1fde:	95 4e       	sbci	r25, 0xE5	; 229
    1fe0:	b8 01       	movw	r22, r16
    1fe2:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
    1fe6:	06 c0       	rjmp	.+12     	; 0x1ff4 <vTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    1fe8:	e0 91 50 1a 	lds	r30, 0x1A50
    1fec:	f0 91 51 1a 	lds	r31, 0x1A51
    1ff0:	86 89       	ldd	r24, Z+22	; 0x16
    1ff2:	8e 8b       	std	Y+22, r24	; 0x16
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	08 95       	ret

00001ffe <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	49 f1       	breq	.+82     	; 0x205e <vTaskPriorityDisinherit+0x60>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    200c:	9e 89       	ldd	r25, Y+22	; 0x16
    200e:	89 a5       	lds	r24, 0x69
    2010:	98 17       	cp	r25, r24
    2012:	29 f1       	breq	.+74     	; 0x205e <vTaskPriorityDisinherit+0x60>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
    2014:	8e 01       	movw	r16, r28
    2016:	0e 5f       	subi	r16, 0xFE	; 254
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 2c 04 	call	0x858	; 0x858 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    2020:	49 a5       	lds	r20, 0x69
    2022:	4e 8b       	std	Y+22, r20	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    2024:	24 2f       	mov	r18, r20
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	84 e0       	ldi	r24, 0x04	; 4
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	82 1b       	sub	r24, r18
    202e:	93 0b       	sbc	r25, r19
    2030:	9d 87       	std	Y+13, r25	; 0x0d
    2032:	8c 87       	std	Y+12, r24	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    2034:	80 91 57 1a 	lds	r24, 0x1A57
    2038:	84 17       	cp	r24, r20
    203a:	10 f4       	brcc	.+4      	; 0x2040 <vTaskPriorityDisinherit+0x42>
    203c:	40 93 57 1a 	sts	0x1A57, r20
    2040:	c9 01       	movw	r24, r18
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	28 0f       	add	r18, r24
    2050:	39 1f       	adc	r19, r25
    2052:	c9 01       	movw	r24, r18
    2054:	8f 59       	subi	r24, 0x9F	; 159
    2056:	95 4e       	sbci	r25, 0xE5	; 229
    2058:	b8 01       	movw	r22, r16
    205a:	0e 94 c6 03 	call	0x78c	; 0x78c <vListInsertEnd>
			}
		}
	}
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <__udivmodqi4>:
    2068:	99 1b       	sub	r25, r25
    206a:	79 e0       	ldi	r23, 0x09	; 9
    206c:	04 c0       	rjmp	.+8      	; 0x2076 <__udivmodqi4_ep>

0000206e <__udivmodqi4_loop>:
    206e:	99 1f       	adc	r25, r25
    2070:	96 17       	cp	r25, r22
    2072:	08 f0       	brcs	.+2      	; 0x2076 <__udivmodqi4_ep>
    2074:	96 1b       	sub	r25, r22

00002076 <__udivmodqi4_ep>:
    2076:	88 1f       	adc	r24, r24
    2078:	7a 95       	dec	r23
    207a:	c9 f7       	brne	.-14     	; 0x206e <__udivmodqi4_loop>
    207c:	80 95       	com	r24
    207e:	08 95       	ret

00002080 <memcpy>:
    2080:	fb 01       	movw	r30, r22
    2082:	dc 01       	movw	r26, r24
    2084:	02 c0       	rjmp	.+4      	; 0x208a <memcpy+0xa>
    2086:	01 90       	ld	r0, Z+
    2088:	0d 92       	st	X+, r0
    208a:	41 50       	subi	r20, 0x01	; 1
    208c:	50 40       	sbci	r21, 0x00	; 0
    208e:	d8 f7       	brcc	.-10     	; 0x2086 <memcpy+0x6>
    2090:	08 95       	ret

00002092 <memset>:
    2092:	dc 01       	movw	r26, r24
    2094:	01 c0       	rjmp	.+2      	; 0x2098 <memset+0x6>
    2096:	6d 93       	st	X+, r22
    2098:	41 50       	subi	r20, 0x01	; 1
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	e0 f7       	brcc	.-8      	; 0x2096 <memset+0x4>
    209e:	08 95       	ret

000020a0 <strncpy>:
    20a0:	fb 01       	movw	r30, r22
    20a2:	dc 01       	movw	r26, r24
    20a4:	41 50       	subi	r20, 0x01	; 1
    20a6:	50 40       	sbci	r21, 0x00	; 0
    20a8:	48 f0       	brcs	.+18     	; 0x20bc <strncpy+0x1c>
    20aa:	01 90       	ld	r0, Z+
    20ac:	0d 92       	st	X+, r0
    20ae:	00 20       	and	r0, r0
    20b0:	c9 f7       	brne	.-14     	; 0x20a4 <strncpy+0x4>
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <strncpy+0x16>
    20b4:	1d 92       	st	X+, r1
    20b6:	41 50       	subi	r20, 0x01	; 1
    20b8:	50 40       	sbci	r21, 0x00	; 0
    20ba:	e0 f7       	brcc	.-8      	; 0x20b4 <strncpy+0x14>
    20bc:	08 95       	ret

000020be <_exit>:
    20be:	f8 94       	cli

000020c0 <__stop_program>:
    20c0:	ff cf       	rjmp	.-2      	; 0x20c0 <__stop_program>
